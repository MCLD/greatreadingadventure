@model GRA.Controllers.ViewModel.Avatar.AvatarViewModel

@section styles {
    <link rel="stylesheet" href="~/css/slick.min.css" asp-append-version="true" />
}

<div class="panel panel-default">
    <div class="row">
        <div class="col-xs-12 col-sm-5 pull-right">
            <div class="visible-xs">
                <div class="avatar-container center-block">
                    @foreach (var layer in Model.LayerGroupings.SelectMany(_ => _))
                    {
                        <img src="~/@layer.FilePath"
                             class="@($"image{layer.Id}") xsLayer avatar-layer@(string.IsNullOrWhiteSpace(layer.FilePath) ? " hide" : "")"
                             style="z-index: @(layer.Position + 1);"
                             data-layer="@layer.Id" />
                    }
                </div>
                <button type="button" class="btn btn-default avatar-zoom-button">
                    <span class="fa fa-lg fa-search-plus"></span>
                </button>
            </div>
            <div class="hidden-xs">
                <div class="avatar-container center-block">
                    @foreach (var layer in Model.LayerGroupings.SelectMany(_ => _))
                    {
                        <img src="~/@layer.FilePath"
                             class="@($"image{layer.Id}") avatar-layer@(string.IsNullOrWhiteSpace(layer.FilePath) ? " hide" : "")"
                             style="z-index: @(layer.Position + 1);"
                             data-layer="@layer.Id" />
                    }
                </div>
            </div>
            <div class="avatar-save-container">
                <div class="avatar-save-message"></div>
            </div>
        </div>
        <div class="col-xs-12 col-sm-7">
            <div class="row">
                <div class="col-xs-12 text-center">
                    @if (Model.LayerGroupings.Count > 1)
                    {
                        foreach (var layerGroup in Model.LayerGroupings)
                        {
                            <div style="display: inline-block;">
                                @foreach (var layer in layerGroup)
                                {
                                    <img src="~/@layer.Icon"
                                         id="@($"selector{layer.Id}")"
                                         class="avatar-layer-selector@(Model.DefaultLayer == layer.Id ? " selected" : "")"
                                         data-layer="@layer.Id"
                                         data-name="@layer.Name"
                                         data-removable="@layer.CanBeEmpty"
                                         data-showitemselector="@layer.ShowItemSelector"
                                         data-showcolorselector="@layer.ShowColorSelector"
                                         data-item="@layer.SelectedItem"
                                         data-color="@layer.SelectedColor"
                                         data-zoomscale="@layer.ZoomScale"
                                         data-zoomyoffset="@layer.ZoomYOffset" />
                                }
                            </div>
                        }
                    }
                </div>
            </div>
            <div id="avatarColors" class="row hide">
                <div class="col-xs-12">
                    <div class="avatar-selector-well well well-sm">
                        <div id="avatarColorSelectors" class="avatar-selector-container">
                        </div>
                    </div>
                </div>
            </div>
            <div id="avatarItems" class="row hide">
                <div class="col-xs-12">
                    <div class="avatar-selector-well well well-sm">
                        <div id="avatarItemSelectors" class="avatar-selector-container">
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12">
                    <div style="text-align:center;vertical-align:top;">
                        <a asp-controller="Home" asp-action="Index" class="btn btn-lg btn-default" style="margin:5px;">
                            <span class="fa fa-home"></span>
                            Home
                        </a>
                        <button id="removeButton" class="btn btn-lg btn-default hide" style="margin:5px;">
                            <span class="fa fa-ban"></span>
                            No <span id="layerName"></span>
                        </button>
                        <button id="saveAvatar" class="btn btn-lg @(Model.NewAvatar ? "btn-success" : "btn-default")" style="margin:5px;">
                            <span class="fa fa-floppy-o"></span>
                            Save
                            <span id="saveSpinner" class="fa fa-spinner fa-pulse fa-lg fa-fw hidden"></span>
                        </button>
                        <form id="shareForm" asp-action="Share" method="post" role="form" style="display: inline-block">

                            <button class="btn btn-lg btn-default" style="margin:5px;">
                                <span class="fa fa-share-alt"></span>
                                Share
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@section scripts {
    <script src="~/js/slick-avatar.min.js" asp-append-version="true"></script>
    <script>
        var baseImagePath = "@Url.Content($"~/{Model.ImagePath}")";
        var layers = $.parseJSON('@Html.Raw(Model.AvatarPiecesJson)').Layers;
        var currentLayerImage;
        var currentLayerRemovable;
        var currentLayerSelector;
        var currentLayer;
        var layerPath;
        var selectedItem;
        var selectedColor;
        var showItemSelector;
        var showColorSelector;
        var unsavedChanges = @Model.NewAvatar.ToString().ToLower();
        var xsZoom = false;

        var colorRows;
        var itemRows;

        SetLayer(@Model.DefaultLayer);

        $.ajaxSetup({
            timeout: 30000
        });

        function GetLayerById(layerId) {
            for (var i = 0; i < layers.length; i++) {
                if (layers[i].Id == layerId) {
                    return (layers[i]);
                }
            }
        }

        function SetLayer(layerId) {
            if (currentLayer == undefined || layerId != currentLayer.Id) {
                currentLayerImage = $(".image" + layerId);
                currentLayerSelector = $("#selector" + layerId);
                $(".selected").removeClass("selected");
                currentLayerSelector.addClass("selected");
                currentLayer = GetLayerById(layerId);

                layerPath = baseImagePath + "layer" + layerId + "/item"

                selectedItem = currentLayerSelector.data("item");
                selectedColor = currentLayerSelector.data("color");

                if (xsZoom) {
                    var scale = currentLayerSelector.data("zoomscale");
                    var yOffset = currentLayerSelector.data("zoomyoffset");
                    $(".xsLayer").css({ "transform": "scale(" + scale + ")", "top": "" + yOffset + "px" });
                }

                if (currentLayerSelector.data("removable") == "True") {
                    $("#layerName").text(currentLayerSelector.data("name"))
                    $("#removeButton").removeClass("hide");
                    currentLayerRemovable = true;
                }
                else {
                    $("#removeButton").addClass("hide");
                    currentLayerRemovable = false;
                }

                if (currentLayerSelector.data("showitemselector") == "True") {
                    showItemSelector = true;
                    $("#avatarItems").removeClass("hide");
                    colorRows = 2;
                }
                else {
                    showItemSelector = false;
                    $("#avatarItems").addClass("hide");
                    colorRows = 5;
                }

                if (currentLayerSelector.data("showcolorselector") == "True") {
                    showColorSelector = true;
                    $("#avatarColors").removeClass("hide");
                    itemRows = 2;
                }
                else {
                    showColorSelector = false;
                    $("#avatarColors").addClass("hide");
                    itemRows = 3;
                }

                SetItemSelectors();
                SetColorSelectors();
            }
        }
        function SetItemSelectors() {
            if ($("#avatarItemSelectors").hasClass("slick-initialized")) {
                $("#avatarItemSelectors").slick("unslick");
            }
            $("#avatarItemSelectors").empty();
            if (showItemSelector && currentLayer.Items.length > 0) {
                var lazyLoading = false;
                if (currentLayer.Items.length > 30) {
                    lazyLoading = true;
                }
                $.each(currentLayer.Items, function (i, item) {
                    var itemPath = layerPath + item + "/thumbnail.jpg";
                    var itemContainer = $("<div>");
                    var itemImage = $("<img>", { "class": "avatar-item-selector item" + item, "data-item": item });
                    if (lazyLoading) {
                        itemImage.attr("data-lazy", itemPath);
                    }
                    else {
                        itemImage.attr("src", itemPath);
                    }
                    if (selectedItem == item) {
                        itemImage.addClass("selected");
                    }

                    itemContainer.append(itemImage);
                    $("#avatarItemSelectors").append(itemContainer);
                });
                var itemIndex = Math.max(currentLayer.Items.indexOf(selectedItem), 0);
                $("#avatarItemSelectors").slick({
                    arrows: false,
                    initialSlide: Math.floor(itemIndex / itemRows),
                    lazyLoad: 'anticipated',
                    mobileFirst: true,
                    rows: itemRows,
                    slidesPerRow: 1,
                    slidesToShow: (lazyLoading ? 10 : 1),
                    swipeToSlide: true,
                    touchThreshold: 100,
                    variableWidth: true,
                    waitForAnimate: false,
                    responsive: [
                        {
                            breakpoint: 768,
                            settings: {
                                arrows: true,
                                initialSlide: Math.floor(itemIndex / (itemRows * 3)) * 3,
                                slidesToShow: 3,
                                slidesToScroll: 3,
                                swipeToSlide: false,
                                touchThreshold: 10,
                                variableWidth: false,
                                waitForAnimate: true
                            }
                        },
                        {
                            breakpoint: 992,
                            settings: {
                                arrows: true,
                                initialSlide: Math.floor(itemIndex / (itemRows * 4)) * 4,
                                slidesToShow: 4,
                                slidesToScroll: 4,
                                swipeToSlide: false,
                                touchThreshold: 10,
                                variableWidth: false,
                                waitForAnimate: true
                            }
                        },
                        {
                            breakpoint: 1200,
                            settings: {
                                arrows: true,
                                initialSlide: Math.floor(itemIndex / (itemRows * 6)) * 6,
                                slidesToShow: 6,
                                slidesToScroll: 6,
                                swipeToSlide: false,
                                touchThreshold: 10,
                                variableWidth: false,
                                waitForAnimate: true
                            }
                        }
                    ],
                });
            }
        }

        function SetColorSelectors() {
            if ($("#avatarColorSelectors").hasClass("slick-initialized")) {
                $("#avatarColorSelectors").slick("unslick");
            }
            $("#avatarColorSelectors").empty();
            if (showColorSelector && currentLayer.Colors.length > 0) {
                $.each(currentLayer.Colors, function (i, color) {
                    var colorContainer = $("<div>");
                    var colorDiv = $("<div>", { "class": "avatar-color-selector color" + color.Id, "style": "background-color:#" + color.Value, "data-color": color.Id });
                    if (selectedColor == color.Id) {
                        colorDiv.addClass("selected");
                    }
                    colorContainer.append(colorDiv);
                    $("#avatarColorSelectors").append(colorContainer);
                });

                var colorIndex = currentLayer.Colors.map(function(x) { return x.Id;}).indexOf(selectedColor);
                $("#avatarColorSelectors").slick({
                    arrows: false,
                    initialSlide: Math.floor(colorIndex / colorRows),
                    mobileFirst: true,
                    rows: colorRows,
                    slidesPerRow: 1,
                    swipeToSlide: true,
                    touchThreshold: 100,
                    variableWidth: true,
                    waitForAnimate: false,
                    responsive: [
                        {
                            breakpoint: 768,
                            settings: {
                                arrows: true,
                                initialSlide: Math.floor(colorIndex / (colorRows * 8)) * 8,
                                slidesToShow: 8,
                                slidesToScroll: 8,
                                swipeToSlide: false,
                                touchThreshold: 10,
                                variableWidth: false
                            }
                        },
                        {
                            breakpoint: 992,
                            settings: {
                                arrows: true,
                                initialSlide: Math.floor(colorIndex / (colorRows * 10)) * 10,
                                slidesToShow: 10,
                                slidesToScroll: 10,
                                swipeToSlide: false,
                                touchThreshold: 10,
                                variableWidth: false
                            }
                        },
                        {
                            breakpoint: 1200,
                            settings: {
                                arrows: true,
                                initialSlide: Math.floor(colorIndex / (colorRows * 12)) * 12,
                                slidesToShow: 12,
                                slidesToScroll: 12,
                                swipeToSlide: false,
                                touchThreshold: 10,
                                variableWidth: false
                            }
                        }
                    ]
                });
            }
        }

        function SetUnsavedChanges(bool) {
            if (unsavedChanges != bool) {
                if (bool == true) {
                    $("#saveAvatar").removeClass("btn-default").addClass("btn-success");
                    unsavedChanges = true;
                }
                else {
                    $("#saveAvatar").removeClass("btn-success").addClass("btn-default");
                    unsavedChanges = false;
                }
            }
        }

        function SetSelectedItem(item) {
            selectedItem = item;
            currentLayerSelector.data("item", item);
            $(".avatar-item-selector.selected").removeClass("selected");
            $(".item" + item).addClass("selected");
                SetLayerImage();
        }

        function SetSelectedColor(color) {
            selectedColor = color;
            currentLayerSelector.data("color", color);
            $(".avatar-color-selector.selected").removeClass("selected");
            $(".color" + color).addClass("selected");
            if (selectedItem != "") {
                SetLayerImage();
            }
        }

        function SetLayerImage() {
            var imagePath = layerPath + selectedItem + "/item";
            if (selectedColor != "") {
                imagePath += "_" + selectedColor;
            }
            imagePath += ".png";
            currentLayerImage.attr("src", imagePath).removeClass("hide");
            SetUnsavedChanges(true);
        }

        function RemoveLayerImage() {
            currentLayerSelector.data("item", "")
            currentLayerImage.addClass("hide").removeAttr("src");
            selectedItem = "";
            SetUnsavedChanges(true);
            $(".avatar-item-selector.selected").removeClass("selected");
            $(".avatar-item-remover").addClass("selected");
        }

        function GetAvatarSelection() {
            var data_array = new Array();
            $(".avatar-layer-selector").each(function () {
                var layer = {};
                layer['Id'] = $(this).data("layer");
                layer['SelectedItem'] = $(this).data("item");
                layer['SelectedColor'] = $(this).data("color");
                data_array.push(layer);
            })
            return JSON.stringify(data_array);
        }

        function SaveAvatar() {
            $.post("@Url.Action("SaveAvatar")", { selectionJson: GetAvatarSelection() }, function (response) {
                if (response.success == true) {
                    SetUnsavedChanges(false);
                    $(".avatar-save-message").removeClass("text-danger").addClass("text-success");
                    $(".avatar-save-message").text("Avatar Saved!");
                    $(".avatar-save-message").show().delay(2000).fadeOut("slow");
                }
                else {
                    $(".avatar-save-message").removeClass("text-success").addClass("text-danger");
                    $(".avatar-save-message").text(response.message);
                    $(".avatar-save-message").show();
                }
            }).fail(function () {
                $(".avatar-save-message").removeClass("text-success").addClass("text-danger");
                $(".avatar-save-message").text("Error saving Avatar");
                $(".avatar-save-message").show();
            })
            .always(function() {
                $("#saveSpinner").addClass("hidden");
                $("#saveAvatar").removeAttr("disabled");
            });
        }

        $(".avatar-layer-selector").on("click", function () {
            SetLayer($(this).data("layer"));
        })

        $(document).on("click", ".avatar-item-selector", function () {
            var item = $(this).data("item");
            if (item != selectedItem) {
                SetSelectedItem(item);
            }
        });

        $(document).on("click", ".avatar-color-selector", function () {
            var color = $(this).data("color");
            if (color != selectedColor) {
                SetSelectedColor(color);
            }
        });

        $("#removeButton").on("click", function () {
            if (currentLayerRemovable && selectedItem != "") {
                RemoveLayerImage();
            }
        });

        $(".avatar-zoom-button").on("click", function() {
            if (xsZoom) {
                $(this).children().removeClass("fa-search-minus").addClass("fa-search-plus");
                $(".xsLayer").css({ "transform": "", "top": "" });
                xsZoom = false;
            }
            else {
                var scale = currentLayerSelector.data("zoomscale");
                var yOffset = currentLayerSelector.data("zoomyoffset");
                $(this).children().removeClass("fa-search-plus").addClass("fa-search-minus");
                $(".xsLayer").css({ "transform": "scale(" + scale +")", "top": "" + yOffset + "px" });
                xsZoom = true;
            }
        });

        $("#saveAvatar").on("click", function () {
            $(".avatar-save-message").hide();
            $(this).attr("disabled", "disabled");
            $("#saveSpinner").removeClass("hidden");
            SaveAvatar();
        });

        $("#shareForm").on("submit", function (e) {
            if (unsavedChanges) {
                $("<input />")
                    .attr("type", "hidden")
                    .attr("name", "selectionJson")
                    .attr("value", GetAvatarSelection())
                    .appendTo($(this));
            }
        });
    </script>
}