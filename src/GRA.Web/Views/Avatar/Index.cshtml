@model GRA.Controllers.ViewModel.Avatar.AvatarViewModel

@section styles {
    <link rel="stylesheet" href="~/css/slick.min.css" asp-append-version="true" />
}

<div class="panel panel-default">
    <div class="row">
        <div class="col-xs-12 col-sm-5 pull-right">
            <div class="visible-xs">
                <div class="avatar-container center-block">
                    @foreach (var layer in Model.LayerGroupings.SelectMany(_ => _))
                    {
                        <img src="~/@layer.FilePath"
                             class="@($"image{layer.Id}") xsLayer avatar-layer@(string.IsNullOrWhiteSpace(layer.FilePath) ? " hide" : "")"
                             style="z-index: @(layer.Position + 1);"
                             data-layer="@layer.Id" />
                    }
                </div>
                <button type="button" class="btn btn-default avatar-zoom-button">
                    <span class="fa fa-lg fa-search-plus"></span>
                </button>
            </div>
            <div class="hidden-xs">
                <div class="avatar-container center-block">
                    @foreach (var layer in Model.LayerGroupings.SelectMany(_ => _))
                    {
                        <img src="~/@layer.FilePath"
                             class="@($"image{layer.Id}") avatar-layer@(string.IsNullOrWhiteSpace(layer.FilePath) ? " hide" : "")"
                             style="z-index: @(layer.Position + 1);"
                             data-layer="@layer.Id" />
                    }
                </div>
            </div>
            <div class="avatar-save-container">
                <div class="avatar-save-message"></div>
            </div>
        </div>
        <div class="col-xs-12 col-sm-7">
            <div class="row">
                <div class="col-xs-12 text-center">
                    @if (Model.LayerGroupings.Count > 0)
                    {
                        foreach (var layerGroup in Model.LayerGroupings)
                        {
                            <div style="display: inline-block;" class="@(Model.LayerGroupings.Count == 1 ? "hide" : "")">
                                @foreach (var layer in layerGroup)
                                {
                                    <img src="~/@layer.Icon"
                                         id="@($"selector{layer.Id}")"
                                         class="avatar-layer-selector@(Model.DefaultLayer == layer.Id ? " selected" : "")"
                                         data-layer="@layer.Id"
                                         data-name="@layer.Name"
                                         data-removable="@layer.CanBeEmpty"
                                         data-showitemselector="@layer.ShowItemSelector"
                                         data-showcolorselector="@layer.ShowColorSelector"
                                         data-item="@layer.SelectedItem"
                                         data-color="@layer.SelectedColor"
                                         data-zoomscale="@layer.ZoomScale"
                                         data-zoomyoffset="@layer.ZoomYOffset" />
                                }
                            </div>
                        }
                    }
                    <div style="display: inline-block;" class="">
                        <img src="/content/site1\avatarbundles\bundleicon.png" id="selector13" class="avatar-layer-selector" data-layer="13" data-name="Bundle" data-showitemselector="True" data-showcolorselector="False" bundle-item="" data-zoomscale="1.30" data-zoomyoffset="-5">
                    </div>
                </div>
            </div>
            <div id="avatarBundles" class="row">
                <ul class="nav" style="display: inline-table;">
                    <li>

                        @if (Model.Bundles.Count != 0)
                        {
                            var counter = 0;
                            @foreach (var bundle in Model.Bundles)
                            {
                                @if (bundle.CanBeUnlocked)
                                {
                                    counter += 1;
                                }
                            }
                            @if (counter != 0)
                            {
                                <a class="dropdown-toggle" id="bundle-selected" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                                    Select a Bundle <span class="caret"></span>
                                </a>
                                <ul class="dropdown-menu" id="bundle-drop">
                                    @foreach (var bundle in Model.Bundles)
                                    {
                                        <li class="bundle-selectors" data-bundleid="@bundle.Id"> @bundle.Name</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                                    No Unlocked Bundles <span class="caret"></span>
                                </a>
                                <ul class="dropdown-menu"></ul>
                            }
                        }
                        else
                        {
                            <a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                                No Unlocked Bundles <span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu"></ul>
                        }
                    </li>
                </ul>
            </div>
            <div id="avatarColors" class="row hide">
                <div class="col-xs-12">
                    <div class="avatar-selector-well well well-sm">
                        <div id="avatarColorSelectors" class="avatar-selector-container">
                        </div>
                    </div>
                </div>
            </div>
            <div id="avatarItems" class="row hide">
                <div class="col-xs-12">
                    <div class="avatar-selector-well well well-sm">
                        <div id="avatarItemSelectors" class="avatar-selector-container">
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12">
                    <div style="text-align:center;vertical-align:top;">
                        <a asp-controller="Home" asp-action="Index" class="btn btn-lg btn-default" style="margin:5px;">
                            <span class="fa fa-home"></span>
                            @SharedLocalizer[GRA.Domain.Model.DisplayNames.Home]
                        </a>
                        <button id="removeButton" class="btn btn-lg btn-default hide" style="margin:5px;">
                            <span class="fa fa-ban"></span>
                            No <span id="layerName"></span>
                        </button>
                        <button id="saveAvatar" class="btn btn-lg @(Model.NewAvatar ? "btn-success" : "btn-default")" style="margin:5px;">
                            <span class="fa fa-floppy-o"></span>
                            @SharedLocalizer[GRA.Annotations.Interface.Save]
                            <span id="saveSpinner" class="fa fa-spinner fa-pulse fa-lg fa-fw hidden"></span>
                        </button>
                        <form id="shareForm" asp-action="Share" method="post" role="form" style="display: inline-block">

                            <button class="btn btn-lg btn-default" style="margin:5px;">
                                <span class="fa fa-share-alt"></span>
                                @SharedLocalizer[GRA.Annotations.Interface.Share]
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@section scripts {
    <script src="~/js/slick-avatar.min.js" asp-append-version="true"></script>
    <script>
        var baseImagePath = "@Url.Content($"~/{Model.ImagePath}")";
        var layers = $.parseJSON('@Html.Raw(Model.AvatarPiecesJson)').Layers;
        var bundles = $.parseJSON('@Html.Raw(Model.AvatarBundlesJson)').Bundles;
        var hasBeenViewed = [];
        var currentLayerImage;
        var currentLayerRemovable;
        var currentLayerSelector;
        var currentLayer;
        var layerPath;
        var selectedItem;
        var selectedColor;
        var selectedbundles = [];
        var selectedBundleId = null;
        var showItemSelector;
        var showColorSelector;
        var unsavedChanges = @Model.NewAvatar.ToString().ToLower();
        var xsZoom = false;
        var colorRows;
        var itemRows;

        SetLayer(@Model.DefaultLayer);
        //InitHasBeenViewed();

        $.ajaxSetup({
            timeout: 30000
        });

        @*function InitHasBeenViewed() {
            @foreach(var bundle in @Model.Bundles) 
            {
                
                @:hasBeenViewed.push(@bundle.HasBeenViewed);
            }
        }*@

        function GetLayerById(layerId) {
            for (var i = 0; i < layers.length; i++) {
                if (layers[i].Id == layerId) {
                    return (layers[i]);
                }
            }
        }
        function GetBundleById(bundleId) {
            for (var i = 0; i < bundles.length; i++) {
                if (bundles[i].Id == bundleId) {
                    return (bundles[i]);
                }
            }
        }
        function GetItemsLayer(itemId, index) {
            for (var i = 0; i < layers.length;i++) {
                for (var j = 0; j < layers[i].Items.length;j++) {
                    if (itemId == layers[i].Items[j]) {
                        return i+1;
                    }
                }
            }
        }
         //layerId == data-layer
        function SetLayer(layerId) {
            if (currentLayer == undefined || layerId != currentLayer.Id) {

                currentLayerImage = $(".image" + layerId);
                //image id
                currentLayerSelector = $("#selector" + layerId);
                //removes the current selected
                $(".selected").removeClass("selected");
                // selects new layer
                currentLayerSelector.addClass("selected");
                $("#avatarBundles").addClass("hide");
                if (layerId == "13") {
                    currentLayer.Id = "13";
                    $("#avatarBundles").removeClass("hide");
                    showItemSelector = true;
                    $("#avatarItems").removeClass("hide");
                    colorRows = 2;
                    showColorSelector = false;
                    $("#avatarColors").addClass("hide");
                    itemRows = 3;
                    layerpath = baseImagePath;
                }
                else {
                    currentLayer = GetLayerById(layerId);

                    //path to new current layer
                    layerPath = baseImagePath + "layer" + layerId + "/item";
                }
                selectedItem = currentLayerSelector.data("item");
                selectedColor = currentLayerSelector.data("color");
                if (xsZoom) {
                    var scale = currentLayerSelector.data("zoomscale");
                    var yOffset = currentLayerSelector.data("zoomyoffset");
                    $(".xsLayer").css({ "transform": "scale(" + scale + ")", "top": "" + yOffset + "px" });
                }
                // If the layer has removable content
                if (currentLayerSelector.data("removable") == "True") {
                    $("#layerName").text(currentLayerSelector.data("name"))
                    $("#removeButton").removeClass("hide");
                    currentLayerRemovable = true;
                }
                // DN have removable content
                else {
                    $("#removeButton").addClass("hide");
                    currentLayerRemovable = false;
                }
                //If looking at items
                if (currentLayerSelector.data("showitemselector") == "True") {
                    showItemSelector = true;
                    $("#avatarItems").removeClass("hide");
                    colorRows = 2;
                }
                else {
                    showItemSelector = false;
                    $("#avatarItems").addClass("hide");
                    colorRows = 5;
                }
                //If looking at colors
                if (currentLayerSelector.data("showcolorselector") == "True") {
                    showColorSelector = true;
                    $("#avatarColors").removeClass("hide");
                    itemRows = 2;
                }
                else {
                    showColorSelector = false;
                    $("#avatarColors").addClass("hide");
                    itemRows = 3;
                }

                SetItemSelectors();
                SetColorSelectors();
            }

        }
        function SetItemSelectors() {
            // Handles hair case and removes the items
            if ($("#avatarItemSelectors").hasClass("slick-initialized")) {
                $("#avatarItemSelectors").slick("unslick");
            }
            // Remove item contents
            $("#avatarItemSelectors").empty();
            if (currentLayer != 13) {
                //If we are showing items & we have them
                if (showItemSelector && currentLayer.Items.length > 0) {
                    // ?
                    var lazyLoading = false;
                    if (currentLayer.Items.length > 30) {
                        lazyLoading = true;
                    }
                    if (selectedbundles.length != 0) {
                        for (var i = 0; i < selectedbundles.length; i++) {
                            if (GetItemsLayer(selectedbundles[i], 8) == currentLayer.Id) {
                                selectedItem = selectedbundles[i];
                            }
                        }
                    }
                    //For each othe the layer's current items
                    $.each(currentLayer.Items, function (i, item) {
                        var itemPath = layerPath + item + "/thumbnail.jpg";
                        var itemContainer = $("<div>");
                        var itemImage = $("<img>", { "class": "avatar-item-selector item" + item, "data-item": item });
                        //if we have a lot of items
                        if (lazyLoading) {
                            itemImage.attr("data-lazy", itemPath);
                        }
                        // sets the image path
                        else {
                            itemImage.attr("src", itemPath);
                        }
                        // Sets the image as the selected element
                        if (selectedItem == item) {
                            itemImage.addClass("selected");
                        }
                        // Adds to the avatar
                        itemContainer.append(itemImage);
                        $("#avatarItemSelectors").append(itemContainer);
                    });
                    // gets the index of the selected item. otherwise starts at the first carousel
                    var itemIndex = Math.max(currentLayer.Items.indexOf(selectedItem), 0);
                }
            }
            else{
                if (selectedBundleId != null){
                    @*@foreach(var bundle in @Model.Bundles){
                        @:if (@bundle.Id == selectedBundleId)
                        {
                            @bundle.HasBeenViewed.Post = 1;
                        }
                    }*@
                    if (selectedBundleId)
                    $("#avatarItemSelectors").empty();
                    for (var i = 0; i < bundles.length;i++){
                        if (bundles[i].Id == selectedBundleId){
                            var lazyLoading = false;
                            if (bundles[i].Items.length > 30) {
                                lazyLoading = true;
                            }
                            for (var item = 0; item < bundles[i].Items.length; item++) {
                                var layerId = GetItemsLayer(bundles[i].Items[item], 8);
                                layerPath = baseImagePath + "layer" + layerId + "/item";
                                var itemPath = layerPath + bundles[i].Items[item] + "/thumbnail.jpg";
                                var itemContainer = $("<div>");
                                var itemImage = $("<img>", { "class": "avatar-item-selector avatar-bundle-item-selector item" + bundles[i].Items[item], "data-item": bundles[i].Items[item], "data-layer": layerId });
                                if (lazyLoading) {
                                    itemImage.attr("data-lazy", itemPath);
                                }
                                else {
                                    itemImage.attr("src", itemPath);
                                }
                                if (selectedbundles.length != 0) {
                                    for (var idx = 0; idx < selectedbundles.length; idx++) {
                                        if (selectedbundles[idx]==bundles[i].Items[item]) {
                                            itemImage.addClass("selected");
                                        }
                                    }
                                }
                                else if (selectedItem == bundles[i].Items[item]) {
                                    itemImage.addClass("selected");
                                }
                                itemContainer.append(itemImage);
                                $("#avatarItemSelectors").append(itemContainer);
                            }
                        }
                    }
                }
                // gets the index of the selected item. otherwise starts at the first carousel
                var itemIndex = 0;
            }

            // Creates the carousel
            $("#avatarItemSelectors").slick({
                   arrows: false,
                initialSlide: Math.floor(itemIndex / itemRows),
                lazyLoad: 'anticipated',
                mobileFirst: true,
                rows: itemRows,
                slidesPerRow: 1,
                slidesToShow: (lazyLoading ? 10 : 1),
                swipeToSlide: true,
                touchThreshold: 100,
                variableWidth: true,
                waitForAnimate: false,
                responsive: [
                    {
                       breakpoint: 768,
                        settings: {
                           arrows: true,
                            initialSlide: Math.floor(itemIndex / (itemRows * 3)) * 3,
                            slidesToShow: 3,
                            slidesToScroll: 3,
                            swipeToSlide: false,
                            touchThreshold: 10,
                            variableWidth: false,
                            waitForAnimate: true
                        }
                       },
                    {
                       breakpoint: 992,
                        settings: {
                           arrows: true,
                            initialSlide: Math.floor(itemIndex / (itemRows * 4)) * 4,
                            slidesToShow: 4,
                            slidesToScroll: 4,
                            swipeToSlide: false,
                            touchThreshold: 10,
                            variableWidth: false,
                            waitForAnimate: true
                        }
                       },
                    {
                       breakpoint: 1200,
                        settings: {
                           arrows: true,
                            initialSlide: Math.floor(itemIndex / (itemRows * 6)) * 6,
                            slidesToShow: 6,
                            slidesToScroll: 6,
                            swipeToSlide: false,
                            touchThreshold: 10,
                            variableWidth: false,
                            waitForAnimate: true
                        }
                       }
                ],
            });
        }

        function SetColorSelectors() {
                       // If body or hair remove the slick
                       if ($("#avatarColorSelectors").hasClass("slick-initialized")) {
                $("#avatarColorSelectors").slick("unslick");
                       }
            //Remove the colors
            $("#avatarColorSelectors").empty();
                       //If we are showing colors and we have them
                       if (showColorSelector && currentLayer.Colors.length > 0) {
                //loops and adds the colors
                $.each(currentLayer.Colors, function (i, color) {
                               var colorContainer = $("<div>");
                               var colorDiv = $("<div>", { "class": "avatar-color-selector color" + color.Id, "style": "background-color:#" + color.Value, "data-color": color.Id });
                               if (selectedColor == color.Id) {
                                   colorDiv.addClass("selected");
                               }
                               colorContainer.append(colorDiv);
                    $("#avatarColorSelectors").append(colorContainer);
                           });
                           // Gets the index of selected color if one is chosen
                           var colorIndex = currentLayer.Colors.map(function (x) { return x.Id; }).indexOf(selectedColor);
                // Creates the color carousel
                $("#avatarColorSelectors").slick({
                    arrows: false,
                    initialSlide: Math.floor(colorIndex / colorRows),
                    mobileFirst: true,
                    rows: colorRows,
                    slidesPerRow: 1,
                    swipeToSlide: true,
                    touchThreshold: 100,
                    variableWidth: true,
                    waitForAnimate: false,
                    responsive: [
                        {
                            breakpoint: 768,
                            settings: {
                                arrows: true,
                                initialSlide: Math.floor(colorIndex / (colorRows * 8)) * 8,
                                slidesToShow: 8,
                                slidesToScroll: 8,
                                swipeToSlide: false,
                                touchThreshold: 10,
                                variableWidth: false
                            }
                               },
                        {
                               breakpoint: 992,
                            settings: {
                                arrows: true,
                                initialSlide: Math.floor(colorIndex / (colorRows * 10)) * 10,
                                slidesToShow: 10,
                                slidesToScroll: 10,
                                swipeToSlide: false,
                                touchThreshold: 10,
                                variableWidth: false
                            }
                               },
                        {
                            breakpoint: 1200,
                            settings: {
                                arrows: true,
                                initialSlide: Math.floor(colorIndex / (colorRows * 12)) * 12,
                                slidesToShow: 12,
                                slidesToScroll: 12,
                                swipeToSlide: false,
                                touchThreshold: 10,
                                variableWidth: false
                            }
                               }
                    ]
                });
                       }
                   }

        function SetUnsavedChanges(bool) {
            if (unsavedChanges != bool) {
                if (bool == true) {
        $("#saveAvatar").removeClass("btn-default").addClass("btn-success");
                    unsavedChanges = true;
                }
                else {
        $("#saveAvatar").removeClass("btn-success").addClass("btn-default");
                    unsavedChanges = false;
                }
            }
        }

        function SetSelectedItem(item) {
            if (selectedbundles != []) {
                for (var i = 0; i < selectedbundles.length; i++) {
                    if (GetItemsLayer(selectedbundles[i]) == currentLayer.Id) {
                        selectedbundles = RemoveItemFromList(selectedbundles[i], selectedbundles);
                    }
                }
            }
            selectedItem = item;
            currentLayerSelector.data("item", item);
            $(".avatar-item-selector.selected").removeClass("selected");
            $(".item" + item).addClass("selected");
            SetLayerImage();
        }

        function SetSelectedBundleItem(item) {
            var layerId = GetItemsLayer(item, 8);
            var bundlelayerPath = baseImagePath + "layer" + layerId + "/item" + item;
            for (var i = 0; i < selectedbundles.length; i++) {
                if (GetItemsLayer(selectedbundles[i], 8) == layerId) {
                    $(".avatar-item-selector.item"+selectedbundles[i]).removeClass("selected");
                    selectedbundles = RemoveItemFromList(selectedbundles[i],selectedbundles);
                }
            }
            $(".item" + item).addClass("selected");
            selectedbundles.push(item);
            console.log(selectedbundles);
            SetBundleLayerImage(bundlelayerPath, item);
        }
        function SetBundleLayerImage(bundlelayerPath, item) {
            var imagePath = bundlelayerPath + "/item";
            var itemslayer = GetItemsLayer(item, 8)
            imagePath += ".png";
            var container1 = Array.from($(".avatar-container")[0].children);
            var container2 = Array.from($(".avatar-container")[1].children);
            for (var i = 0; i < container1.length; i++){
                var obj1 = $(container1[i]);
                var obj2 = $(container2[i]);
                if (obj1.data("layer") == itemslayer) {
                    obj1.attr("src", imagePath);
                    obj2.attr("src", imagePath);
                    if (itemslayer >= 5) {
                        obj1.removeClass("hide");
                        obj2.removeClass("hide");
                    }
                }
            }
            currentLayerImage.attr("src", imagePath).removeClass("hide");
            SetUnsavedChanges(true);
        }
        function RemoveItemFromList(item, arr) {
            var newarray = [];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] != item) {
                    newarray.push(arr[i]);
                }
            }
            return newarray;
        }

        function SetSelectedColor(color) {
            selectedColor = color;
            currentLayerSelector.data("color", color);
            $(".avatar-color-selector.selected").removeClass("selected");
            $(".color" + color).addClass("selected");
            if (selectedItem != "") {
                SetLayerImage();
            }
        }

        function SetLayerImage() {
            var imagePath = layerPath + selectedItem + "/item";
            if (selectedColor != "") {
                imagePath += "_" + selectedColor;
            }
            imagePath += ".png";
            currentLayerImage.attr("src", imagePath).removeClass("hide");
            SetUnsavedChanges(true);
        }

        function RemoveLayerImage() {
            currentLayerSelector.data("item", "")
            currentLayerImage.addClass("hide").removeAttr("src");
            selectedItem = "";
            SetUnsavedChanges(true);
            $(".avatar-item-selector.selected").removeClass("selected");
            $(".avatar-item-remover").addClass("selected");
        }
        function GetAvatarSelection() {
            var data_array = new Array();
            $(".avatar-layer-selector").each(function () {
                var layer = {};
                layer['Id'] = $(this).data("layer");
                layer['SelectedItem'] = $(this).data("item");
                layer['SelectedColor'] = $(this).data("color");
                data_array.push(layer);
            })
            return JSON.stringify(data_array);
        }

        function SaveAvatar() {
        $.post("@Url.Action("SaveAvatar")", { selectionJson: GetAvatarSelection() }, function (response) {
            if (response.success == true) {
                $(".avatar-save-message").removeClass("text-danger").addClass("text-success");
                $(".avatar-save-message").text("@SharedLocalizer[GRA.Annotations.Interface.AvatarSaved]");
                $(".avatar-save-message").show().delay(2000).fadeOut("slow");

                @if (Context.Items[GRA.Controllers.ItemKey.GoogleAnalytics] != null){
                    <text>
                    if (unsavedChanges){
                            gtag('event', 'avatar_update');
                    }
                    </text>
                    }

                    SetUnsavedChanges(false);
            }
            else {
                $(".avatar-save-message").removeClass("text-success").addClass("text-danger");
                $(".avatar-save-message").text(response.message);
                $(".avatar-save-message").show();
            }
            }).fail(function () {
                $(".avatar-save-message").removeClass("text-success").addClass("text-danger");
                $(".avatar-save-message").text("@SharedLocalizer[GRA.Annotations.Validate.CouldNotSaveAvatar]");
                $(".avatar-save-message").show();
            })
            .always(function() {
                $("#saveSpinner").addClass("hidden");
                $("#saveAvatar").removeAttr("disabled");
            });
        }

        // Updates the tab
        $(".avatar-layer-selector").on("click", function () {
            if ($(this).data("layer") == 13) {
                currentLayer = 13;
            }
            SetLayer($(this).data("layer"));
        })

        // updates the article of clothing
        $(document).on("click", ".avatar-item-selector", function () {
            var item = $(this).data("item");
            if (currentLayer == 13) {
                SetSelectedBundleItem(item);
            }
            else if(item != selectedItem) {
                SetSelectedItem(item);
            }
        });

        // Updates the color selected
        $(document).on("click", ".avatar-color-selector", function () {
            var color = $(this).data("color");
            if (color != selectedColor) {
                SetSelectedColor(color);
            }
        });

        // Updates the selected bundle
        $(document).on("click", ".bundle-selectors", function () {
            $("li#bundle-selected").removeAttr("id");
            $("li").find("#selected-bundle").removeAttr("id");
            $(this).attr("id", "selected-bundle");
            $(this).addClass("active");
            selectedBundleId = $("li").find("#selected-bundle").data("bundleid");
            $("#bundle-selected").text($(this).text());
            $("#bundle-selected").append("<span class='caret'></span>");
            GetBundleById(selectedBundleId);
            SetLayer(13);
        });

        // Removes the layer's article
        $("#removeButton").on("click", function () {
            if (currentLayerRemovable && selectedItem != "") {
                RemoveLayerImage();
            }
        });

        //Mobile zoom
        $(".avatar-zoom-button").on("click", function () {
            // zoom in
            if (xsZoom) {
                $(this).children().removeClass("fa-search-minus").addClass("fa-search-plus");
                $(".xsLayer").css({ "transform": "", "top": "" });
                xsZoom = false;
            }
            //zoom out
            else {
                var scale = currentLayerSelector.data("zoomscale");
                var yOffset = currentLayerSelector.data("zoomyoffset");
                $(this).children().removeClass("fa-search-plus").addClass("fa-search-minus");
                $(".xsLayer").css({ "transform": "scale(" + scale +")", "top": "" + yOffset + "px" });
                xsZoom = true;
            }
        });
        // Save
        $("#saveAvatar").on("click", function () {
            $(".avatar-save-message").hide();
            $(this).attr("disabled", "disabled");
            $("#saveSpinner").removeClass("hidden");
                       SaveAvatar();
                   });

        $("avatar-bundle-item-selector").on("click", function () {
            $(".avatar-save-message").hide();
            $(this).attr("disabled", "disabled");
            $("#saveSpinner").removeClass("hidden");
                       SaveAvatar();
                   });
        // submit
        $("#shareForm").on("submit", function (e) {
            if (unsavedChanges) {
                @if (Context.Items[GRA.Controllers.ItemKey.GoogleAnalytics] != null){
                    @:gtag('event', 'avatar_update');
            }

            $("<input />")
            .attr("type", "hidden")
            .attr("name", "selectionJson")
            .attr("value", GetAvatarSelection())
            .appendTo($(this));
            }
        });
    </script>
}