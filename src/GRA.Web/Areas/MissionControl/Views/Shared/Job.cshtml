@model GRA.Controllers.ViewModel.MissionControl.Shared.JobViewModel
<div class="modal fade" tabindex="-1" role="dialog" id="wsModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="wsTitle">Loading...</h4>
            </div>
            <div class="modal-body">
                <div class="progress">
                    <div class="progress-bar progress-bar-striped"
                         role="progressbar"
                         id="wsProgress"
                         aria-valuenow="100"
                         aria-valuemin="0"
                         aria-valuemax="100" style="width: 100%;"></div>
                </div>
                <p id="wsStatus"></p>
            </div>
            <div class="modal-footer">
                <div class="form-control-static pull-left" style="width: 2rem;">
                    <span class="fas fa-arrow-circle-up"
                          id="sendWs"
                          style="color: steelblue;"></span>
                </div>
                <div class="form-control-static pull-left" style="width: 2rem;">
                    <span class="fas fa-arrow-circle-down"
                          id="recvWs"
                          style="color: lightcoral;"></span>
                </div>
                <button type="button" class="btn" id="cancelWs">Cancel</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

@section scripts {
    <script>
    var wsStarted = false;
    var wsFinished = false;
    var wsCancel = false;
    var wsError = false;
    var wsTryingToConnect = false;
    var wsPageTitle = '@Model.Title';
    var webSocket;
    var wsPing;
    var wsFunction = 'job';
    var wsScheme = document.location.protocol == "https:" ? "wss" : "ws";
    var wsPort = document.location.port ? (":" + document.location.port) : "";
    var wsUrl = wsScheme + "://" + document.location.hostname + wsPort + "/runjob/@Model.JobToken";
    var wsSuccessUrl = '@Model.SuccessUrl';
    var wsSuccessRedirect = '@Model.SuccessRedirectUrl';
    var wsCompleteButton = '@Model.CompleteButton';
    var wsCancelUrl = '@Model.CancelUrl';

    function updateState(e) {
        if (!webSocket) {
            $('#wsStatus').text('Cannot communicate with server.');
        } else if (!wsCancel) {
            switch (webSocket.readyState) {
                case WebSocket.CLOSED:
                    clearPing();
                    if (wsStarted && wsFinished) {
                        console.log("Socket closed, error status: " + wsError);
                        if (wsSuccessRedirect.length > 0 && !wsError) {
                            window.location.href = wsSuccessRedirect;
                        }
                        else
                        {
                            $('#cancelWs').text(wsCompleteButton);
                            $('#cancelWs').removeClass('btn-danger');
                            $('#cancelWs').addClass('btn-default');
                            $('#cancelWs').on('click', function () {
                                window.location.href = wsError ? wsCancelUrl : wsSuccessUrl;
                                return false;
                            });
                        }
                    } else if (wsStarted && !wsFinished) {
                        $('#cancelWs').text('Close window');
                        $('#cancelWs').addClass('btn-danger');
                        $('#wsProgress').removeClass('active');
                        $('#wsProgress').addClass('progress-bar-danger');
                        $('#wsStatus').text('The server disconnected while running the ' + wsFunction + '.');
                    } else if (wsTryingToConnect) {
                        $('#cancelWs').text('Close window');
                        $('#cancelWs').addClass('btn-danger');
                        $('#wsProgress').removeClass('active');
                        $('#wsProgress').addClass('progress-bar-danger');
                        $('#wsStatus').text('Unable to connect to the server to run the ' + wsFunction + '.');
                        $('#recvWs').fadeOut(1);
                        $('#sendWs').fadeOut(1);
                        console.log("Failure while trying to connect to: " + wsUrl);
                    }
                    break;
                case WebSocket.CLOSING:
                    if (wsStarted) {
                        $('#wsStatus').text('Connection closing...');
                    }
                    break;
                case WebSocket.CONNECTING:
                    $('#wsStatus').text('Connecting...');
                    break;
                case WebSocket.OPEN:
                    wsTryingToConnect = false;
                    if (e && e.data) {
                        var incoming = JSON.parse(e.data);
                        $('#recvWs').fadeIn(500, function () {
                            $('#recvWs').fadeOut(500);
                        });
                        if (incoming.Title) {
                            if (wsPageTitle != incoming.Title) {
                                wsPageTitle = incoming.Title;
                                $('#wsTitle').html(wsPageTitle);
                                console.log("Job title: " + wsPageTitle);
                            }
                        }
                        if (incoming.SuccessUrl) {
                            if (incoming.SuccessRedirect) {
                                if (incoming.SuccessUrl != wsSuccessRedirect) {
                                    wsSuccessUrl = '';
                                    wsSuccessRedirect = incoming.SuccessUrl;
                                    console.log("On success, redirect to: " + wsSuccessRedirect);
                                }
                            }
                            else
                            {
                                if (incoming.SuccessUrl != wsSuccessUrl) {
                                    wsSuccessUrl = incoming.SuccessUrl;
                                    wsSuccessRedirect = '';
                                    console.log("On success, link to: " + wsSuccessUrl);
                                }
                            }
                        }
                        if (incoming.CancelUrl) {
                            if (incoming.CancelUrl != wsCancelUrl) {
                                wsCancelUrl = incoming.CancelUrl;
                                console.log("On cancel, link to: " + wsCancelUrl);
                            }
                        }
                        if (incoming.Status) {
                            $('#wsStatus').html(incoming.Status);
                        }
                        if (incoming.PercentComplete) {
                            document.title = wsPageTitle + ' - ' + incoming.PercentComplete + '%';
                            $('#wsProgress').width(incoming.PercentComplete + '%');
                            if (incoming.PercentComplete > 4) {
                                $('#wsProgress').text(incoming.PercentComplete + '%');
                            }
                            else
                            {
                                $('#wsProgress').text('');
                            }
                        }
                        if (incoming.Error) {
                            wsError = true;
                        }
                        if (incoming.Complete) {
                            wsFinished = true;
                            if (wsError) {
                                console.log("Complete with error");
                                $('#cancelWs').text('Close window');
                                $('#wsProgress').removeClass('active');
                                $('#wsProgress').addClass('progress-bar-danger');
                            }
                            else
                            {
                                console.log("Complete");
                                $('#cancelWs').text('Close window');
                                $('#cancelWs').removeClass('btn-danger');
                                $('#cancelWs').addClass('btn-default');
                                $('#wsProgress').removeClass('active');
                                $('#wsProgress').addClass('progress-bar-success');
                            }
                            webSocket.close();
                            clearPing();
                        }
                    }
                    break;
                default:
                    $('#wsStatus').text('Unknown state: ' + webSocket.readyState);
                    break;
            }
        }
    }

    function doPing() {
        if (webSocket && webSocket.readyState == WebSocket.OPEN && !wsFinished) {
            webSocket.send(String.fromCharCode(6));
            $('#sendWs').fadeIn(500, function () {
                $('#sendWs').fadeOut(500);
            });
        }
    }

    function clearPing() {
        if (wsPing) {
            clearInterval(wsPing);
        }
    }

    $().ready(function () {
        wsCancel = false;
        $('#recvWs').fadeOut(1);
        $('#sendWs').fadeOut(1)
        $('#wsProgress').removeClass('active');
        $('#wsProgress').removeClass('progress-bar-danger');
        $('#wsProgress').removeClass('progress-bar-success');
        $('#cancelWs').text('Cancel ' + wsFunction);
        $('#cancelWs').addClass('btn-danger');
        $('#wsModal').modal({
            backdrop: 'static',
            keyboard: false
        });
        wsTryingToConnect = true;
        webSocket = new WebSocket(wsUrl);
        webSocket.onerror = updateState;
        webSocket.onopen = function (e) {
            $('#wsProgress').addClass('active');
            wsStarted = true;
        }
        webSocket.onclose = updateState;
        webSocket.onmessage = updateState;
        wsPing = setInterval(doPing, @(Model.PingSeconds * 1000));
        console.log("Client set to ping server every @Model.PingSeconds seconds");
        return false;
        });

        $('#cancelWs').click(function () {
            wsCancel = true;
            if (webSocket && webSocket.readyState == WebSocket.OPEN) {
                webSocket.close();
            }
            clearPing();
            window.location.href = wsCancelUrl;
        });
    </script>
}
