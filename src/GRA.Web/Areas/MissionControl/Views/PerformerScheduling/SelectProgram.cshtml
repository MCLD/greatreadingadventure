@model GRA.Controllers.ViewModel.MissionControl.PerformerScheduling.SelectProgramViewModel

@section styles {
    <link rel="stylesheet" href="~/css/performerregistration.min.css" asp-append-version="true" />
}

<div class="row">
    <div class="col-xs-12">
        <h1>
            Select Program
        </h1>

        <div class="row">
            <div class="col-xs-12 col-sm-8 col-sm-offset-2">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row form-group">
                            <div class="col-xs-6">
                                <label>Branch</label>
                                <div>@Model.BranchSelection.Branch.Name</div>
                            </div>
                            <div class="col-xs-6">
                                <label>Age Group</label>
                                <div>@Model.BranchSelection.AgeGroup.Name</div>
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-xs-6">
                                <label>Program</label>
                                <div>@Model.BranchSelection.Program.Title</div>
                            </div>
                            <div class="col-xs-6">
                                <label>Program Length</label>
                                <div>@Model.BranchSelection.Program.ProgramLengthMinutes minutes</div>
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-xs-6">
                                <label>Set-up Time</label>
                                <div>@Model.BranchSelection.Program.SetupTimeMinutes minutes</div>
                            </div>
                            <div class="col-xs-6">
                                <label>Breakdown Time</label>
                                <div>@Model.BranchSelection.Program.BreakdownTimeMinutes minutes</div>
                            </div>
                        </div>
                        @if (Model.BranchSelection.BackToBackProgram)
                        {
                            <div class="row form-group">
                                <div class="col-xs-6">
                                    <label>Back to Back Program</label>
                                    <div>Yes</div>
                                </div>
                                <div class="col-xs-6">
                                    <label>Back to Back Time</label>
                                    <div>@Model.BranchSelection.Program.BackToBackMinutes minutes</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        @{int count = 0;}
        @for (var calendarMonth = new DateTime(Model.Settings.ScheduleStartDate.Value.Year, Model.Settings.ScheduleStartDate.Value.Month, 1); calendarMonth <= Model.Settings.ScheduleEndDate.Value; calendarMonth = calendarMonth.AddMonths(1))
        {
            var firstDayOfWeek = (int)calendarMonth.DayOfWeek;
            var daysInMonth = DateTime.DaysInMonth(calendarMonth.Year, calendarMonth.Month);
            var monthDateSelectors = (firstDayOfWeek + daysInMonth > 35 ? 42 : 35);

            @if (count % 3 == 0)
            {
                @Html.Raw("<div class=\"row\">");
            }
            <div class="col-xs-12 col-md-4">
                <table class="table table-bordered" style="table-layout:fixed; text-align:center">
                    <thead>
                        <tr>
                            <td colspan="7" class="calendar-cell">
                                <div class="option">
                                    @calendarMonth.ToString("MMMM") @(Model.Settings.ScheduleStartDate.Value.Year != Model.Settings.ScheduleEndDate.Value.Year ? calendarMonth.ToString("yyyy") : "")
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td class="calendar-cell"><div class="option">Sun</div></td>
                            <td class="calendar-cell"><div class="option">Mon</div></td>
                            <td class="calendar-cell"><div class="option">Tue</div></td>
                            <td class="calendar-cell"><div class="option">Wed</div></td>
                            <td class="calendar-cell"><div class="option">Thu</div></td>
                            <td class="calendar-cell"><div class="option">Fri</div></td>
                            <td class="calendar-cell"><div class="option">Sat</div></td>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int date = 1 - firstDayOfWeek; date <= (monthDateSelectors - firstDayOfWeek); date++)
                        {
                            var outOfRange = (calendarMonth.Month == Model.Settings.ScheduleStartDate.Value.Month && calendarMonth.Year == Model.Settings.ScheduleStartDate.Value.Year && date < Model.Settings.ScheduleStartDate.Value.Day
                                || calendarMonth.Month == Model.Settings.ScheduleEndDate.Value.Month && calendarMonth.Year == Model.Settings.ScheduleEndDate.Value.Year && date > Model.Settings.ScheduleEndDate.Value.Day);
                            var hideDate = date < 1 || date > daysInMonth;
                            var blackoutDate = Model.BlackoutDates.FirstOrDefault(_ => _.Date.Day == date && _.Date.Month == calendarMonth.Month && _.Date.Year == calendarMonth.Year);
                            var scheduleDate = Model.ScheduleDates.FirstOrDefault(_ => _.Date.Day == date && _.Date.Month == calendarMonth.Month && _.Date.Year == calendarMonth.Year);
                            var bookedDate = Model.BookedDates.FirstOrDefault(_ => _.Day == date && _.Month == calendarMonth.Month && _.Year == calendarMonth.Year);

                            if ((date + firstDayOfWeek) % 7 == 1)
                            {
                                @:<tr>
                                }
                                <td class="@(outOfRange || hideDate || blackoutDate != null || (scheduleDate != null && scheduleDate?.StartTime == null) ? "unselectable" : "selectable")@(blackoutDate != null ? " blackout" : "")@(outOfRange ? " out-of-range" : "")" data-year="@calendarMonth.Year" data-month="@calendarMonth.Month" data-date="@date" data-start="@(scheduleDate?.StartTime?.ToShortTimeString() ?? "8:00 AM")" asp-schedule="@scheduleDate" asp-booked="@bookedDate" asp-booking="true">
                                    <div class="option" data-toggle="tooltip" data-placement="top" title="@blackoutDate?.Reason">
                                        @Html.Raw(hideDate ? "&nbsp;" : date.ToString())
                                    </div>
                                </td>
                                if ((date + firstDayOfWeek) % 7 == 0)
                                {
                                @:</tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            if (count % 3 == 2)
            {
                @Html.Raw("</div>");
            }
            { count++; }
        }
        @if (count % 3 != 0)
        {
            @Html.Raw("</div>");
        }

        <div class="row">
            <div class="col-xs-12">
                <div id="daySchedule"><p>Select a date to see available times.</p></div>
                <table>
                    <tr>
                        <td>
                            Program Start Time:
                        </td>
                        <td style="padding-left:15px;" colspan="2">
                            Total Performer Time:
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div class="input-group date" id="pickerStart" style="width:150px;">
                                <span class="input-group-addon">
                                    <span class="far fa-clock"></span>
                                </span>
                                <input id="startTime" class="form-control" disabled="disabled" />
                            </div>
                        </td>
                        <td id="programDuration" style="padding-left: 15px; width: 175px;"></td>
                        <td>
                            <button id="checkTime" type="button" class="btn btn-primary" style="margin-left:15px;" disabled="disabled">Check Time</button>
                        </td>
                    </tr>
                </table>

                <div class="row" style="margin-top: 20px;">
                    <div class="col-xs-12 col-sm-6">
                        <div id="checkAlert" class="alert hidden"></div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-xs-12 col-sm-6">
                        <button id="scheduleProgram" type="button" class="btn btn-success hidden">Schedule Program</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<form asp-action="@nameof(PerformerSchedulingController.ScheduleProgram)" id="branchSelectionForm" method="post" role="form" hidden="hidden">
    <input name="AgeGroupId" asp-for="BranchSelection.AgeGroupId" type="hidden" />
    <input name="BackToBackProgram" asp-for="BranchSelection.BackToBackProgram" type="hidden" />
    <input name="BranchId" asp-for="BranchSelection.BranchId" type="hidden" />
    <input name="ProgramId" asp-for="BranchSelection.ProgramId" type="hidden" />
    <input name="RequestedStartTime" asp-for="BranchSelection.RequestedStartTime" type="hidden" />
</form>

@section Scripts {
    <script>
        var dayScheduleUrl = "@Url.Action(nameof(PerformerSchedulingController.GetPerformerDaySchedule))";
        var checkTimeUrl = "@Url.Action(nameof(PerformerSchedulingController.CheckProgramTimeAvailability))";
        var scheduleBranchProgramUrl = "@Url.Action(nameof(PerformerSchedulingController.ScheduleProgram))";
        var backToBack = @Model.BranchSelection.BackToBackProgram.ToString().ToLower();
        var selectedDate;
        var startTime;
        var startDateTime;

        $(".selectable").on("click", function () {
            $(".selected-date").removeClass("selected-date");
            $(this).children().addClass("selected-date");
            selectedDate = $(this).data("year") + "-" + $(this).data("month") + "-" + $(this).data("date");
            startTime = $(this).data("start");

            $("#checkAlert").addClass("hidden");
            $("#scheduleProgram").addClass("hidden");
            $.get(dayScheduleUrl, { performerId: "@Model.BranchSelection.Program.PerformerId", date: selectedDate }, function (response) {
                $("#daySchedule").html(response);
                $("#startTime").val("").removeAttr("disabled");
                $("#checkTime").attr("disabled", "disabled");
            });
        });

        $("[id^=picker]").datetimepicker({
            format: "hh:mm A",
            allowInputToggle: true,
            stepping: 5,
            useCurrent: false,
            icons: {
                time: "far fa-clock",
                date: "fas fa-calendar-alt",
                up: "fas fa-arrow-up",
                down: "fas fa-arrow-down",
                previous: "fas fa-arrow-left",
                next: "fas fa-arrow-right"
            }
        });

        $("#pickerStart").on("dp.show", function () {
            if ($("#startTime").val() == "") {
                $(this).data("DateTimePicker").date(startTime);
            }
        });

        $("#pickerStart").on("dp.change", function () {
            if ($("#pickerStart").data("DateTimePicker").date() != null) {
                $("#checkTime").removeAttr("disabled");
                var scheduleStartTime = $("#pickerStart").data("DateTimePicker").date().subtract(@Model.BranchSelection.Program.SetupTimeMinutes, "minutes").format("hh:mm A");
                var scheduleEndTime = $("#pickerStart").data("DateTimePicker").date().add(@Model.BranchSelection.Program.ProgramLengthMinutes + @Model.BranchSelection.Program.BreakdownTimeMinutes, "minutes");
                if (backToBack == true) {
                    scheduleEndTime.add(@Model.BranchSelection.Program.ProgramLengthMinutes + @Model.BranchSelection.Program.BackToBackMinutes, "minutes");
                }
                scheduleEndTime = scheduleEndTime.format("hh:mm A");
                $("#programDuration").text(scheduleStartTime + " – " + scheduleEndTime);
            }
            else {
                $("#programDuration").text();
            }
            $("#checkAlert").addClass("hidden");
            $("#scheduleProgram").addClass("hidden");
        });

        $("#checkTime").on("click", function () {
            var time = $("#pickerStart").data("DateTimePicker").date().format("HH:mm");
            startDateTime = selectedDate + "T" + time;
            $.getJSON(checkTimeUrl, { programId: "@Model.BranchSelection.ProgramId", dateTime: startDateTime, backToBack: backToBack }, function (response) {
                var checkAlert = $("#checkAlert");
                checkAlert.removeClass("hidden").removeClass("alert-warning alert-success alert-danger");
                if (response.success == true) {
                    if (response.message != null) {
                        checkAlert.addClass("alert-warning").text(response.message);
                    }
                    else {
                        checkAlert.addClass("alert-success").text("The performer is available at that time.");
                    }
                    $("#scheduleProgram").removeClass("hidden");
                }
                else {
                    checkAlert.addClass("alert-danger").text(response.message);
                }
            });
        });

        $("#scheduleProgram").on("click", function () {
            if ($(this).hasClass("hidden") == false) {
                $("#BranchSelection_RequestedStartTime").val(startDateTime);
                var data = $("#branchSelectionForm").serializeArray().reduce(function (m, o) { m[o.name] = o.value; return m; }, {})
                $.post(scheduleBranchProgramUrl, { branchSelection: data }, function (response) {
                    if (response.success) {
                        window.location.href = "@Url.Action(nameof(PerformerSchedulingController.Program), new { id = Model.BranchSelection.ProgramId})";
                    }
                    else {
                        $("#checkAlert").addClass("hidden");
                        $("#scheduleProgram").addClass("hidden");
                        alert(response.message);
                    }
                });
            }
        });
    </script>
}