CREATE TABLE [dbo].[Avatar](
	[AID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[Gender] [varchar](1) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_Avatar] PRIMARY KEY CLUSTERED 
(
	[AID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[Badge](
	[BID] [int] IDENTITY(1000,1) NOT NULL,
	[AdminName] [varchar](50) NULL,
	[UserName] [varchar](50) NULL,
	[GenNotificationFlag] [bit] NULL,
	[NotificationSubject] [varchar](150) NULL,
	[NotificationBody] [text] NULL,
	[CustomEarnedMessage] [text] NULL,
	[IncludesPhysicalPrizeFlag] [bit] NULL,
	[PhysicalPrizeName] [varchar](50) NULL,
	[AssignProgramPrizeCode] [bit] NULL,
	[PCNotificationSubject] [varchar](150) NULL,
	[PCNotificationBody] [text] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_Badge] PRIMARY KEY CLUSTERED 
(
	[BID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[BookList](
	[BLID] [int] IDENTITY(1,1) NOT NULL,
	[AdminName] [varchar](50) NULL,
	[ListName] [varchar](50) NULL,
	[AdminDescription] [text] NULL,
	[Description] [text] NULL,
	[LiteracyLevel1] [int] NULL,
	[LiteracyLevel2] [int] NULL,
	[ProgID] [int] NULL,
	[LibraryID] [int] NULL,
	[AwardBadgeID] [int] NULL,
	[AwardPoints] [int] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_BookList] PRIMARY KEY CLUSTERED 
(
	[BLID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[BookListBooks](
	[BLBID] [int] IDENTITY(1,1) NOT NULL,
	[BLID] [int] NULL,
	[Author] [varchar](50) NULL,
	[Title] [varchar](150) NULL,
	[ISBN] [varchar](50) NULL,
	[URL] [varchar](150) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_BookListBooks] PRIMARY KEY CLUSTERED 
(
	[BLBID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[Code](
	[CID] [int] IDENTITY(1,1) NOT NULL,
	[CTID] [int] NULL,
	[Code] [varchar](25) NULL,
	[Description] [varchar](80) NULL,
 CONSTRAINT [PK_Code] PRIMARY KEY CLUSTERED 
(
	[CID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[CodeType](
	[CTID] [int] IDENTITY(1,1) NOT NULL,
	[isSystem] [bit] NULL,
	[CodeTypeName] [varchar](50) NULL,
	[Description] [text] NULL,
 CONSTRAINT [PK_CodeType] PRIMARY KEY CLUSTERED 
(
	[CTID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[CustomEventFields](
	[CID] [int] NOT NULL,
	[Use1] [bit] NULL,
	[Label1] [varchar](50) NULL,
	[DDValues1] [varchar](50) NULL,
	[Use2] [bit] NULL,
	[Use3] [bit] NULL,
	[Label2] [varchar](50) NULL,
	[Label3] [varchar](50) NULL,
	[DDValues2] [varchar](50) NULL,
	[DDValues3] [varchar](50) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL
) ON [PRIMARY];
CREATE TABLE [dbo].[CustomRegistrationFields](
	[CID] [int] IDENTITY(1,1) NOT NULL,
	[Use1] [bit] NULL,
	[Label1] [varchar](50) NULL,
	[DDValues1] [varchar](50) NULL,
	[Use2] [bit] NULL,
	[Use3] [bit] NULL,
	[Use4] [bit] NULL,
	[Use5] [bit] NULL,
	[Label2] [varchar](50) NULL,
	[Label3] [varchar](50) NULL,
	[Label4] [varchar](50) NULL,
	[Label5] [varchar](50) NULL,
	[DDValues2] [varchar](50) NULL,
	[DDValues3] [varchar](50) NULL,
	[DDValues4] [varchar](50) NULL,
	[DDValues5] [varchar](50) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_CustomRegistrationFields] PRIMARY KEY CLUSTERED 
(
	[CID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[Event](
	[EID] [int] IDENTITY(1,1) NOT NULL,
	[EventTitle] [varchar](150) NULL,
	[EventDate] [datetime] NULL,
	[EventTime] [varchar](15) NULL,
	[HTML] [text] NULL,
	[SecretCode] [varchar](50) NULL,
	[NumberPoints] [int] NULL,
	[BadgeID] [int] NULL,
	[BranchID] [int] NULL,
	[Custom1] [varchar](50) NULL,
	[Custom2] [varchar](50) NULL,
	[Custom3] [varchar](50) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_Event] PRIMARY KEY CLUSTERED 
(
	[EID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[GamePlayStats](
	[GPSID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[MGID] [int] NULL,
	[MGType] [int] NULL,
	[Started] [datetime] NULL,
	[Difficulty] [varchar](50) NULL,
	[CompletedPlay] [bit] NULL,
	[Completed] [datetime] NULL,
 CONSTRAINT [PK_GamePlayStats] PRIMARY KEY CLUSTERED 
(
	[GPSID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGChooseAdv](
	[CAID] [int] IDENTITY(1,1) NOT NULL,
	[MGID] [int] NULL,
	[EnableMediumDifficulty] [bit] NULL,
	[EnableHardDifficulty] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGChooseAdv] PRIMARY KEY CLUSTERED 
(
	[CAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGChooseAdvSlides](
	[CASID] [int] IDENTITY(1,1) NOT NULL,
	[CAID] [int] NOT NULL,
	[MGID] [int] NULL,
	[Difficulty] [int] NULL,
	[StepNumber] [int] NULL,
	[SlideText] [text] NULL,
	[FirstImageGoToStep] [int] NULL,
	[SecondImageGoToStep] [int] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGChooseAdvSlides] PRIMARY KEY CLUSTERED 
(
	[CASID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[MGCodeBreaker](
	[CBID] [int] IDENTITY(1,1) NOT NULL,
	[MGID] [int] NULL,
	[EasyString] [varchar](250) NULL,
	[EnableMediumDifficulty] [bit] NULL,
	[EnableHardDifficulty] [bit] NULL,
	[MediumString] [varchar](250) NULL,
	[HardString] [varchar](250) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGCodeBreaker] PRIMARY KEY CLUSTERED 
(
	[CBID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGCodeBreakerKey](
	[CBKID] [int] IDENTITY(1,1) NOT NULL,
	[CBID] [int] NOT NULL,
	[MGID] [int] NULL,
 CONSTRAINT [PK_MGCodeBreakerKey] PRIMARY KEY CLUSTERED 
(
	[CBKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGHiddenPic](
	[HPID] [int] IDENTITY(1,1) NOT NULL,
	[MGID] [int] NULL,
	[EnableMediumDifficulty] [bit] NULL,
	[EnableHardDifficulty] [bit] NULL,
	[EasyDictionary] [text] NULL,
	[MediumDictionary] [text] NULL,
	[HardDictionary] [text] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGHiddenPic] PRIMARY KEY CLUSTERED 
(
	[HPID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[MGHiddenPicBk](
	[HPBID] [int] IDENTITY(1,1) NOT NULL,
	[HPID] [int] NOT NULL,
	[MGID] [int] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGHiddenPicBk] PRIMARY KEY CLUSTERED 
(
	[HPBID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGMatchingGame](
	[MAGID] [int] IDENTITY(1,1) NOT NULL,
	[MGID] [int] NULL,
	[CorrectRoundsToWinCount] [int] NULL,
	[EasyGameSize] [int] NULL,
	[MediumGameSize] [int] NULL,
	[HardGameSize] [int] NULL,
	[EnableMediumDifficulty] [bit] NULL,
	[EnableHardDifficulty] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGMatchingGame] PRIMARY KEY CLUSTERED 
(
	[MAGID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGMatchingGameTiles](
	[MAGTID] [int] IDENTITY(1,1) NOT NULL,
	[MAGID] [int] NOT NULL,
	[MGID] [int] NULL,
	[Tile1UseMedium] [bit] NULL,
	[Tile1UseHard] [bit] NULL,
	[Tile2UseMedium] [bit] NULL,
	[Tile2UseHard] [bit] NULL,
	[Tile3UseMedium] [bit] NULL,
	[Tile3UseHard] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGMatchingGameTiles] PRIMARY KEY CLUSTERED 
(
	[MAGTID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGMixAndMatch](
	[MMID] [int] IDENTITY(1,1) NOT NULL,
	[MGID] [int] NULL,
	[CorrectRoundsToWinCount] [int] NULL,
	[EnableMediumDifficulty] [bit] NULL,
	[EnableHardDifficulty] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGMixAndMatch] PRIMARY KEY CLUSTERED 
(
	[MMID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGMixAndMatchItems](
	[MMIID] [int] IDENTITY(1,1) NOT NULL,
	[MMID] [int] NOT NULL,
	[MGID] [int] NULL,
	[ItemImage] [varchar](150) NULL,
	[EasyLabel] [varchar](150) NULL,
	[MediumLabel] [varchar](150) NULL,
	[HardLabel] [varchar](150) NULL,
	[AudioEasy] [varchar](150) NULL,
	[AudioMedium] [varchar](150) NULL,
	[AudioHard] [varchar](150) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGMixAndMatchItems] PRIMARY KEY CLUSTERED 
(
	[MMIID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGOnlineBook](
	[OBID] [int] IDENTITY(1,1) NOT NULL,
	[MGID] [int] NULL,
	[EnableMediumDifficulty] [bit] NULL,
	[EnableHardDifficulty] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGOnlineBook] PRIMARY KEY CLUSTERED 
(
	[OBID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGOnlineBookPages](
	[OBPGID] [int] IDENTITY(1,1) NOT NULL,
	[OBID] [int] NULL,
	[MGID] [int] NULL,
	[PageNumber] [int] NULL,
	[TextEasy] [text] NULL,
	[TextMedium] [text] NULL,
	[TextHard] [text] NULL,
	[AudioEasy] [varchar](150) NULL,
	[AudioMedium] [varchar](150) NULL,
	[AudioHard] [varchar](150) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGOnlineBookPages] PRIMARY KEY CLUSTERED 
(
	[OBPGID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[MGWordMatch](
	[WMID] [int] IDENTITY(1,1) NOT NULL,
	[MGID] [int] NULL,
	[CorrectRoundsToWinCount] [int] NULL,
	[NumOptionsToChooseFrom] [int] NULL,
	[EnableMediumDifficulty] [bit] NULL,
	[EnableHardDifficulty] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_WGMixAndMatch] PRIMARY KEY CLUSTERED 
(
	[WMID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[MGWordMatchItems](
	[WMIID] [int] IDENTITY(1,1) NOT NULL,
	[WMID] [int] NOT NULL,
	[MGID] [int] NULL,
	[ItemImage] [varchar](150) NULL,
	[EasyLabel] [varchar](150) NULL,
	[MediumLabel] [varchar](150) NULL,
	[HardLabel] [varchar](150) NULL,
	[AudioEasy] [varchar](150) NULL,
	[AudioMedium] [varchar](150) NULL,
	[AudioHard] [varchar](150) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_MGWordMatchItems] PRIMARY KEY CLUSTERED 
(
	[WMIID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[Minigame](
	[MGID] [int] IDENTITY(1,1) NOT NULL,
	[MiniGameType] [int] NULL,
	[MiniGameTypeName] [varchar](50) NULL,
	[AdminName] [varchar](50) NULL,
	[GameName] [varchar](50) NULL,
	[isActive] [bit] NULL,
	[NumberPoints] [int] NULL,
	[AwardedBadgeID] [int] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_Minigame] PRIMARY KEY CLUSTERED 
(
	[MGID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[Notifications](
	[NID] [int] IDENTITY(1,1) NOT NULL,
	[PID_To] [int] NULL,
	[PID_From] [int] NULL,
	[isQuestion] [bit] NULL,
	[Subject] [varchar](150) NULL,
	[Body] [text] NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
 CONSTRAINT [PK_Notifications] PRIMARY KEY CLUSTERED 
(
	[NID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[Offer](
	[OID] [int] IDENTITY(100000,1) NOT NULL,
	[isEnabled] [bit] NULL,
	[AdminName] [varchar](50) NULL,
	[Title] [varchar](150) NULL,
	[ExternalRedirectFlag] [bit] NULL,
	[RedirectURL] [varchar](150) NULL,
	[MaxImpressions] [int] NULL,
	[TotalImpressions] [int] NULL,
	[SerialPrefix] [varchar](50) NULL,
	[ZipCode] [varchar](5) NULL,
	[AgeStart] [int] NULL,
	[AgeEnd] [int] NULL,
	[ProgramId] [int] NULL,
	[BranchId] [int] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_Offer] PRIMARY KEY CLUSTERED 
(
	[OID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[Patron](
	[PID] [int] IDENTITY(100000,1) NOT NULL,
	[IsMasterAccount] [bit] NULL,
	[MasterAcctPID] [int] NULL,
	[Username] [varchar](50) NULL,
	[Password] [varchar](50) NULL,
	[DOB] [datetime] NULL,
	[Age] [int] NULL,
	[SchoolGrade] [varchar](5) NULL,
	[ProgID] [int] NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[Gender] [varchar](1) NULL,
	[EmailAddress] [varchar](150) NULL,
	[PhoneNumber] [varchar](20) NULL,
	[StreetAddress1] [varchar](80) NULL,
	[StreetAddress2] [varchar](80) NULL,
	[City] [varchar](20) NULL,
	[State] [varchar](2) NULL,
	[ZipCode] [varchar](10) NULL,
	[Country] [varchar](50) NULL,
	[County] [varchar](50) NULL,
	[ParentGuardianFirstName] [varchar](50) NULL,
	[ParentGuardianLastName] [varchar](50) NULL,
	[ParentGuardianMiddleName] [varchar](50) NULL,
	[PrimaryLibrary] [int] NULL,
	[LibraryCard] [varchar](20) NULL,
	[SchoolName] [varchar](50) NULL,
	[District] [varchar](50) NULL,
	[Teacher] [varchar](20) NULL,
	[GroupTeamName] [varchar](20) NULL,
	[SchoolType] [int] NULL,
	[LiteracyLevel1] [int] NULL,
	[LiteracyLevel2] [int] NULL,
	[ParentPermFlag] [bit] NULL,
	[Over18Flag] [bit] NULL,
	[ShareFlag] [bit] NULL,
	[TermsOfUseflag] [bit] NULL,
	[Custom1] [varchar](50) NULL,
	[Custom2] [varchar](50) NULL,
	[Custom3] [varchar](50) NULL,
	[Custom4] [varchar](50) NULL,
	[Custom5] [varchar](50) NULL,
	[AvatarID] [int] NULL,
	[RegistrationDate] [datetime] NULL,
 CONSTRAINT [PK_Patron] PRIMARY KEY CLUSTERED 
(
	[PID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[PatronBadges](
	[PBID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[BadgeID] [int] NULL,
	[DateEarned] [datetime] NULL,
 CONSTRAINT [PK_PatronBadges] PRIMARY KEY CLUSTERED 
(
	[PBID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[PatronBookLists](
	[PBLBID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[BLBID] [int] NOT NULL,
	[BLID] [int] NULL,
	[HasReadFlag] [bit] NULL,
	[LastModDate] [datetime] NULL,
 CONSTRAINT [PK_PatronBookLists] PRIMARY KEY CLUSTERED 
(
	[PBLBID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[PatronPoints](
	[PPID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[NumPoints] [int] NULL,
	[AwardDate] [datetime] NULL,
	[AwardReason] [varchar](50) NULL,
	[AwardReasonCd] [int] NULL,
	[BadgeAwardedFlag] [bit] NULL,
	[BadgeID] [int] NULL,
	[PBID] [int] NULL,
	[isReading] [bit] NULL,
	[LogID] [int] NULL,
	[isEvent] [bit] NULL,
	[EventID] [int] NULL,
	[EventCode] [varchar](50) NULL,
	[isBookList] [bit] NULL,
	[BookListID] [int] NULL,
	[isGame] [bit] NULL,
	[isGameLevelActivity] [bit] NULL,
	[GameID] [int] NULL,
	[GameLevel] [int] NULL,
	[GameLevelID] [int] NULL,
	[GameLevelActivityID] [int] NULL,
 CONSTRAINT [PK_PatronPoints] PRIMARY KEY CLUSTERED 
(
	[PPID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[PatronPrizes](
	[PPID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[PrizeSource] [int] NULL,
	[BadgeID] [int] NULL,
	[DrawingID] [int] NULL,
	[PrizeName] [varchar](50) NULL,
	[RedeemedFlag] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_PatronPrizes] PRIMARY KEY CLUSTERED 
(
	[PPID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[PatronReadingLog](
	[PRLID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[ReadingType] [int] NULL,
	[ReadingTypeLabel] [varchar](50) NULL,
	[ReadingAmount] [int] NULL,
	[ReadingPoints] [int] NULL,
	[LoggingDate] [varchar](50) NULL,
	[Author] [varchar](50) NULL,
	[Title] [varchar](150) NULL,
	[HasReview] [bit] NULL,
	[ReviewID] [int] NULL,
 CONSTRAINT [PK_PatronReadingLog] PRIMARY KEY CLUSTERED 
(
	[PRLID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[PatronReview](
	[PRID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[PRLID] [int] NULL,
	[Author] [varchar](50) NULL,
	[Title] [varchar](150) NULL,
	[Review] [text] NULL,
	[isApproved] [bit] NULL,
	[ReviewDate] [datetime] NULL,
	[ApprovalDate] [datetime] NULL,
	[ApprovedBy] [varchar](50) NULL,
 CONSTRAINT [PK_PatronReview] PRIMARY KEY CLUSTERED 
(
	[PRID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[PatronRewardCodes](
	[PRCID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[BadgeID] [int] NULL,
	[ProgID] [int] NULL,
	[RewardCode] [varchar](100) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_PatronRewardCodes] PRIMARY KEY CLUSTERED 
(
	[PRCID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[PrizeDrawing](
	[PDID] [int] IDENTITY(1,1) NOT NULL,
	[PrizeName] [varchar](250) NULL,
	[TID] [int] NULL,
	[DrawingDateTime] [datetime] NULL,
	[NumWinners] [int] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_PrizeDrawing] PRIMARY KEY CLUSTERED 
(
	[PDID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[PrizeDrawingWinners](
	[PDWID] [int] IDENTITY(1,1) NOT NULL,
	[PDID] [int] NULL,
	[PatronID] [int] NULL,
	[NotificationID] [int] NULL,
	[PrizePickedUpFlag] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_PrizeDrawingWinners] PRIMARY KEY CLUSTERED 
(
	[PDWID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[PrizeTemplate](
	[TID] [int] IDENTITY(1,1) NOT NULL,
	[TName] [varchar](150) NULL,
	[NumPrizes] [int] NULL,
	[IncPrevWinnersFlag] [bit] NULL,
	[SendNotificationFlag] [bit] NULL,
	[NotificationSubject] [varchar](250) NULL,
	[NotificationMessage] [text] NULL,
	[ProgID] [int] NULL,
	[Gender] [varchar](1) NULL,
	[SchoolName] [varchar](50) NULL,
	[PrimaryLibrary] [int] NULL,
	[MinPoints] [int] NULL,
	[MaxPoints] [int] NULL,
	[LogDateStart] [datetime] NULL,
	[LogDateEnd] [datetime] NULL,
	[MinReviews] [int] NULL,
	[MaxReviews] [int] NULL,
	[ReviewDateStart] [datetime] NULL,
	[ReviewDateEnd] [datetime] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_PrizeTemplate] PRIMARY KEY CLUSTERED 
(
	[TID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[ProgramCodes](
	[PCID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[CodeNumber] [int] NULL,
	[CodeValue] [uniqueidentifier] NULL,
	[isUsed] [bit] NULL,
	[DateCreated] [datetime] NULL,
	[DateUsed] [datetime] NULL,
	[PatronId] [int] NULL,
 CONSTRAINT [PK_ProgramCodes] PRIMARY KEY CLUSTERED 
(
	[PCID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[ProgramGame](
	[PGID] [int] IDENTITY(1,1) NOT NULL,
	[GameName] [varchar](50) NULL,
	[MapImage] [varchar](50) NULL,
	[BonusMapImage] [varchar](50) NULL,
	[BoardWidth] [int] NULL,
	[BoardHeight] [int] NULL,
	[BonusLevelPointMultiplier] [money] NULL,
	[LevelCompleteImage] [varchar](50) NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
	[LastModDate] [datetime] NULL,
 CONSTRAINT [PK_ProgramGame] PRIMARY KEY CLUSTERED 
(
	[PGID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[ProgramGameLevel](
	[PGLID] [int] IDENTITY(1,1) NOT NULL,
	[PGID] [int] NULL,
	[LevelNumber] [int] NULL,
	[LocationX] [int] NULL,
	[LocationY] [int] NULL,
	[PointNumber] [int] NULL,
	[Minigame1ID] [int] NULL,
	[Minigame2ID] [int] NULL,
	[AwardBadgeID] [int] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_ProgramGameLevel] PRIMARY KEY CLUSTERED 
(
	[PGLID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[ProgramGamePointConversion](
	[PGCID] [int] IDENTITY(1,1) NOT NULL,
	[PGID] [int] NULL,
	[ActivityTypeId] [int] NULL,
	[ActivityCount] [int] NULL,
	[PointCount] [int] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_ProgramGamePointConversion] PRIMARY KEY CLUSTERED 
(
	[PGCID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[Programs](
	[PID] [int] IDENTITY(1,1) NOT NULL,
	[AdminName] [varchar](50) NULL,
	[Title] [varchar](50) NULL,
	[TabName] [varchar](20) NULL,
	[POrder] [int] NULL,
	[IsActive] [bit] NULL,
	[IsHidden] [bit] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[MaxAge] [int] NULL,
	[MaxGrade] [int] NULL,
	[LoggingStart] [datetime] NULL,
	[LoggingEnd] [datetime] NULL,
	[ParentalConsentFlag] [bit] NULL,
	[ParentalConsentText] [text] NULL,
	[PatronReviewFlag] [bit] NULL,
	[LogoutURL] [varchar](150) NULL,
	[ProgramGameID] [int] NULL,
	[HTML1] [text] NULL,
	[HTML2] [text] NULL,
	[HTML3] [text] NULL,
	[HTML4] [text] NULL,
	[HTML5] [text] NULL,
	[HTML6] [text] NULL,
	[BannerImage] [varchar](150) NULL,
	[RegistrationBadgeID] [int] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
	[LastModDate] [datetime] NULL,
 CONSTRAINT [PK_Programs] PRIMARY KEY CLUSTERED 
(
	[PID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[RegistrationSettings](
	[RID] [int] NOT NULL,
	[Literacy1Label] [varchar](50) NULL,
	[Literacy2Label] [varchar](50) NULL,
	[DOB_Prompt] [bit] NULL,
	[Age_Prompt] [bit] NULL,
	[SchoolGrade_Prompt] [bit] NULL,
	[FirstName_Prompt] [bit] NULL,
	[MiddleName_Prompt] [bit] NULL,
	[LastName_Prompt] [bit] NULL,
	[Gender_Prompt] [bit] NULL,
	[EmailAddress_Prompt] [bit] NULL,
	[PhoneNumber_Prompt] [bit] NULL,
	[StreetAddress1_Prompt] [bit] NULL,
	[StreetAddress2_Prompt] [bit] NULL,
	[City_Prompt] [bit] NULL,
	[State_Prompt] [bit] NULL,
	[ZipCode_Prompt] [bit] NULL,
	[Country_Prompt] [bit] NULL,
	[County_Prompt] [bit] NULL,
	[ParentGuardianFirstName_Prompt] [bit] NULL,
	[ParentGuardianLastName_Prompt] [bit] NULL,
	[ParentGuardianMiddleName_Prompt] [bit] NULL,
	[PrimaryLibrary_Prompt] [bit] NULL,
	[LibraryCard_Prompt] [bit] NULL,
	[SchoolName_Prompt] [bit] NULL,
	[District_Prompt] [bit] NULL,
	[Teacher_Prompt] [bit] NULL,
	[GroupTeamName_Prompt] [bit] NULL,
	[SchoolType_Prompt] [bit] NULL,
	[LiteracyLevel1_Prompt] [bit] NULL,
	[LiteracyLevel2_Prompt] [bit] NULL,
	[ParentPermFlag_Prompt] [bit] NULL,
	[Over18Flag_Prompt] [bit] NULL,
	[ShareFlag_Prompt] [bit] NULL,
	[TermsOfUseflag_Prompt] [bit] NULL,
	[Custom1_Prompt] [bit] NULL,
	[Custom2_Prompt] [bit] NULL,
	[Custom3_Prompt] [bit] NULL,
	[Custom4_Prompt] [bit] NULL,
	[Custom5_Prompt] [bit] NULL,
	[DOB_Req] [bit] NULL,
	[Age_Req] [bit] NULL,
	[SchoolGrade_Req] [bit] NULL,
	[FirstName_Req] [bit] NULL,
	[MiddleName_Req] [bit] NULL,
	[LastName_Req] [bit] NULL,
	[Gender_Req] [bit] NULL,
	[EmailAddress_Req] [bit] NULL,
	[PhoneNumber_Req] [bit] NULL,
	[StreetAddress1_Req] [bit] NULL,
	[StreetAddress2_Req] [bit] NULL,
	[City_Req] [bit] NULL,
	[State_Req] [bit] NULL,
	[ZipCode_Req] [bit] NULL,
	[Country_Req] [bit] NULL,
	[County_Req] [bit] NULL,
	[ParentGuardianFirstName_Req] [bit] NULL,
	[ParentGuardianLastName_Req] [bit] NULL,
	[ParentGuardianMiddleName_Req] [bit] NULL,
	[PrimaryLibrary_Req] [bit] NULL,
	[LibraryCard_Req] [bit] NULL,
	[SchoolName_Req] [bit] NULL,
	[District_Req] [bit] NULL,
	[Teacher_Req] [bit] NULL,
	[GroupTeamName_Req] [bit] NULL,
	[SchoolType_Req] [bit] NULL,
	[LiteracyLevel1_Req] [bit] NULL,
	[LiteracyLevel2_Req] [bit] NULL,
	[ParentPermFlag_Req] [bit] NULL,
	[Over18Flag_Req] [bit] NULL,
	[ShareFlag_Req] [bit] NULL,
	[TermsOfUseflag_Req] [bit] NULL,
	[Custom1_Req] [bit] NULL,
	[Custom2_Req] [bit] NULL,
	[Custom3_Req] [bit] NULL,
	[Custom4_Req] [bit] NULL,
	[Custom5_Req] [bit] NULL,
	[DOB_Show] [bit] NULL,
	[Age_Show] [bit] NULL,
	[SchoolGrade_Show] [bit] NULL,
	[FirstName_Show] [bit] NULL,
	[MiddleName_Show] [bit] NULL,
	[LastName_Show] [bit] NULL,
	[Gender_Show] [bit] NULL,
	[EmailAddress_Show] [bit] NULL,
	[PhoneNumber_Show] [bit] NULL,
	[StreetAddress1_Show] [bit] NULL,
	[StreetAddress2_Show] [bit] NULL,
	[City_Show] [bit] NULL,
	[State_Show] [bit] NULL,
	[ZipCode_Show] [bit] NULL,
	[Country_Show] [bit] NULL,
	[County_Show] [bit] NULL,
	[ParentGuardianFirstName_Show] [bit] NULL,
	[ParentGuardianLastName_Show] [bit] NULL,
	[ParentGuardianMiddleName_Show] [bit] NULL,
	[PrimaryLibrary_Show] [bit] NULL,
	[LibraryCard_Show] [bit] NULL,
	[SchoolName_Show] [bit] NULL,
	[District_Show] [bit] NULL,
	[Teacher_Show] [bit] NULL,
	[GroupTeamName_Show] [bit] NULL,
	[SchoolType_Show] [bit] NULL,
	[LiteracyLevel1_Show] [bit] NULL,
	[LiteracyLevel2_Show] [bit] NULL,
	[ParentPermFlag_Show] [bit] NULL,
	[Over18Flag_Show] [bit] NULL,
	[ShareFlag_Show] [bit] NULL,
	[TermsOfUseflag_Show] [bit] NULL,
	[Custom1_Show] [bit] NULL,
	[Custom2_Show] [bit] NULL,
	[Custom3_Show] [bit] NULL,
	[Custom4_Show] [bit] NULL,
	[Custom5_Show] [bit] NULL,
	[DOB_Edit] [bit] NULL,
	[Age_Edit] [bit] NULL,
	[SchoolGrade_Edit] [bit] NULL,
	[FirstName_Edit] [bit] NULL,
	[MiddleName_Edit] [bit] NULL,
	[LastName_Edit] [bit] NULL,
	[Gender_Edit] [bit] NULL,
	[EmailAddress_Edit] [bit] NULL,
	[PhoneNumber_Edit] [bit] NULL,
	[StreetAddress1_Edit] [bit] NULL,
	[StreetAddress2_Edit] [bit] NULL,
	[City_Edit] [bit] NULL,
	[State_Edit] [bit] NULL,
	[ZipCode_Edit] [bit] NULL,
	[Country_Edit] [bit] NULL,
	[County_Edit] [bit] NULL,
	[ParentGuardianFirstName_Edit] [bit] NULL,
	[ParentGuardianLastName_Edit] [bit] NULL,
	[ParentGuardianMiddleName_Edit] [bit] NULL,
	[PrimaryLibrary_Edit] [bit] NULL,
	[LibraryCard_Edit] [bit] NULL,
	[SchoolName_Edit] [bit] NULL,
	[District_Edit] [bit] NULL,
	[Teacher_Edit] [bit] NULL,
	[GroupTeamName_Edit] [bit] NULL,
	[SchoolType_Edit] [bit] NULL,
	[LiteracyLevel1_Edit] [bit] NULL,
	[LiteracyLevel2_Edit] [bit] NULL,
	[ParentPermFlag_Edit] [bit] NULL,
	[Over18Flag_Edit] [bit] NULL,
	[ShareFlag_Edit] [bit] NULL,
	[TermsOfUseflag_Edit] [bit] NULL,
	[Custom1_Edit] [bit] NULL,
	[Custom2_Edit] [bit] NULL,
	[Custom3_Edit] [bit] NULL,
	[Custom4_Edit] [bit] NULL,
	[Custom5_Edit] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_RegistrationSettings] PRIMARY KEY CLUSTERED 
(
	[RID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[ReportTemplate](
	[RTID] [int] IDENTITY(1,1) NOT NULL,
	[ProgId] [int] NULL,
	[ReportName] [varchar](150) NULL,
	[DisplayFilters] [bit] NULL,
	[DOBFrom] [datetime] NULL,
	[DOBTo] [datetime] NULL,
	[AgeFrom] [int] NULL,
	[AgeTo] [int] NULL,
	[SchoolGrade] [varchar](5) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[Gender] [varchar](1) NULL,
	[EmailAddress] [varchar](150) NULL,
	[PhoneNumber] [varchar](20) NULL,
	[City] [varchar](20) NULL,
	[State] [varchar](2) NULL,
	[ZipCode] [varchar](10) NULL,
	[County] [varchar](50) NULL,
	[PrimaryLibrary] [int] NULL,
	[SchoolName] [varchar](50) NULL,
	[District] [varchar](50) NULL,
	[Teacher] [varchar](20) NULL,
	[GroupTeamName] [varchar](20) NULL,
	[SchoolType] [int] NULL,
	[LiteracyLevel1] [int] NULL,
	[LiteracyLevel2] [int] NULL,
	[Custom1] [varchar](50) NULL,
	[Custom2] [varchar](50) NULL,
	[Custom3] [varchar](50) NULL,
	[Custom4] [varchar](50) NULL,
	[Custom5] [varchar](50) NULL,
	[RegistrationDateStart] [datetime] NULL,
	[RegistrationDateEnd] [datetime] NULL,
	[PointsMin] [int] NULL,
	[PointsMax] [int] NULL,
	[PointsStart] [datetime] NULL,
	[PointsEnd] [datetime] NULL,
	[EventCode] [varchar](50) NULL,
	[EarnedBadge] [int] NULL,
	[PhysicalPrizeEarned] [varchar](50) NULL,
	[PhysicalPrizeRedeemed] [bit] NULL,
	[PhysicalPrizeStartDate] [datetime] NULL,
	[PhysicalPrizeEndDate] [datetime] NULL,
	[ReviewsMin] [int] NULL,
	[ReviewsMax] [int] NULL,
	[ReviewTitle] [varchar](150) NULL,
	[ReviewAuthor] [varchar](100) NULL,
	[ReviewStartDate] [datetime] NULL,
	[ReviewEndDate] [datetime] NULL,
	[RandomDrawingName] [varchar](50) NULL,
	[RandomDrawingNum] [int] NULL,
	[RandomDrawingStartDate] [datetime] NULL,
	[RandomDrawingEndDate] [datetime] NULL,
	[HasBeenDrawn] [bit] NULL,
	[HasRedeemend] [bit] NULL,
	[PIDInc] [bit] NULL,
	[UsernameInc] [bit] NULL,
	[DOBInc] [bit] NULL,
	[AgeInc] [bit] NULL,
	[SchoolGradeInc] [bit] NULL,
	[FirstNameInc] [bit] NULL,
	[LastNameInc] [bit] NULL,
	[GenderInc] [bit] NULL,
	[EmailAddressInc] [bit] NULL,
	[PhoneNumberInc] [bit] NULL,
	[CityInc] [bit] NULL,
	[StateInc] [bit] NULL,
	[ZipCodeInc] [bit] NULL,
	[CountyInc] [bit] NULL,
	[PrimaryLibraryInc] [bit] NULL,
	[SchoolNameInc] [bit] NULL,
	[DistrictInc] [bit] NULL,
	[TeacherInc] [bit] NULL,
	[GroupTeamNameInc] [bit] NULL,
	[SchoolTypeInc] [bit] NULL,
	[LiteracyLevel1Inc] [bit] NULL,
	[LiteracyLevel2Inc] [bit] NULL,
	[Custom1Inc] [bit] NULL,
	[Custom2Inc] [bit] NULL,
	[Custom3Inc] [bit] NULL,
	[Custom4Inc] [bit] NULL,
	[Custom5Inc] [bit] NULL,
	[RegistrationDateInc] [bit] NULL,
	[PointsInc] [bit] NULL,
	[EarnedBadgeInc] [bit] NULL,
	[PhysicalPrizeNameInc] [bit] NOT NULL,
	[PhysicalPrizeDateInc] [bit] NULL,
	[NumReviewsInc] [bit] NULL,
	[ReviewAuthorInc] [bit] NULL,
	[ReviewTitleInc] [bit] NULL,
	[ReviewDateInc] [bit] NULL,
	[RandomDrawingNameInc] [bit] NULL,
	[RandomDrawingNumInc] [bit] NULL,
	[RandomDrawingDateInc] [bit] NULL,
	[HasBeenDrawnInc] [bit] NULL,
	[HasRedeemendInc] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_ReportTemplate] PRIMARY KEY CLUSTERED 
(
	[RTID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[SentEmailLog](
	[EID] [int] IDENTITY(1,1) NOT NULL,
	[SentDateTime] [datetime] NULL,
	[SentFrom] [varchar](150) NULL,
	[SentTo] [varchar](150) NULL,
	[Subject] [varchar](150) NULL,
	[Body] [text] NULL,
 CONSTRAINT [PK_SentEmailLog] PRIMARY KEY CLUSTERED 
(
	[EID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[SRPGroupPermissions](
	[GID] [int] NOT NULL,
	[PermissionID] [int] NOT NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_GroupPermissions] PRIMARY KEY CLUSTERED 
(
	[GID] ASC,
	[PermissionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[SRPGroups](
	[GID] [int] IDENTITY(1000,1) NOT NULL,
	[GroupName] [varchar](50) NULL,
	[GroupDescription] [varchar](255) NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_SRPGroups] PRIMARY KEY CLUSTERED 
(
	[GID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[SRPPermissionsMaster](
	[PermissionID] [int] NOT NULL,
	[PermissionName] [varchar](50) NULL,
	[PermissionDesc] [varchar](2000) NULL,
	[MODID] [int] NULL,
 CONSTRAINT [PK_SRPPermissionsMaster] PRIMARY KEY CLUSTERED 
(
	[PermissionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[SRPReport](
	[RID] [int] IDENTITY(1,1) NOT NULL,
	[RTID] [int] NOT NULL,
	[ProgId] [int] NULL,
	[ReportName] [varchar](150) NULL,
	[DisplayFilters] [bit] NULL,
	[ReportFormat] [int] NULL,
	[DOBFrom] [datetime] NULL,
	[DOBTo] [datetime] NULL,
	[AgeFrom] [int] NULL,
	[AgeTo] [int] NULL,
	[SchoolGrade] [varchar](5) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[Gender] [varchar](1) NULL,
	[EmailAddress] [varchar](150) NULL,
	[PhoneNumber] [varchar](20) NULL,
	[City] [varchar](20) NULL,
	[State] [varchar](2) NULL,
	[ZipCode] [varchar](10) NULL,
	[County] [varchar](50) NULL,
	[PrimaryLibrary] [int] NULL,
	[SchoolName] [varchar](50) NULL,
	[District] [varchar](50) NULL,
	[Teacher] [varchar](20) NULL,
	[GroupTeamName] [varchar](20) NULL,
	[SchoolType] [int] NULL,
	[LiteracyLevel1] [int] NULL,
	[LiteracyLevel2] [int] NULL,
	[Custom1] [varchar](50) NULL,
	[Custom2] [varchar](50) NULL,
	[Custom3] [varchar](50) NULL,
	[Custom4] [varchar](50) NULL,
	[Custom5] [varchar](50) NULL,
	[RegistrationDateStart] [datetime] NULL,
	[RegistrationDateEnd] [datetime] NULL,
	[PointsMin] [int] NULL,
	[PointsMax] [int] NULL,
	[PointsStart] [datetime] NULL,
	[PointsEnd] [datetime] NULL,
	[EventCode] [varchar](50) NULL,
	[EarnedBadge] [int] NULL,
	[PhysicalPrizeEarned] [varchar](50) NULL,
	[PhysicalPrizeRedeemed] [bit] NULL,
	[PhysicalPrizeStartDate] [datetime] NULL,
	[PhysicalPrizeEndDate] [datetime] NULL,
	[ReviewsMin] [int] NULL,
	[ReviewsMax] [int] NULL,
	[ReviewTitle] [varchar](150) NULL,
	[ReviewAuthor] [varchar](100) NULL,
	[ReviewStartDate] [datetime] NULL,
	[ReviewEndDate] [datetime] NULL,
	[RandomDrawingName] [varchar](50) NULL,
	[RandomDrawingNum] [int] NULL,
	[RandomDrawingStartDate] [datetime] NULL,
	[RandomDrawingEndDate] [datetime] NULL,
	[HasBeenDrawn] [bit] NULL,
	[HasRedeemend] [bit] NULL,
	[PIDInc] [bit] NULL,
	[UsernameInc] [bit] NULL,
	[DOBInc] [bit] NULL,
	[AgeInc] [bit] NULL,
	[SchoolGradeInc] [bit] NULL,
	[FirstNameInc] [bit] NULL,
	[LastNameInc] [bit] NULL,
	[GenderInc] [bit] NULL,
	[EmailAddressInc] [bit] NULL,
	[PhoneNumberInc] [bit] NULL,
	[CityInc] [bit] NULL,
	[StateInc] [bit] NULL,
	[ZipCodeInc] [bit] NULL,
	[CountyInc] [bit] NULL,
	[PrimaryLibraryInc] [bit] NULL,
	[SchoolNameInc] [bit] NULL,
	[DistrictInc] [bit] NULL,
	[TeacherInc] [bit] NULL,
	[GroupTeamNameInc] [bit] NULL,
	[SchoolTypeInc] [bit] NULL,
	[LiteracyLevel1Inc] [bit] NULL,
	[LiteracyLevel2Inc] [bit] NULL,
	[Custom1Inc] [bit] NULL,
	[Custom2Inc] [bit] NULL,
	[Custom3Inc] [bit] NULL,
	[Custom4Inc] [bit] NULL,
	[Custom5Inc] [bit] NULL,
	[RegistrationDateInc] [bit] NULL,
	[PointsInc] [bit] NULL,
	[EarnedBadgeInc] [bit] NULL,
	[PhysicalPrizeNameInc] [bit] NOT NULL,
	[PhysicalPrizeDateInc] [bit] NULL,
	[NumReviewsInc] [bit] NULL,
	[ReviewAuthorInc] [bit] NULL,
	[ReviewTitleInc] [bit] NULL,
	[ReviewDateInc] [bit] NULL,
	[RandomDrawingNameInc] [bit] NULL,
	[RandomDrawingNumInc] [bit] NULL,
	[RandomDrawingDateInc] [bit] NULL,
	[HasBeenDrawnInc] [bit] NULL,
	[HasRedeemendInc] [bit] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_SRPReport] PRIMARY KEY CLUSTERED 
(
	[RID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[SRPSettings](
	[SID] [int] IDENTITY(1000,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[Value] [text] NULL,
	[StorageType] [varchar](50) NULL,
	[EditType] [varchar](50) NULL,
	[ModID] [int] NULL,
	[Label] [varchar](50) NULL,
	[Description] [varchar](500) NULL,
	[ValueList] [varchar](5000) NULL,
	[DefaultValue] [text] NULL,
 CONSTRAINT [PK_SRPSettings] PRIMARY KEY CLUSTERED 
(
	[SID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
CREATE TABLE [dbo].[SRPUser](
	[UID] [int] IDENTITY(1000,1) NOT NULL,
	[Username] [varchar](50) NULL,
	[Password] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[EmailAddress] [varchar](128) NULL,
	[Division] [varchar](50) NULL,
	[Department] [varchar](50) NULL,
	[Title] [varchar](50) NULL,
	[IsActive] [bit] NULL,
	[MustResetPassword] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[LastPasswordReset] [datetime] NULL,
	[DeletedDate] [datetime] NULL,
	[LastModDate] [datetime] NULL,
	[LastModUser] [varchar](50) NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_SRPUser] PRIMARY KEY CLUSTERED 
(
	[UID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[SRPUserGroups](
	[UID] [int] NOT NULL,
	[GID] [int] NOT NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_SRPUserGroups] PRIMARY KEY CLUSTERED 
(
	[UID] ASC,
	[GID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[SRPUserLoginHistory](
	[UIDLH] [int] IDENTITY(1000,1) NOT NULL,
	[UID] [nchar](10) NULL,
	[SessionsID] [varchar](128) NULL,
	[StartDateTime] [datetime] NULL,
	[IP] [varchar](50) NULL,
	[MachineName] [varchar](50) NULL,
	[Browser] [varchar](50) NULL,
	[EndDateTime] [datetime] NULL,
 CONSTRAINT [PK_SRPUserLoginHistory] PRIMARY KEY CLUSTERED 
(
	[UIDLH] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
CREATE TABLE [dbo].[SRPUserPermissions](
	[UID] [int] NOT NULL,
	[PermissionID] [int] NOT NULL,
	[AddedDate] [datetime] NULL,
	[AddedUser] [varchar](50) NULL,
 CONSTRAINT [PK_SRPUserPermissions] PRIMARY KEY CLUSTERED 
(
	[UID] ASC,
	[PermissionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[Avatar] ADD  CONSTRAINT [DF_Avatar_LastModDate]  DEFAULT (getdate()) FOR [LastModDate];
ALTER TABLE [dbo].[Avatar] ADD  CONSTRAINT [DF_Avatar_LastModUser]  DEFAULT ('N/A') FOR [LastModUser];
ALTER TABLE [dbo].[Avatar] ADD  CONSTRAINT [DF_Avatar_AddedDate]  DEFAULT (getdate()) FOR [AddedDate];
ALTER TABLE [dbo].[Avatar] ADD  CONSTRAINT [DF_Avatar_AddedUser]  DEFAULT ('N/A') FOR [AddedUser];
ALTER TABLE [dbo].[Badge] ADD  CONSTRAINT [DF_Badge_AssignProgramPrizeCode]  DEFAULT ((0)) FOR [AssignProgramPrizeCode];
ALTER TABLE [dbo].[Badge] ADD  CONSTRAINT [DF_Badge_LastModDate]  DEFAULT (getdate()) FOR [LastModDate];
ALTER TABLE [dbo].[Badge] ADD  CONSTRAINT [DF_Badge_LastModUser]  DEFAULT ('N/A') FOR [LastModUser];
ALTER TABLE [dbo].[Badge] ADD  CONSTRAINT [DF_Badge_AddedDate]  DEFAULT (getdate()) FOR [AddedDate];
ALTER TABLE [dbo].[Badge] ADD  CONSTRAINT [DF_Badge_AddedUser]  DEFAULT ('N/A') FOR [AddedUser];
ALTER TABLE [dbo].[BookList] ADD  CONSTRAINT [DF_BookList_LastModDate]  DEFAULT (getdate()) FOR [LastModDate];
ALTER TABLE [dbo].[BookList] ADD  CONSTRAINT [DF_BookList_LastModUser]  DEFAULT ('N/A') FOR [LastModUser];
ALTER TABLE [dbo].[BookList] ADD  CONSTRAINT [DF_BookList_AddedDate]  DEFAULT (getdate()) FOR [AddedDate];
ALTER TABLE [dbo].[BookList] ADD  CONSTRAINT [DF_BookList_AddedUser]  DEFAULT ('N/A') FOR [AddedUser];
ALTER TABLE [dbo].[BookListBooks]  WITH CHECK ADD  CONSTRAINT [FK_BookListBooks_BookList] FOREIGN KEY([BLID])
REFERENCES [dbo].[BookList] ([BLID]);
ALTER TABLE [dbo].[BookListBooks] CHECK CONSTRAINT [FK_BookListBooks_BookList];
ALTER TABLE [dbo].[BookListBooks] ADD  CONSTRAINT [DF_BookListBooks_LastModDate]  DEFAULT (getdate()) FOR [LastModDate];
ALTER TABLE [dbo].[BookListBooks] ADD  CONSTRAINT [DF_BookListBooks_LastModUser]  DEFAULT ('N/A') FOR [LastModUser];
ALTER TABLE [dbo].[BookListBooks] ADD  CONSTRAINT [DF_BookListBooks_AddedDate]  DEFAULT (getdate()) FOR [AddedDate];
ALTER TABLE [dbo].[BookListBooks] ADD  CONSTRAINT [DF_BookListBooks_AddedUser]  DEFAULT ('N/A') FOR [AddedUser];
ALTER TABLE [dbo].[Code]  WITH CHECK ADD  CONSTRAINT [FK_Code_CodeType] FOREIGN KEY([CTID])
REFERENCES [dbo].[CodeType] ([CTID]);
ALTER TABLE [dbo].[Code] CHECK CONSTRAINT [FK_Code_CodeType];
ALTER TABLE [dbo].[CodeType] ADD  CONSTRAINT [DF_CodeType_isSystem]  DEFAULT ((0)) FOR [isSystem];
ALTER TABLE [dbo].[CustomEventFields] ADD  CONSTRAINT [DF_CustomEventFields_Use1]  DEFAULT ((0)) FOR [Use1]
;
ALTER TABLE [dbo].[CustomEventFields] ADD  CONSTRAINT [DF_CustomEventFields_Use2]  DEFAULT ((0)) FOR [Use2]
;
ALTER TABLE [dbo].[CustomEventFields] ADD  CONSTRAINT [DF_CustomEventFields_Use3]  DEFAULT ((0)) FOR [Use3]
;
ALTER TABLE [dbo].[CustomEventFields] ADD  CONSTRAINT [DF_CustomEventFields_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[CustomEventFields] ADD  CONSTRAINT [DF_CustomEventFields_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[CustomEventFields] ADD  CONSTRAINT [DF_CustomEventFields_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[CustomEventFields] ADD  CONSTRAINT [DF_CustomEventFields_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[CustomRegistrationFields] ADD  CONSTRAINT [DF_CustomRegistrationFields_Use1]  DEFAULT ((0)) FOR [Use1]
;
ALTER TABLE [dbo].[CustomRegistrationFields] ADD  CONSTRAINT [DF_CustomRegistrationFields_Use2]  DEFAULT ((0)) FOR [Use2]
;
ALTER TABLE [dbo].[CustomRegistrationFields] ADD  CONSTRAINT [DF_CustomRegistrationFields_Use3]  DEFAULT ((0)) FOR [Use3]
;
ALTER TABLE [dbo].[CustomRegistrationFields] ADD  CONSTRAINT [DF_CustomRegistrationFields_Use4]  DEFAULT ((0)) FOR [Use4]
;
ALTER TABLE [dbo].[CustomRegistrationFields] ADD  CONSTRAINT [DF_CustomRegistrationFields_Use5]  DEFAULT ((0)) FOR [Use5]
;
ALTER TABLE [dbo].[CustomRegistrationFields] ADD  CONSTRAINT [DF_CustomRegistrationFields_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[CustomRegistrationFields] ADD  CONSTRAINT [DF_CustomRegistrationFields_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[CustomRegistrationFields] ADD  CONSTRAINT [DF_CustomRegistrationFields_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[CustomRegistrationFields] ADD  CONSTRAINT [DF_CustomRegistrationFields_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[Event] ADD  CONSTRAINT [DF_Event_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[Event] ADD  CONSTRAINT [DF_Event_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[Event] ADD  CONSTRAINT [DF_Event_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[Event] ADD  CONSTRAINT [DF_Event_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[GamePlayStats] ADD  CONSTRAINT [DF_GamePlayStats_Started]  DEFAULT (getdate()) FOR [Started]
;
ALTER TABLE [dbo].[GamePlayStats] ADD  CONSTRAINT [DF_GamePlayStats_CompletedPlay]  DEFAULT ((0)) FOR [CompletedPlay]
;
ALTER TABLE [dbo].[MGChooseAdv]  WITH CHECK ADD  CONSTRAINT [FK_MGChooseAdv_Minigame] FOREIGN KEY([MGID])
REFERENCES [dbo].[Minigame] ([MGID])
;
ALTER TABLE [dbo].[MGChooseAdv] CHECK CONSTRAINT [FK_MGChooseAdv_Minigame]
;
ALTER TABLE [dbo].[MGChooseAdv] ADD  CONSTRAINT [DF_MGChooseAdv_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGChooseAdv] ADD  CONSTRAINT [DF_MGChooseAdv_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGChooseAdv] ADD  CONSTRAINT [DF_MGChooseAdv_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGChooseAdv] ADD  CONSTRAINT [DF_MGChooseAdv_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGChooseAdvSlides]  WITH CHECK ADD  CONSTRAINT [FK_MGChooseAdvSlides_MGChooseAdv] FOREIGN KEY([CAID])
REFERENCES [dbo].[MGChooseAdv] ([CAID])
;
ALTER TABLE [dbo].[MGChooseAdvSlides] CHECK CONSTRAINT [FK_MGChooseAdvSlides_MGChooseAdv]
;
ALTER TABLE [dbo].[MGChooseAdvSlides] ADD  CONSTRAINT [DF_MGChooseAdvSlides_Difficulty]  DEFAULT ((1)) FOR [Difficulty]
;
ALTER TABLE [dbo].[MGChooseAdvSlides] ADD  CONSTRAINT [DF_MGChooseAdvSlides_StepNumber]  DEFAULT ((-1)) FOR [StepNumber]
;
ALTER TABLE [dbo].[MGChooseAdvSlides] ADD  CONSTRAINT [DF_MGChooseAdvSlides_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGChooseAdvSlides] ADD  CONSTRAINT [DF_MGChooseAdvSlides_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGChooseAdvSlides] ADD  CONSTRAINT [DF_MGChooseAdvSlides_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGChooseAdvSlides] ADD  CONSTRAINT [DF_MGChooseAdvSlides_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGCodeBreaker]  WITH CHECK ADD  CONSTRAINT [FK_MGCodeBreaker_Minigame] FOREIGN KEY([MGID])
REFERENCES [dbo].[Minigame] ([MGID])
;
ALTER TABLE [dbo].[MGCodeBreaker] CHECK CONSTRAINT [FK_MGCodeBreaker_Minigame]
;
ALTER TABLE [dbo].[MGCodeBreaker] ADD  CONSTRAINT [DF_MGCodeBreaker_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGCodeBreaker] ADD  CONSTRAINT [DF_MGCodeBreaker_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGCodeBreaker] ADD  CONSTRAINT [DF_MGCodeBreaker_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGCodeBreaker] ADD  CONSTRAINT [DF_MGCodeBreaker_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGCodeBreakerKey]  WITH CHECK ADD  CONSTRAINT [FK_MGCodeBreakerKey_MGCodeBreaker] FOREIGN KEY([CBID])
REFERENCES [dbo].[MGCodeBreaker] ([CBID])
;
ALTER TABLE [dbo].[MGCodeBreakerKey] CHECK CONSTRAINT [FK_MGCodeBreakerKey_MGCodeBreaker]
;
ALTER TABLE [dbo].[MGHiddenPic]  WITH CHECK ADD  CONSTRAINT [FK_MGHiddenPic_Minigame] FOREIGN KEY([MGID])
REFERENCES [dbo].[Minigame] ([MGID])
;
ALTER TABLE [dbo].[MGHiddenPic] CHECK CONSTRAINT [FK_MGHiddenPic_Minigame]
;
ALTER TABLE [dbo].[MGHiddenPic] ADD  CONSTRAINT [DF_MGHiddenPic_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGHiddenPic] ADD  CONSTRAINT [DF_MGHiddenPic_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGHiddenPic] ADD  CONSTRAINT [DF_MGHiddenPic_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGHiddenPic] ADD  CONSTRAINT [DF_MGHiddenPic_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGHiddenPicBk]  WITH CHECK ADD  CONSTRAINT [FK_MGHiddenPicBk_MGHiddenPic1] FOREIGN KEY([HPID])
REFERENCES [dbo].[MGHiddenPic] ([HPID])
;
ALTER TABLE [dbo].[MGHiddenPicBk] CHECK CONSTRAINT [FK_MGHiddenPicBk_MGHiddenPic1]
;
ALTER TABLE [dbo].[MGHiddenPicBk] ADD  CONSTRAINT [DF_MGHiddenPicBk_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGHiddenPicBk] ADD  CONSTRAINT [DF_MGHiddenPicBk_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGHiddenPicBk] ADD  CONSTRAINT [DF_MGHiddenPicBk_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGHiddenPicBk] ADD  CONSTRAINT [DF_MGHiddenPicBk_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGMatchingGame]  WITH CHECK ADD  CONSTRAINT [FK_MGMatchingGame_Minigame] FOREIGN KEY([MGID])
REFERENCES [dbo].[Minigame] ([MGID])
;
ALTER TABLE [dbo].[MGMatchingGame] CHECK CONSTRAINT [FK_MGMatchingGame_Minigame]
;
ALTER TABLE [dbo].[MGMatchingGame] ADD  CONSTRAINT [DF_MGMatchingGame_EasyGameSize]  DEFAULT ((2)) FOR [EasyGameSize]
;
ALTER TABLE [dbo].[MGMatchingGame] ADD  CONSTRAINT [DF_MGMatchingGame_MediumGameSize]  DEFAULT ((4)) FOR [MediumGameSize]
;
ALTER TABLE [dbo].[MGMatchingGame] ADD  CONSTRAINT [DF_MGMatchingGame_HardGameSize]  DEFAULT ((6)) FOR [HardGameSize]
;
ALTER TABLE [dbo].[MGMatchingGame] ADD  CONSTRAINT [DF_MGMatchingGame_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGMatchingGame] ADD  CONSTRAINT [DF_MGMatchingGame_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGMatchingGame] ADD  CONSTRAINT [DF_MGMatchingGame_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGMatchingGame] ADD  CONSTRAINT [DF_MGMatchingGame_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGMatchingGameTiles]  WITH CHECK ADD  CONSTRAINT [FK_MGMatchingGameTiles_MGMatchingGame] FOREIGN KEY([MAGID])
REFERENCES [dbo].[MGMatchingGame] ([MAGID])
;
ALTER TABLE [dbo].[MGMatchingGameTiles] CHECK CONSTRAINT [FK_MGMatchingGameTiles_MGMatchingGame]
;
ALTER TABLE [dbo].[MGMatchingGameTiles] ADD  CONSTRAINT [DF_MGMatchingGameTiles_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGMatchingGameTiles] ADD  CONSTRAINT [DF_MGMatchingGameTiles_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGMatchingGameTiles] ADD  CONSTRAINT [DF_MGMatchingGameTiles_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGMatchingGameTiles] ADD  CONSTRAINT [DF_MGMatchingGameTiles_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGMixAndMatch]  WITH CHECK ADD  CONSTRAINT [FK_MGMixAndMatch_Minigame] FOREIGN KEY([MGID])
REFERENCES [dbo].[Minigame] ([MGID])
;
ALTER TABLE [dbo].[MGMixAndMatch] CHECK CONSTRAINT [FK_MGMixAndMatch_Minigame]
;
ALTER TABLE [dbo].[MGMixAndMatch] ADD  CONSTRAINT [DF_MGMixAndMatch_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGMixAndMatch] ADD  CONSTRAINT [DF_MGMixAndMatch_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGMixAndMatch] ADD  CONSTRAINT [DF_MGMixAndMatch_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGMixAndMatch] ADD  CONSTRAINT [DF_MGMixAndMatch_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGMixAndMatchItems]  WITH CHECK ADD  CONSTRAINT [FK_MGMixAndMatchItems_MGMixAndMatch] FOREIGN KEY([MMID])
REFERENCES [dbo].[MGMixAndMatch] ([MMID])
;
ALTER TABLE [dbo].[MGMixAndMatchItems] CHECK CONSTRAINT [FK_MGMixAndMatchItems_MGMixAndMatch]
;
ALTER TABLE [dbo].[MGMixAndMatchItems] ADD  CONSTRAINT [DF_MGMixAndMatchItems_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGMixAndMatchItems] ADD  CONSTRAINT [DF_MGMixAndMatchItems_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGMixAndMatchItems] ADD  CONSTRAINT [DF_MGMixAndMatchItems_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGMixAndMatchItems] ADD  CONSTRAINT [DF_MGMixAndMatchItems_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGOnlineBook]  WITH CHECK ADD  CONSTRAINT [FK_MGOnlineBook_Minigame] FOREIGN KEY([MGID])
REFERENCES [dbo].[Minigame] ([MGID])
;
ALTER TABLE [dbo].[MGOnlineBook] CHECK CONSTRAINT [FK_MGOnlineBook_Minigame]
;
ALTER TABLE [dbo].[MGOnlineBook] ADD  CONSTRAINT [DF_MGOnlineBook_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGOnlineBook] ADD  CONSTRAINT [DF_MGOnlineBook_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGOnlineBook] ADD  CONSTRAINT [DF_MGOnlineBook_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGOnlineBook] ADD  CONSTRAINT [DF_MGOnlineBook_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGOnlineBookPages]  WITH CHECK ADD  CONSTRAINT [FK_MGOnlineBookPages_MGOnlineBook] FOREIGN KEY([OBID])
REFERENCES [dbo].[MGOnlineBook] ([OBID])
;
ALTER TABLE [dbo].[MGOnlineBookPages] CHECK CONSTRAINT [FK_MGOnlineBookPages_MGOnlineBook]
;
ALTER TABLE [dbo].[MGOnlineBookPages] ADD  CONSTRAINT [DF_MGOnlineBookPages_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGOnlineBookPages] ADD  CONSTRAINT [DF_MGOnlineBookPages_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGOnlineBookPages] ADD  CONSTRAINT [DF_MGOnlineBookPages_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGOnlineBookPages] ADD  CONSTRAINT [DF_MGOnlineBookPages_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGWordMatch]  WITH CHECK ADD  CONSTRAINT [FK_MGWordMatch_Minigame] FOREIGN KEY([MGID])
REFERENCES [dbo].[Minigame] ([MGID])
;
ALTER TABLE [dbo].[MGWordMatch] CHECK CONSTRAINT [FK_MGWordMatch_Minigame]
;
ALTER TABLE [dbo].[MGWordMatch] ADD  CONSTRAINT [DF_MGWordMatch_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGWordMatch] ADD  CONSTRAINT [DF_MGWordMatch_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGWordMatch] ADD  CONSTRAINT [DF_MGWordMatch_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGWordMatch] ADD  CONSTRAINT [DF_MGWordMatch_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[MGWordMatchItems]  WITH CHECK ADD  CONSTRAINT [FK_MGWordMatchItems_MGWordMatch] FOREIGN KEY([WMID])
REFERENCES [dbo].[MGWordMatch] ([WMID])
;
ALTER TABLE [dbo].[MGWordMatchItems] CHECK CONSTRAINT [FK_MGWordMatchItems_MGWordMatch]
;
ALTER TABLE [dbo].[MGWordMatchItems] ADD  CONSTRAINT [DF_MGWordMatchItems_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[MGWordMatchItems] ADD  CONSTRAINT [DF_MGWordMatchItems_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[MGWordMatchItems] ADD  CONSTRAINT [DF_MGWordMatchItems_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[MGWordMatchItems] ADD  CONSTRAINT [DF_MGWordMatchItems_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[Minigame] ADD  CONSTRAINT [DF_Minigame_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[Minigame] ADD  CONSTRAINT [DF_Minigame_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[Minigame] ADD  CONSTRAINT [DF_Minigame_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[Minigame] ADD  CONSTRAINT [DF_Minigame_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[Notifications] ADD  CONSTRAINT [DF_Notifications_PID_To]  DEFAULT ((0)) FOR [PID_To]
;
ALTER TABLE [dbo].[Notifications] ADD  CONSTRAINT [DF_Notifications_PID_From]  DEFAULT ((0)) FOR [PID_From]
;
ALTER TABLE [dbo].[Notifications] ADD  CONSTRAINT [DF_Notifications_isQuestion]  DEFAULT ((0)) FOR [isQuestion]
;
ALTER TABLE [dbo].[Notifications] ADD  CONSTRAINT [DF_Notifications_Subject]  DEFAULT ('') FOR [Subject];

ALTER TABLE [dbo].[Notifications] ADD  CONSTRAINT [DF_Notifications_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[Notifications] ADD  CONSTRAINT [DF_Notifications_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[Notifications] ADD  CONSTRAINT [DF_Notifications_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[Notifications] ADD  CONSTRAINT [DF_Notifications_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_RedirectURL]  DEFAULT ('') FOR [RedirectURL]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_MaxImpressions]  DEFAULT ((0)) FOR [MaxImpressions]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_TotalImpressions]  DEFAULT ((0)) FOR [TotalImpressions]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_ZipCode]  DEFAULT ('') FOR [ZipCode]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_AgeStart]  DEFAULT ((0)) FOR [AgeStart]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_AgeEnd]  DEFAULT ((0)) FOR [AgeEnd]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_ProgramId]  DEFAULT ((0)) FOR [ProgramId]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_BranchId]  DEFAULT ((0)) FOR [BranchId]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[Offer] ADD  CONSTRAINT [DF_Offer_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[Patron] ADD  CONSTRAINT [DF_Patron_IsMasterAccount]  DEFAULT ((0)) FOR [IsMasterAccount]
;
ALTER TABLE [dbo].[Patron] ADD  CONSTRAINT [DF_Patron_RegistrationDate]  DEFAULT (getdate()) FOR [RegistrationDate]
;
ALTER TABLE [dbo].[PatronBookLists] ADD  CONSTRAINT [DF_PatronBookLists_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[PatronPrizes] ADD  CONSTRAINT [DF_PatronPrizes_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[PatronPrizes] ADD  CONSTRAINT [DF_PatronPrizes_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[PatronPrizes] ADD  CONSTRAINT [DF_PatronPrizes_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[PatronPrizes] ADD  CONSTRAINT [DF_PatronPrizes_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[PatronRewardCodes] ADD  CONSTRAINT [DF_PatronRewardCodes_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[PatronRewardCodes] ADD  CONSTRAINT [DF_PatronRewardCodes_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[PatronRewardCodes] ADD  CONSTRAINT [DF_PatronRewardCodes_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[PatronRewardCodes] ADD  CONSTRAINT [DF_PatronRewardCodes_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[PrizeDrawing] ADD  CONSTRAINT [DF_PrizeDrawing_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[PrizeDrawing] ADD  CONSTRAINT [DF_PrizeDrawing_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[PrizeDrawing] ADD  CONSTRAINT [DF_PrizeDrawing_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[PrizeDrawing] ADD  CONSTRAINT [DF_PrizeDrawing_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[PrizeDrawingWinners] ADD  CONSTRAINT [DF_PrizeDrawingWinners_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[PrizeDrawingWinners] ADD  CONSTRAINT [DF_PrizeDrawingWinners_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[PrizeDrawingWinners] ADD  CONSTRAINT [DF_PrizeDrawingWinners_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[PrizeDrawingWinners] ADD  CONSTRAINT [DF_PrizeDrawingWinners_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[PrizeTemplate] ADD  CONSTRAINT [DF_PrizeTemplate_NumPrizes]  DEFAULT ((1)) FOR [NumPrizes]
;
ALTER TABLE [dbo].[PrizeTemplate] ADD  CONSTRAINT [DF_PrizeTemplate_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[PrizeTemplate] ADD  CONSTRAINT [DF_PrizeTemplate_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[PrizeTemplate] ADD  CONSTRAINT [DF_PrizeTemplate_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[PrizeTemplate] ADD  CONSTRAINT [DF_PrizeTemplate_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[ProgramCodes]  WITH CHECK ADD  CONSTRAINT [FK_ProgramCodes_Programs] FOREIGN KEY([PID])
REFERENCES [dbo].[Programs] ([PID])
;
ALTER TABLE [dbo].[ProgramCodes] CHECK CONSTRAINT [FK_ProgramCodes_Programs]
;
ALTER TABLE [dbo].[ProgramCodes] ADD  CONSTRAINT [DF_ProgramCodes_isUsed]  DEFAULT ((0)) FOR [isUsed]
;
ALTER TABLE [dbo].[ProgramCodes] ADD  CONSTRAINT [DF_ProgramCodes_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
;
ALTER TABLE [dbo].[ProgramGame] ADD  CONSTRAINT [DF_ProgramGame_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[ProgramGame] ADD  CONSTRAINT [DF_ProgramGame_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[ProgramGame] ADD  CONSTRAINT [DF_ProgramGame_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[ProgramGame] ADD  CONSTRAINT [DF_ProgramGame_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[ProgramGameLevel]  WITH CHECK ADD  CONSTRAINT [FK_ProgramGameLevel_ProgramGame] FOREIGN KEY([PGID])
REFERENCES [dbo].[ProgramGame] ([PGID])
;
ALTER TABLE [dbo].[ProgramGameLevel] CHECK CONSTRAINT [FK_ProgramGameLevel_ProgramGame];
ALTER TABLE [dbo].[ProgramGameLevel] ADD  CONSTRAINT [DF_ProgramGameLevel_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[ProgramGameLevel] ADD  CONSTRAINT [DF_ProgramGameLevel_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[ProgramGameLevel] ADD  CONSTRAINT [DF_ProgramGameLevel_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[ProgramGameLevel] ADD  CONSTRAINT [DF_ProgramGameLevel_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[ProgramGamePointConversion]  WITH CHECK ADD  CONSTRAINT [FK_ProgramGamePointConversion_Programs] FOREIGN KEY([PGID])
REFERENCES [dbo].[Programs] ([PID])
;
ALTER TABLE [dbo].[ProgramGamePointConversion] CHECK CONSTRAINT [FK_ProgramGamePointConversion_Programs]
;
ALTER TABLE [dbo].[ProgramGamePointConversion] ADD  CONSTRAINT [DF_ProgramGamePointConversion_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[ProgramGamePointConversion] ADD  CONSTRAINT [DF_ProgramGamePointConversion_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[ProgramGamePointConversion] ADD  CONSTRAINT [DF_ProgramGamePointConversion_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[ProgramGamePointConversion] ADD  CONSTRAINT [DF_ProgramGamePointConversion_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[Programs] ADD  CONSTRAINT [DF_Programs_IsActive]  DEFAULT ((0)) FOR [IsActive]
;
ALTER TABLE [dbo].[Programs] ADD  CONSTRAINT [DF_Programs_IsHidden]  DEFAULT ((0)) FOR [IsHidden]
;
ALTER TABLE [dbo].[Programs] ADD  CONSTRAINT [DF_Programs_ParentalConsentFlag]  DEFAULT ((0)) FOR [ParentalConsentFlag]
;
ALTER TABLE [dbo].[Programs] ADD  CONSTRAINT [DF_Programs_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[Programs] ADD  CONSTRAINT [DF_Programs_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[Programs] ADD  CONSTRAINT [DF_Programs_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[Programs] ADD  CONSTRAINT [DF_Programs_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[RegistrationSettings] ADD  CONSTRAINT [DF_RegistrationSettings_Literacy1Label]  DEFAULT ('AR Level') FOR [Literacy1Label]
;
ALTER TABLE [dbo].[RegistrationSettings] ADD  CONSTRAINT [DF_RegistrationSettings_Literacy2Label]  DEFAULT ('Lexile Level') FOR [Literacy2Label]
;
ALTER TABLE [dbo].[RegistrationSettings] ADD  CONSTRAINT [DF_RegistrationSettings_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[RegistrationSettings] ADD  CONSTRAINT [DF_RegistrationSettings_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[RegistrationSettings] ADD  CONSTRAINT [DF_RegistrationSettings_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[RegistrationSettings] ADD  CONSTRAINT [DF_RegistrationSettings_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[ReportTemplate] ADD  CONSTRAINT [DF_ReportTemplate_ProgId]  DEFAULT ((0)) FOR [ProgId]
;
ALTER TABLE [dbo].[ReportTemplate] ADD  CONSTRAINT [DF_ReportTemplate_RegistrationDate1]  DEFAULT (getdate()) FOR [RegistrationDateStart]
;
ALTER TABLE [dbo].[ReportTemplate] ADD  CONSTRAINT [DF_ReportTemplate_RegistrationDate]  DEFAULT (getdate()) FOR [RegistrationDateEnd]
;
ALTER TABLE [dbo].[ReportTemplate] ADD  CONSTRAINT [DF_ReportTemplate_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[ReportTemplate] ADD  CONSTRAINT [DF_ReportTemplate_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[ReportTemplate] ADD  CONSTRAINT [DF_ReportTemplate_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[ReportTemplate] ADD  CONSTRAINT [DF_ReportTemplate_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[SentEmailLog] ADD  CONSTRAINT [DF_SentEmailLog_SentDateTime]  DEFAULT (getdate()) FOR [SentDateTime]
;
ALTER TABLE [dbo].[SRPGroupPermissions]  WITH CHECK ADD  CONSTRAINT [FK_GroupPermissions_SRPGroups] FOREIGN KEY([GID])
REFERENCES [dbo].[SRPGroups] ([GID])
;
ALTER TABLE [dbo].[SRPGroupPermissions] CHECK CONSTRAINT [FK_GroupPermissions_SRPGroups]
;
ALTER TABLE [dbo].[SRPGroupPermissions] ADD  CONSTRAINT [DF_SRPGroupPermissions_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[SRPGroupPermissions] ADD  CONSTRAINT [DF_SRPGroupPermissions_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[SRPGroups] ADD  CONSTRAINT [DF_SRPGroups_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[SRPGroups] ADD  CONSTRAINT [DF_SRPGroups_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[SRPGroups] ADD  CONSTRAINT [DF_SRPGroups_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[SRPGroups] ADD  CONSTRAINT [DF_SRPGroups_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[SRPReport] ADD  CONSTRAINT [DF_SRPReport_ProgId]  DEFAULT ((0)) FOR [ProgId]
;
ALTER TABLE [dbo].[SRPReport] ADD  CONSTRAINT [DF_SRPReport_RegistrationDateStart]  DEFAULT (getdate()) FOR [RegistrationDateStart]
;
ALTER TABLE [dbo].[SRPReport] ADD  CONSTRAINT [DF_SRPReport_RegistrationDateEnd]  DEFAULT (getdate()) FOR [RegistrationDateEnd]
;
ALTER TABLE [dbo].[SRPReport] ADD  CONSTRAINT [DF_SRPReport_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[SRPReport] ADD  CONSTRAINT [DF_SRPReport_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[SRPReport] ADD  CONSTRAINT [DF_SRPReport_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[SRPReport] ADD  CONSTRAINT [DF_SRPReport_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[SRPSettings] ADD  CONSTRAINT [DF_SRPSettings_StorageType]  DEFAULT ('Text') FOR [StorageType]
;
ALTER TABLE [dbo].[SRPSettings] ADD  CONSTRAINT [DF_SRPSettings_EditType]  DEFAULT ('TextBox') FOR [EditType]
;
ALTER TABLE [dbo].[SRPUser] ADD  CONSTRAINT [DF_SRPUser_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
;
ALTER TABLE [dbo].[SRPUser] ADD  CONSTRAINT [DF_SRPUser_LastModUser]  DEFAULT ('N/A') FOR [LastModUser]
;
ALTER TABLE [dbo].[SRPUser] ADD  CONSTRAINT [DF_SRPUser_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[SRPUser] ADD  CONSTRAINT [DF_SRPUser_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[SRPUserGroups]  WITH CHECK ADD  CONSTRAINT [FK_SRPUserGroups_SRPGroups] FOREIGN KEY([GID])
REFERENCES [dbo].[SRPGroups] ([GID])
;
ALTER TABLE [dbo].[SRPUserGroups] CHECK CONSTRAINT [FK_SRPUserGroups_SRPGroups]
;
ALTER TABLE [dbo].[SRPUserGroups]  WITH CHECK ADD  CONSTRAINT [FK_SRPUserGroups_SRPUser] FOREIGN KEY([UID])
REFERENCES [dbo].[SRPUser] ([UID])
;
ALTER TABLE [dbo].[SRPUserGroups] CHECK CONSTRAINT [FK_SRPUserGroups_SRPUser]
;
ALTER TABLE [dbo].[SRPUserGroups] ADD  CONSTRAINT [DF_SRPUserGroups_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[SRPUserGroups] ADD  CONSTRAINT [DF_SRPUserGroups_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;
ALTER TABLE [dbo].[SRPUserPermissions]  WITH CHECK ADD  CONSTRAINT [FK_UserPermissions_SRPUser] FOREIGN KEY([UID])
REFERENCES [dbo].[SRPUser] ([UID])
;
ALTER TABLE [dbo].[SRPUserPermissions] CHECK CONSTRAINT [FK_UserPermissions_SRPUser]
;
ALTER TABLE [dbo].[SRPUserPermissions] ADD  CONSTRAINT [DF_SRPUserPermissions_AddedDate]  DEFAULT (getdate()) FOR [AddedDate]
;
ALTER TABLE [dbo].[SRPUserPermissions] ADD  CONSTRAINT [DF_SRPUserPermissions_AddedUser]  DEFAULT ('N/A') FOR [AddedUser]
;

CREATE VIEW [dbo].[rpt_GamePlayStats1]
AS
WITH stats AS (SELECT DISTINCT 
                                                        gps.GPSID, gps.PID, p.Username, p.FirstName, p.LastName, p.Gender, p.EmailAddress, gps.MGID, g.GameName, g.AdminName, gps.MGType, 
                                                        g.MiniGameTypeName, gps.CompletedPlay, gps.Difficulty, gps.Started, gps.Completed
                                 FROM          dbo.GamePlayStats AS gps LEFT OUTER JOIN
                                                        dbo.Patron AS p ON gps.PID = p.PID LEFT OUTER JOIN
                                                        dbo.Minigame AS g ON gps.MGID = g.MGID)
    SELECT DISTINCT TOP (100) PERCENT PID, Username, FirstName, LastName, Gender, EmailAddress, MGID, GameName, AdminName, MGType, MiniGameTypeName,
                                (SELECT     COUNT(*) AS Expr1
                                  FROM          stats AS s1
                                  WHERE      (PID = s.PID) AND (MGID = s.MGID) AND (Difficulty = 'Easy')) AS EasyLevelStated,
                                (SELECT     COUNT(*) AS Expr1
                                  FROM          stats AS s1
                                  WHERE      (PID = s.PID) AND (MGID = s.MGID) AND (Difficulty = 'Easy') AND (CompletedPlay = 1)) AS EasyLevelCompleted,
                                (SELECT     COUNT(*) AS Expr1
                                  FROM          stats AS s1
                                  WHERE      (PID = s.PID) AND (MGID = s.MGID) AND (Difficulty = 'Medium')) AS MediumLevelStated,
                                (SELECT     COUNT(*) AS Expr1
                                  FROM          stats AS s1
                                  WHERE      (PID = s.PID) AND (MGID = s.MGID) AND (Difficulty = 'Medium') AND (CompletedPlay = 1)) AS MediumLevelCompleted,
                                (SELECT     COUNT(*) AS Expr1
                                  FROM          stats AS s1
                                  WHERE      (PID = s.PID) AND (MGID = s.MGID) AND (Difficulty = 'Hard')) AS HardLevelStated,
                                (SELECT     COUNT(*) AS Expr1
                                  FROM          stats AS s1
                                  WHERE      (PID = s.PID) AND (MGID = s.MGID) AND (Difficulty = 'Hard') AND (CompletedPlay = 1)) AS HardLevelCompleted
     FROM         stats AS s
     ORDER BY Username, FirstName, LastName, Gender, EmailAddress, MGID, GameName, AdminName, MGType, MiniGameTypeName
     ;
create function [dbo].[fx_IsFinisher2](@PID int, @ProgID int, @Level int = null)
returns bit
as
Begin
	 
	Declare @ret bit
	Declare @GameCompletionPoints int
	Declare @UserPoints int
	if (@PID is null or @ProgID is null or @ProgID = 0)
	begin
		set @ret = 0
	end
	else
	begin
		select @GameCompletionPoints = SUM(isnull(pgl.PointNumber,0)) 
		from ProgramGame pg 
				left join ProgramGameLevel pgl
					on pg.PGID = pgl.PGID
				left join Programs p
					on p.ProgramGameID = pg.PGID
		where 
			p.PID = @ProgID
				and (pgl.LevelNumber <= @Level or @Level is null)
		select @UserPoints = SUM(isnull(NumPoints,0))
		from	PatronPoints
		where 
			PID = @PID
		select @ret = case when @GameCompletionPoints > @UserPoints then 0 else 1 end
	end 
	
	return @ret	
End;
create function [dbo].[fx_IsFinisher](@PID int, @ProgID int)
returns bit
as
Begin
	 
	Declare @ret bit
	Declare @GameCompletionPoints int
	Declare @UserPoints int
	if (@PID is null or @ProgID is null or @ProgID = 0)
	begin
		set @ret = 0
	end
	else
	begin
		select @GameCompletionPoints = SUM(isnull(pgl.PointNumber,0)) 
		from ProgramGame pg 
				left join ProgramGameLevel pgl
					on pg.PGID = pgl.PGID
				left join Programs p
					on p.ProgramGameID = pg.PGID
		where 
			p.PID = @ProgID
		select @UserPoints = SUM(isnull(NumPoints,0))
		from	PatronPoints
		where 
			PID = @PID
		select @ret = case when @GameCompletionPoints > @UserPoints then 0 else 1 end
	end 
	
	return @ret	
End;
CREATE FUNCTION [dbo].[fnSplitBigInt] 
(
    -- Add the parameters for the function here
    @input nvarchar(4000)
)
RETURNS @retBigint TABLE 
(
    [Value] [bigint] NOT NULL
)
AS
BEGIN
 
    DECLARE @bigint nvarchar(100)
    DECLARE @pos int
 
    SET @input = LTRIM(RTRIM(@input))+ ',' -- TRIMMING THE BLANK SPACES
    SET @pos = CHARINDEX(',', @input, 1) -- OBTAINING THE STARTING POSITION OF COMMA IN THE GIVEN STRING
 
    IF REPLACE(@input, ',', '') <> '' -- CHECK IF THE STRING EXIST FOR US TO SPLIT
    BEGIN
        WHILE @pos > 0
        BEGIN
            SET @bigint = LTRIM(RTRIM(LEFT(@input, @pos - 1))) -- GET THE 1ST INT VALUE TO BE INSERTED
            IF @bigint <> ''
            BEGIN
                INSERT INTO @retBigint (Value) 
                VALUES (CAST(@bigint AS bigint)) 
            END
            SET @input = RIGHT(@input, LEN(@input) - @pos) -- RESETTING THE INPUT STRING BY REMOVING THE INSERTED ONES
            SET @pos = CHARINDEX(',', @input, 1) -- OBTAINING THE STARTING POSITION OF COMMA IN THE RESETTED NEW STRING
 
        END
    END    
    RETURN
    
END;

CREATE FUNCTION [dbo].[fnSplitString] 
(
    -- Add the parameters for the function here
    @input nvarchar(4000)
	, @CharSplit varchar(1) = ','
)
RETURNS @retString TABLE 
(
    [Value] varchar(255) NOT NULL
)
AS
BEGIN
 
    DECLARE @string nvarchar(255)
    DECLARE @pos int
 
    SET @input = LTRIM(RTRIM(@input))+ @CharSplit -- TRIMMING THE BLANK SPACES
    SET @pos = CHARINDEX(@CharSplit, @input, 1) -- OBTAINING THE STARTING POSITION OF COMMA IN THE GIVEN STRING
 
    IF REPLACE(@input, @CharSplit, '') <> '' -- CHECK IF THE STRING EXIST FOR US TO SPLIT
    BEGIN
        WHILE @pos > 0
        BEGIN
            SET @string = LTRIM(RTRIM(LEFT(@input, @pos - 1))) -- GET THE 1ST INT VALUE TO BE INSERTED
            IF @string <> ''
            BEGIN
                INSERT INTO @retString (Value) 
                VALUES (@string )
            END
            SET @input = RIGHT(@input, LEN(@input) - @pos) -- RESETTING THE INPUT STRING BY REMOVING THE INSERTED ONES
            SET @pos = CHARINDEX(@CharSplit, @input, 1) -- OBTAINING THE STARTING POSITION OF COMMA IN THE RESETTED NEW STRING
 
        END
    END    
    RETURN
    
END;

CREATE FUNCTION [dbo].[ProgramGameCummulativePoints] 
(
	@PGID int
)
RETURNS 
@Levels TABLE 
(
	PGID int,
	GameLevel int,
	PointsNeeded int,
	IsBonus bit
)
AS
BEGIN
declare @T table 
(
	PGID int,
	GameLevel int,
	PointsNeeded int,
	IsBonus bit
)

insert into @T values(0,0,0,0)
insert into @T
select @PGID, LevelNumber, PointNumber, 0
from ProgramGame pg
		join ProgramGameLevel pgl
			on pg.PGID = pgl.PGID			
where 
	pg.PGID = @PGID
order by LevelNumber
	

Declare @i int, @max int, @numLevels int
Select @i = 0, @max = 100
select @numLevels = COUNT(*) from ProgramGameLevel where PGID = @PGID
while @i < @max
begin
	insert into @t
	select @PGID, LevelNumber + (@i + 1) * @numLevels, PointNumber * BonusLevelPointMultiplier, 1
	from ProgramGame pg
			join ProgramGameLevel pgl
				on pg.PGID = pgl.PGID			
	where 
		pg.PGID = @PGID		
	order by LevelNumber
	Select @i = @i + 1
end

insert into @Levels
select @PGID, t1.GameLevel, + isnull(sum(t2.PointsNeeded) + t1.PointsNeeded,0), t1.IsBonus
from @T t1
left join @T t2 
     on t1.GameLevel>t2.GameLevel
group by t1.GameLevel, t1.PointsNeeded, t1.IsBonus
delete from @Levels where GameLevel = 0		
	
	RETURN 
END
;
CREATE PROCEDURE [dbo].[app_Avatar_Delete]
@AID int 
AS
   Delete from [Avatar] Where AID = @AID
;
CREATE PROCEDURE [dbo].[app_Avatar_GetAll]
AS
   Select * from [Avatar]
;
CREATE PROCEDURE [dbo].[app_Avatar_GetByID]
@AID int 
AS
   Select * from [Avatar] Where AID = @AID
;
CREATE PROCEDURE [dbo].[app_Avatar_Insert] (
	 @Name varchar (50)
	,@Gender varchar (1)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@AID int output 
) AS
Begin
	Insert into Avatar
		(Name
		,Gender
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@Name
		,@Gender
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
Select @AID = SCOPE_IDENTITY()
Select @AID
END
;
CREATE PROCEDURE [dbo].[app_Avatar_Update] (
	 @AID int 
	,@Name varchar (50)
	,@Gender varchar (1)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update Avatar
	Set 
		Name =  @Name
		,Gender =  @Gender
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where AID = @AID


;
CREATE PROCEDURE [dbo].[app_Badge_Delete]
@BID int 
AS
   Delete from [Badge] Where BID = @BID

;
CREATE PROCEDURE [dbo].[app_Badge_GetAll]
AS
   Select * from [Badge]

;
CREATE PROCEDURE [dbo].[app_Badge_GetByID]
@BID int 
AS
   Select * from [Badge] Where BID = @BID

;
CREATE PROCEDURE [dbo].[app_Badge_GetList]
@ids  varchar(255) = ''
AS

select * from Badge where BID in ((select * from [dbo].[fnSplitBigInt](@ids)))
;
CREATE PROCEDURE [dbo].[app_Badge_Insert] (
	 @AdminName varchar (50)
	,@UserName varchar (50)
	,@GenNotificationFlag bit 
	,@NotificationSubject varchar (150)
	,@NotificationBody text 
	,@CustomEarnedMessage text 
	,@IncludesPhysicalPrizeFlag bit 
	,@PhysicalPrizeName varchar (50)
	,@AssignProgramPrizeCode bit 
	,@PCNotificationSubject varchar (150)
	,@PCNotificationBody text 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@BID int output 
) AS
Begin
	Insert into Badge
		(AdminName
		,UserName
		,GenNotificationFlag
		,NotificationSubject
		,NotificationBody
		,CustomEarnedMessage
		,IncludesPhysicalPrizeFlag
		,PhysicalPrizeName
		,AssignProgramPrizeCode
		,PCNotificationSubject
		,PCNotificationBody
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@AdminName
		,@UserName
		,@GenNotificationFlag
		,@NotificationSubject
		,@NotificationBody
		,@CustomEarnedMessage
		,@IncludesPhysicalPrizeFlag
		,@PhysicalPrizeName
		,@AssignProgramPrizeCode
		,@PCNotificationSubject
		,@PCNotificationBody
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @BID = SCOPE_IDENTITY()
END
;
CREATE PROCEDURE [dbo].[app_Badge_Update] (
	 @BID int 
	,@AdminName varchar (50)
	,@UserName varchar (50)
	,@GenNotificationFlag bit 
	,@NotificationSubject varchar (150)
	,@NotificationBody text 
	,@CustomEarnedMessage text 
	,@IncludesPhysicalPrizeFlag bit 
	,@PhysicalPrizeName varchar (50)
	,@AssignProgramPrizeCode bit 
	,@PCNotificationSubject varchar (150)
	,@PCNotificationBody text 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update Badge
	Set 
		AdminName =  @AdminName
		,UserName =  @UserName
		,GenNotificationFlag =  @GenNotificationFlag
		,NotificationSubject =  @NotificationSubject
		,NotificationBody =  @NotificationBody
		,CustomEarnedMessage =  @CustomEarnedMessage
		,IncludesPhysicalPrizeFlag =  @IncludesPhysicalPrizeFlag
		,PhysicalPrizeName =  @PhysicalPrizeName
		,AssignProgramPrizeCode =  @AssignProgramPrizeCode
		,PCNotificationSubject =  @PCNotificationSubject
		,PCNotificationBody =  @PCNotificationBody
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where BID = @BID
;
CREATE PROCEDURE [dbo].[app_BookList_Delete]
@BLID int 
AS
   Delete from BookListBooks Where BLID = @BLID
   Delete from BookList Where BLID = @BLID


;
CREATE PROCEDURE [dbo].[app_BookList_GetAll]
AS
   Select bl.* 
			, isnull(p.AdminName,'') as ProgName
			, isnull(c.Code,'') as Library
   from [BookList]	bl
		left outer join Programs p
			on bl.ProgID = p.PID 
		left outer join Code c
			on bl.LibraryID = c.cid



; /****** Object:  StoredProcedure [dbo].[app_BookList_GetByID]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_BookList_GetByID]
@BLID int 
AS
   Select * from [BookList] Where BLID = @BLID



; /****** Object:  StoredProcedure [dbo].[app_BookList_GetForDisplay]    Script Date: 03/10/2014 14:43:20 ******/







CREATE PROCEDURE [dbo].[app_BookList_GetForDisplay]
@PID  int = 0
AS

--declare @PID int dbo.BookList
--select @PID = 100000

declare @Lit1 int
declare @Lit2 int, @ProgramId int, @BranchId int

select @Lit1 = isnull(LiteracyLevel1,0) , @Lit2 = isnull(LiteracyLevel2,''), @ProgramId = isnull(ProgID,0), @BranchId = isnull(PrimaryLibrary,0)
from Patron
where PID = @PID
----------------------------------------------------------
--select @Age, @Zip, @Age-36, @ProgramId, @BranchId
--select  o.* 
--from Offer o
----------------------------------------------------------

create table #temp (BLID int, ListName varchar(50), Description text)

insert into #temp
select BLID, ListName, Description from BookList
	where 
	LiteracyLevel1 > 0 and  @Lit1 = LiteracyLevel1
	

insert into #temp
select BLID, ListName, Description from BookList
	where 
	LiteracyLevel2 > 0 and  @Lit2 = LiteracyLevel2	

insert into #temp
select BLID, ListName, Description from BookList
	where 
	ProgID > 0 and  ProgID = @ProgramId	

insert into #temp
select BLID, ListName, Description from BookList
	where 
	LibraryID > 0 and  LibraryID = @BranchId	
	
insert into #temp
select BLID, ListName, Description from BookList
	where 
	LibraryID = 0 and  ProgID = 0 and LiteracyLevel1 = 0 and LiteracyLevel2 = 0	
		
select distinct BLID
	into #temp1
	from #temp	
drop table #temp

select ROW_NUMBER() over (order by bl.BLID) as Rank, 
	bl.* 
from #temp1 t left join dbo.BookList bl
	on bl.BLID = t.BLID




; /****** Object:  StoredProcedure [dbo].[app_BookList_Insert]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_BookList_Insert] (
	 @AdminName varchar (50)
	,@ListName varchar (50)
	,@AdminDescription text 
	,@Description text 
	,@LiteracyLevel1 int 
	,@LiteracyLevel2 int 
	,@ProgID int 
	,@LibraryID int 
	,@AwardBadgeID int 
	,@AwardPoints int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@BLID int output 
) AS
Begin
	Insert into BookList
		(AdminName
		,ListName
		,AdminDescription
		,Description
		,LiteracyLevel1
		,LiteracyLevel2
		,ProgID
		,LibraryID
		,AwardBadgeID
		,AwardPoints
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@AdminName
		,@ListName
		,@AdminDescription
		,@Description
		,@LiteracyLevel1
		,@LiteracyLevel2
		,@ProgID
		,@LibraryID
		,@AwardBadgeID
		,@AwardPoints
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @BLID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_BookList_Update]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_BookList_Update] (
	 @BLID int 
	,@AdminName varchar (50)
	,@ListName varchar (50)
	,@AdminDescription text 
	,@Description text 
	,@LiteracyLevel1 int 
	,@LiteracyLevel2 int 
	,@ProgID int 
	,@LibraryID int 
	,@AwardBadgeID int 
	,@AwardPoints int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update BookList
	Set 
		AdminName =  @AdminName
		,ListName =  @ListName
		,AdminDescription =  @AdminDescription
		,Description =  @Description
		,LiteracyLevel1 =  @LiteracyLevel1
		,LiteracyLevel2 =  @LiteracyLevel2
		,ProgID =  @ProgID
		,LibraryID =  @LibraryID
		,AwardBadgeID =  @AwardBadgeID
		,AwardPoints =  @AwardPoints
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where BLID = @BLID



; /****** Object:  StoredProcedure [dbo].[app_BookListBooks_Delete]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_BookListBooks_Delete]
@BLBID int 
AS
   Delete from [BookListBooks] Where BLBID = @BLBID



; /****** Object:  StoredProcedure [dbo].[app_BookListBooks_GetAll]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_BookListBooks_GetAll]
@BLID int 
AS
   Select * from [BookListBooks] where BLID = @BLID



; /****** Object:  StoredProcedure [dbo].[app_BookListBooks_GetByID]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_BookListBooks_GetByID]
@BLBID int 
AS
   Select * from [BookListBooks] Where BLBID = @BLBID



; /****** Object:  StoredProcedure [dbo].[app_BookListBooks_GetForDisplay]    Script Date: 03/10/2014 14:43:20 ******/







create  PROCEDURE [dbo].[app_BookListBooks_GetForDisplay]
@PID  int = 0
AS

--declare @PID int dbo.BookList
--select @PID = 100000

declare @Lit1 int
declare @Lit2 int, @ProgramId int, @BranchId int

select @Lit1 = isnull(LiteracyLevel1,0) , @Lit2 = isnull(LiteracyLevel2,''), @ProgramId = isnull(ProgID,0), @BranchId = isnull(PrimaryLibrary,0)
from Patron
where PID = @PID
----------------------------------------------------------
--select @Age, @Zip, @Age-36, @ProgramId, @BranchId
--select  o.* 
--from Offer o
----------------------------------------------------------

create table #temp (BLID int, ListName varchar(50), Description text)

insert into #temp
select BLID, ListName, Description from BookList
	where 
	LiteracyLevel1 > 0 and  @Lit1 = LiteracyLevel1
	

insert into #temp
select BLID, ListName, Description from BookList
	where 
	LiteracyLevel2 > 0 and  @Lit2 = LiteracyLevel2	

insert into #temp
select BLID, ListName, Description from BookList
	where 
	ProgID > 0 and  ProgID = @ProgramId	

insert into #temp
select BLID, ListName, Description from BookList
	where 
	LibraryID > 0 and  LibraryID = @BranchId	
	
insert into #temp
select BLID, ListName, Description from BookList
	where 
	LibraryID = 0 and  ProgID = 0 and LiteracyLevel1 = 0 and LiteracyLevel2 = 0	
		
select distinct BLID
	into #temp1
	from #temp	
drop table #temp

select ROW_NUMBER() over (order by bl.BLID) as Rank, 
	bl.* 
from #temp1 t left join dbo.BookList bl
	on bl.BLID = t.BLID




; /****** Object:  StoredProcedure [dbo].[app_BookListBooks_GetForPatronDisplay]    Script Date: 03/10/2014 14:43:20 ******/







CREATE  PROCEDURE [dbo].[app_BookListBooks_GetForPatronDisplay]
@BLID  int = 0 ,
@PID  int = 0
AS

select isnull(p.HasReadFlag,0) as HasRead, isnull(p.PBLBID,0) as PBLBID, b.* 
from BookListBooks b left outer join PatronBookLists p
	on b.BLBID = p.BLBID and b.BLID = p.BLID and p.PID = @PID
where b.BLID = @BLID 





; /****** Object:  StoredProcedure [dbo].[app_BookListBooks_Insert]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_BookListBooks_Insert] (
	 @BLID int 
	,@Author varchar (50)
	,@Title varchar (150)
	,@ISBN varchar (50)
	,@URL varchar (150)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@BLBID int output 
) AS
Begin
	Insert into BookListBooks
		(BLID
		,Author
		,Title
		,ISBN
		,URL
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@BLID
		,@Author
		,@Title
		,@ISBN
		,@URL
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @BLBID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_BookListBooks_Update]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_BookListBooks_Update] (
	 @BLBID int 
	,@BLID int 
	,@Author varchar (50)
	,@Title varchar (150)
	,@ISBN varchar (50)
	,@URL varchar (150)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update BookListBooks
	Set 
		BLID =  @BLID
		,Author =  @Author
		,Title =  @Title
		,ISBN =  @ISBN
		,URL =  @URL
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where BLBID = @BLBID



; /****** Object:  StoredProcedure [dbo].[app_Code_Delete]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_Code_Delete]
@CID int 
AS
   Delete from [Code] Where CID = @CID



; /****** Object:  StoredProcedure [dbo].[app_Code_GetAll]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Code_GetAll]
AS
   Select * from [Code]



; /****** Object:  StoredProcedure [dbo].[app_Code_GetAllLibrarySystems]    Script Date: 03/10/2014 14:43:20 ******/







CREATE PROCEDURE [dbo].[app_Code_GetAllLibrarySystems]
AS
   Select distinct rtrim(ltrim(District)) as LibSys
   from Patron
   WHERE rtrim(ltrim(District)) <> '' AND District IS NOT NULL
   ORDER BY rtrim(ltrim(District))





; /****** Object:  StoredProcedure [dbo].[app_Code_GetAllSchools]    Script Date: 03/10/2014 14:43:20 ******/









CREATE PROCEDURE [dbo].[app_Code_GetAllSchools]
AS
   Select distinct rtrim(ltrim(SchoolName)) as School
   from Patron
   WHERE rtrim(ltrim(SchoolName)) <> '' AND SchoolName IS NOT NULL
   ORDER BY rtrim(ltrim(SchoolName))



; /****** Object:  StoredProcedure [dbo].[app_Code_GetAllTypeID]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Code_GetAllTypeID]
@ID int 
AS
   Select * from [Code]
	where CTID = @ID



; /****** Object:  StoredProcedure [dbo].[app_Code_GetAllTypeName]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Code_GetAllTypeName]
@name varchar(50)
AS
   Select * from [Code]
   	where CTID = (select CTID from dbo.CodeType where CodeTypeName = @name)



; /****** Object:  StoredProcedure [dbo].[app_Code_GetByID]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Code_GetByID]
@CID int 
AS
   Select * from [Code] Where CID = @CID



; /****** Object:  StoredProcedure [dbo].[app_Code_Insert]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_Code_Insert] (
	 @CTID int 
	,@Code varchar (25)
	,@Description varchar (80)
	,@CID int output 
) AS
Begin
	Insert into Code
		(CTID
		,Code
		,Description
)
	VALUES
		(@CTID
		,@Code
		,@Description
)
	Select @CID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_Code_Update]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_Code_Update] (
	 @CID int 
	,@CTID int 
	,@Code varchar (25)
	,@Description varchar (80)

) AS
	Update Code
	Set 
		CTID =  @CTID
		,Code =  @Code
		,Description =  @Description

	Where CID = @CID



; /****** Object:  StoredProcedure [dbo].[app_CodeType_Delete]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_CodeType_Delete]
@CTID int 
AS
   Delete from [CodeType] Where CTID = @CTID



; /****** Object:  StoredProcedure [dbo].[app_CodeType_GetAll]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_CodeType_GetAll]
AS
   Select * from [CodeType]



; /****** Object:  StoredProcedure [dbo].[app_CodeType_GetByID]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_CodeType_GetByID]
@CTID int 
AS
   Select * from [CodeType] Where CTID = @CTID



; /****** Object:  StoredProcedure [dbo].[app_CodeType_Insert]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_CodeType_Insert] (
	 @isSystem bit 
	,@CodeTypeName varchar (50)
	,@Description text 
	,@CTID int output 
) AS
Begin
	Insert into CodeType
		(isSystem
		,CodeTypeName
		,Description
)
	VALUES
		(@isSystem
		,@CodeTypeName
		,@Description
)
	Select @CTID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_CodeType_Update]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_CodeType_Update] (
	 @CTID int 
	,@isSystem bit 
	,@CodeTypeName varchar (50)
	,@Description text 

) AS
	Update CodeType
	Set 
		isSystem =  @isSystem
		,CodeTypeName =  @CodeTypeName
		,Description =  @Description

	Where CTID = @CTID



; /****** Object:  StoredProcedure [dbo].[app_CustomEventFields_Delete]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_CustomEventFields_Delete]
@CID int 
AS
   Delete from [CustomEventFields] Where CID = @CID



; /****** Object:  StoredProcedure [dbo].[app_CustomEventFields_GetAll]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_CustomEventFields_GetAll]
AS
   Select * from [CustomEventFields]



; /****** Object:  StoredProcedure [dbo].[app_CustomEventFields_GetByID]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_CustomEventFields_GetByID]
@CID int 
AS
   Select * from [CustomEventFields] Where CID = @CID



; /****** Object:  StoredProcedure [dbo].[app_CustomEventFields_Insert]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_CustomEventFields_Insert] (
	 @Use1 bit 
	,@Label1 varchar (50)
	,@DDValues1 varchar (50)
	,@Use2 bit 
	,@Use3 bit 
	,@Label2 varchar (50)
	,@Label3 varchar (50)
	,@DDValues2 varchar (50)
	,@DDValues3 varchar (50)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@CID int output 
) AS
Begin
	Insert into CustomEventFields
		(Use1
		,Label1
		,DDValues1
		,Use2
		,Use3
		,Label2
		,Label3
		,DDValues2
		,DDValues3
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@Use1
		,@Label1
		,@DDValues1
		,@Use2
		,@Use3
		,@Label2
		,@Label3
		,@DDValues2
		,@DDValues3
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @CID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_CustomEventFields_Update]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_CustomEventFields_Update] (
	 @CID int 
	,@Use1 bit 
	,@Label1 varchar (50)
	,@DDValues1 varchar (50)
	,@Use2 bit 
	,@Use3 bit 
	,@Label2 varchar (50)
	,@Label3 varchar (50)
	,@DDValues2 varchar (50)
	,@DDValues3 varchar (50)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update CustomEventFields
	Set 
		Use1 =  @Use1
		,Label1 =  @Label1
		,DDValues1 =  @DDValues1
		,Use2 =  @Use2
		,Use3 =  @Use3
		,Label2 =  @Label2
		,Label3 =  @Label3
		,DDValues2 =  @DDValues2
		,DDValues3 =  @DDValues3
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where CID = @CID



; /****** Object:  StoredProcedure [dbo].[app_CustomRegistrationFields_Delete]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_CustomRegistrationFields_Delete]
@CID int 
AS
   Delete from [CustomRegistrationFields] Where CID = @CID



; /****** Object:  StoredProcedure [dbo].[app_CustomRegistrationFields_GetAll]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_CustomRegistrationFields_GetAll]
AS
   Select * from [CustomRegistrationFields]



; /****** Object:  StoredProcedure [dbo].[app_CustomRegistrationFields_GetByID]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_CustomRegistrationFields_GetByID]
@CID int 
AS
   Select * from [CustomRegistrationFields] Where CID = @CID



; /****** Object:  StoredProcedure [dbo].[app_CustomRegistrationFields_Insert]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_CustomRegistrationFields_Insert] (
	 @Use1 bit 
	,@Label1 varchar (50)
	,@DDValues1 varchar (50)
	,@Use2 bit 
	,@Use3 bit 
	,@Use4 bit 
	,@Use5 bit 
	,@Label2 varchar (50)
	,@Label3 varchar (50)
	,@Label4 varchar (50)
	,@Label5 varchar (50)
	,@DDValues2 varchar (50)
	,@DDValues3 varchar (50)
	,@DDValues4 varchar (50)
	,@DDValues5 varchar (50)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@CID int output 
) AS
Begin
	Insert into CustomRegistrationFields
		(Use1
		,Label1
		,DDValues1
		,Use2
		,Use3
		,Use4
		,Use5
		,Label2
		,Label3
		,Label4
		,Label5
		,DDValues2
		,DDValues3
		,DDValues4
		,DDValues5
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@Use1
		,@Label1
		,@DDValues1
		,@Use2
		,@Use3
		,@Use4
		,@Use5
		,@Label2
		,@Label3
		,@Label4
		,@Label5
		,@DDValues2
		,@DDValues3
		,@DDValues4
		,@DDValues5
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @CID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_CustomRegistrationFields_Update]    Script Date: 03/10/2014 14:43:20 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_CustomRegistrationFields_Update] (
	 @CID int 
	,@Use1 bit 
	,@Label1 varchar (50)
	,@DDValues1 varchar (50)
	,@Use2 bit 
	,@Use3 bit 
	,@Use4 bit 
	,@Use5 bit 
	,@Label2 varchar (50)
	,@Label3 varchar (50)
	,@Label4 varchar (50)
	,@Label5 varchar (50)
	,@DDValues2 varchar (50)
	,@DDValues3 varchar (50)
	,@DDValues4 varchar (50)
	,@DDValues5 varchar (50)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update CustomRegistrationFields
	Set 
		Use1 =  @Use1
		,Label1 =  @Label1
		,DDValues1 =  @DDValues1
		,Use2 =  @Use2
		,Use3 =  @Use3
		,Use4 =  @Use4
		,Use5 =  @Use5
		,Label2 =  @Label2
		,Label3 =  @Label3
		,Label4 =  @Label4
		,Label5 =  @Label5
		,DDValues2 =  @DDValues2
		,DDValues3 =  @DDValues3
		,DDValues4 =  @DDValues4
		,DDValues5 =  @DDValues5
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where CID = @CID



; /****** Object:  StoredProcedure [dbo].[app_Event_Delete]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_Event_Delete]
@EID int 
AS
   Delete from [Event] Where EID = @EID



; /****** Object:  StoredProcedure [dbo].[app_Event_GetAdminSearch]    Script Date: 03/10/2014 14:43:21 ******/






CREATE PROCEDURE [dbo].[app_Event_GetAdminSearch]
  @startDate datetime
, @endDate datetime
, @branchID int
 AS
   Select * 
	, (select Code from dbo.Code where CID = BranchID ) as Branch
   from [Event]
   where 
		(BranchID = @branchID or @branchID = 0)
		AND (EventDate >= @startDate or @startDate is null)
		AND (EventDate <= @endDate or @endDate is null)
   order by EventDate desc



; /****** Object:  StoredProcedure [dbo].[app_Event_GetAll]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Event_GetAll]
AS
   Select * 
	, (select Code from dbo.Code where CID = BranchID ) as Branch
   
   from [Event]
   order by EventDate desc



; /****** Object:  StoredProcedure [dbo].[app_Event_GetByID]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Event_GetByID]
@EID int 
AS
   Select *
   , (select Code from dbo.Code where CID = BranchID ) as Branch
    from [Event] Where EID = @EID



; /****** Object:  StoredProcedure [dbo].[app_Event_GetEventsByEventCode]    Script Date: 03/10/2014 14:43:21 ******/






CREATE PROCEDURE [dbo].[app_Event_GetEventsByEventCode] (
	   @startDate datetime 
	 , @endDate datetime 
	 , @key varchar(50) = ''
	) AS
Begin

Select * from Event
where EventDate between @startDate and @endDate  
	AND SecretCode = @Key

end




; /****** Object:  StoredProcedure [dbo].[app_Event_GetUpcomingDisplay]    Script Date: 03/10/2014 14:43:21 ******/







CREATE PROCEDURE [dbo].[app_Event_GetUpcomingDisplay]
  @startDate datetime
, @endDate datetime
, @branchID int
 AS
   Select * 
	, (select Code from dbo.Code where CID = BranchID ) as Branch
   from [Event]
   where 
		(BranchID = @branchID or @branchID = 0)
		AND (EventDate >= @startDate or @startDate is null)
		AND (EventDate <= @endDate or @endDate is null)
		AND EventDate >= GETDATE()
   order by EventDate asc, EventTitle 



; /****** Object:  StoredProcedure [dbo].[app_Event_Insert]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_Event_Insert] (
	 @EventTitle varchar (150)
	,@EventDate datetime 
	,@EventTime varchar (15)
	,@HTML text 
	,@SecretCode varchar (50)
	,@NumberPoints int 
	,@BadgeID int 
	,@BranchID int 
	,@Custom1 varchar (50)
	,@Custom2 varchar (50)
	,@Custom3 varchar (50)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@EID int output 
) AS
Begin
	Insert into Event
		(EventTitle
		,EventDate
		,EventTime
		,HTML
		,SecretCode
		,NumberPoints
		,BadgeID
		,BranchID
		,Custom1
		,Custom2
		,Custom3
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@EventTitle
		,@EventDate
		,@EventTime
		,@HTML
		,@SecretCode
		,@NumberPoints
		,@BadgeID
		,@BranchID
		,@Custom1
		,@Custom2
		,@Custom3
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @EID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_Event_Update]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_Event_Update] (
	 @EID int 
	,@EventTitle varchar (150)
	,@EventDate datetime 
	,@EventTime varchar (15)
	,@HTML text 
	,@SecretCode varchar (50)
	,@NumberPoints int 
	,@BadgeID int 
	,@BranchID int 
	,@Custom1 varchar (50)
	,@Custom2 varchar (50)
	,@Custom3 varchar (50)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update Event
	Set 
		EventTitle =  @EventTitle
		,EventDate =  @EventDate
		,EventTime =  @EventTime
		,HTML =  @HTML
		,SecretCode =  @SecretCode
		,NumberPoints =  @NumberPoints
		,BadgeID =  @BadgeID
		,BranchID =  @BranchID
		,Custom1 =  @Custom1
		,Custom2 =  @Custom2
		,Custom3 =  @Custom3
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where EID = @EID



; /****** Object:  StoredProcedure [dbo].[app_GamePlayStats_Delete]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_GamePlayStats_Delete]
@GPSID int 
AS
   Delete from [GamePlayStats] Where GPSID = @GPSID



; /****** Object:  StoredProcedure [dbo].[app_GamePlayStats_GetAll]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_GamePlayStats_GetAll]
AS
   Select * from [GamePlayStats]



; /****** Object:  StoredProcedure [dbo].[app_GamePlayStats_GetByID]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_GamePlayStats_GetByID]
@GPSID int 
AS
   Select * from [GamePlayStats] Where GPSID = @GPSID



; /****** Object:  StoredProcedure [dbo].[app_GamePlayStats_Insert]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_GamePlayStats_Insert] (
	 @PID int 
	,@MGID int 
	,@MGType int 
	,@Started datetime 
	,@Difficulty varchar (50)
	,@CompletedPlay bit 
	,@Completed datetime 
	,@GPSID int output 
) AS
Begin
	Insert into GamePlayStats
		(PID
		,MGID
		,MGType
		,Started
		,Difficulty
		,CompletedPlay
		,Completed
)
	VALUES
		(@PID
		,@MGID
		,@MGType
		,@Started
		,@Difficulty
		,@CompletedPlay
		,@Completed
)
	Select @GPSID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_GamePlayStats_Update]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_GamePlayStats_Update] (
	 @GPSID int 
	,@PID int 
	,@MGID int 
	,@MGType int 
	,@Started datetime 
	,@Difficulty varchar (50)
	,@CompletedPlay bit 
	,@Completed datetime 

) AS
	Update GamePlayStats
	Set 
		PID =  @PID
		,MGID =  @MGID
		,MGType =  @MGType
		,Started =  @Started
		,Difficulty =  @Difficulty
		,CompletedPlay =  @CompletedPlay
		,Completed =  @Completed

	Where GPSID = @GPSID



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdv_Delete]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGChooseAdv_Delete]
@CAID int 
AS
   Delete from [MGChooseAdv] Where CAID = @CAID



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdv_GetAll]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGChooseAdv_GetAll]
AS
   Select * from [MGChooseAdv]



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdv_GetByID]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGChooseAdv_GetByID]
@CAID int 
AS
   Select * from [MGChooseAdv] Where CAID = @CAID



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdv_GetByIDWithParent]    Script Date: 03/10/2014 14:43:21 ******/






create PROCEDURE [dbo].[app_MGChooseAdv_GetByIDWithParent]
@MGID int 
AS
   Select 
	mg.*, 
	MiniGameTypeName, AdminName, GameName, isActive,NumberPoints, AwardedBadgeID
	from MGChooseAdv  mg 
		inner join dbo.Minigame g on mg.MGID = g.MGID
	Where g.MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdv_GetByMGID]    Script Date: 03/10/2014 14:43:21 ******/







create PROCEDURE [dbo].[app_MGChooseAdv_GetByMGID]
@MGID int 
AS
   Select * from MGChooseAdv Where MGID = @MGID
   



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdv_Insert]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGChooseAdv_Insert] (
	 @MGID int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@CAID int output 
) AS
Begin
	Insert into MGChooseAdv
		(MGID
		,EnableMediumDifficulty
		,EnableHardDifficulty
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MGID
		,@EnableMediumDifficulty
		,@EnableHardDifficulty
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @CAID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdv_Update]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGChooseAdv_Update] (
	 @CAID int 
	,@MGID int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGChooseAdv
	Set 
		MGID =  @MGID
		,EnableMediumDifficulty =  @EnableMediumDifficulty
		,EnableHardDifficulty =  @EnableHardDifficulty
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where CAID = @CAID



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_Delete]    Script Date: 03/10/2014 14:43:21 ******/







CREATE PROCEDURE [dbo].[app_MGChooseAdvSlides_Delete]
@CASID int 
AS
  Declare @MGID int
  Select @MGID = MGID from MGChooseAdvSlides Where CASID = @CASID

   Delete from MGChooseAdvSlides Where CASID = @CASID
   
   exec app_MGChooseAdvSlides_Reorder @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_GetAll]    Script Date: 03/10/2014 14:43:21 ******/







CREATE PROCEDURE [dbo].[app_MGChooseAdvSlides_GetAll]
@MGID int = 0
AS 
   Select * from MGChooseAdvSlides Where MGID = @MGID 





; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_GetAllByDifficulty]    Script Date: 03/10/2014 14:43:21 ******/







CREATE PROCEDURE [dbo].[app_MGChooseAdvSlides_GetAllByDifficulty]
 @MGID int = 0
,@Diff int = 1
AS 
   Select *, (Select MAX(StepNumber) from MGChooseAdvSlides where MGID = @MGID AND Difficulty = @Diff ) as MAX
   from MGChooseAdvSlides 
   Where MGID = @MGID 
	AND Difficulty = @Diff
   order by StepNumber



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_GetByID]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGChooseAdvSlides_GetByID]
@CASID int 
AS
   Select * from [MGChooseAdvSlides] Where CASID = @CASID



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_GetPlaySlide]    Script Date: 03/10/2014 14:43:21 ******/






CREATE  PROCEDURE [dbo].[app_MGChooseAdvSlides_GetPlaySlide]
@CAID int 
,@Step int = 1
,@Difficulty int = 1
AS
   Select * from [MGChooseAdvSlides] Where CAID = @CAID
	AND StepNumber = @Step AND Difficulty = @Difficulty
	



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_Insert]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGChooseAdvSlides_Insert] (
	 @CAID int 
	,@MGID int 
	,@Difficulty int = 1 
	,@StepNumber int 
	,@SlideText text 
	,@FirstImageGoToStep int 
	,@SecondImageGoToStep int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@CASID int output 
) AS
Begin
	select @StepNumber = isnull((select isnull(MAX(StepNumber),0) from MGChooseAdvSlides where CAID = @CAID and Difficulty = @Difficulty),0) + 1
	
	Insert into MGChooseAdvSlides
		(CAID
		,MGID
		,Difficulty
		,StepNumber
		,SlideText
		,FirstImageGoToStep
		,SecondImageGoToStep
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@CAID
		,@MGID
		,@Difficulty
		,@StepNumber
		,@SlideText
		,@FirstImageGoToStep
		,@SecondImageGoToStep
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @CASID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_MoveDn]    Script Date: 03/10/2014 14:43:21 ******/






CREATE PROCEDURE [dbo].[app_MGChooseAdvSlides_MoveDn]
@CASID int 
AS

	Declare @CurrentRecordLocation int, @NextRecordID int, @MGID int, @Diff int , @CAID int
	Select @CurrentRecordLocation = StepNumber, @CAID = CAID, @MGID = MGID , @Diff = Difficulty 
	from MGChooseAdvSlides 
	where CASID = @CASID
	
	exec [dbo].[app_MGChooseAdvSlides_Reorder] @MGID
	
	if @CurrentRecordLocation < (Select MAX(StepNumber) from MGChooseAdvSlides where MGID = @MGID AND Difficulty = @Diff)
	begin
		Select @NextRecordID = CASID 
		from MGChooseAdvSlides 
		where StepNumber = (@CurrentRecordLocation + 1) AND MGID = @MGID AND Difficulty = @Diff
		
		update MGChooseAdvSlides set StepNumber = @CurrentRecordLocation + 1
		where CASID = @CASID
	
		update MGChooseAdvSlides set StepNumber = @CurrentRecordLocation 
		where CASID = @NextRecordID
	end



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_MoveUp]    Script Date: 03/10/2014 14:43:21 ******/







CREATE PROCEDURE [dbo].[app_MGChooseAdvSlides_MoveUp]
@CASID int 
AS
	Declare @CurrentRecordLocation int, @PreviousRecordID int, @MGID int, @Diff int , @CAID int
	Select @CurrentRecordLocation = StepNumber, @CAID = CAID, @MGID = MGID , @Diff = Difficulty 
	from MGChooseAdvSlides 
	where CASID = @CASID
	
	exec [dbo].[app_MGChooseAdvSlides_Reorder] @MGID
	
	if @CurrentRecordLocation > 1
	begin
		Select @PreviousRecordID = CASID 
		from MGChooseAdvSlides 
		where StepNumber = (@CurrentRecordLocation - 1) AND MGID = @MGID AND Difficulty = @Diff
		
		update MGChooseAdvSlides set StepNumber = @CurrentRecordLocation - 1
		where CASID = @CASID
	
		update MGChooseAdvSlides set StepNumber = @CurrentRecordLocation 
		where CASID = @PreviousRecordID
	end



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_Reorder]    Script Date: 03/10/2014 14:43:21 ******/






CREATE Procedure [dbo].[app_MGChooseAdvSlides_Reorder]
@MGID int 
AS
	UPDATE MGChooseAdvSlides 
	SET StepNumber = rowNumber 
	FROM MGChooseAdvSlides
		INNER JOIN 
		(SELECT CASID, StepNumber, MGID, Difficulty, row_number() OVER (ORDER BY StepNumber Asc) as rowNumber
			FROM MGChooseAdvSlides WHERE MGID = @MGID AND Difficulty = 1) drRowNumbers 
				ON	
						drRowNumbers.CASID = MGChooseAdvSlides.CASID 
					AND drRowNumbers.MGID = @MGID 
					AND drRowNumbers.Difficulty = 1

	UPDATE MGChooseAdvSlides 
	SET StepNumber = rowNumber 
	FROM MGChooseAdvSlides
		INNER JOIN 
		(SELECT CASID, StepNumber, MGID, Difficulty, row_number() OVER (ORDER BY StepNumber Asc) as rowNumber
			FROM MGChooseAdvSlides WHERE MGID = @MGID AND Difficulty = 2) drRowNumbers 
				ON	
						drRowNumbers.CASID = MGChooseAdvSlides.CASID 
					AND drRowNumbers.MGID = @MGID 
					AND drRowNumbers.Difficulty = 2

	UPDATE MGChooseAdvSlides 
	SET StepNumber = rowNumber 
	FROM MGChooseAdvSlides
		INNER JOIN 
		(SELECT CASID, StepNumber, MGID, Difficulty, row_number() OVER (ORDER BY StepNumber Asc) as rowNumber
			FROM MGChooseAdvSlides WHERE MGID = @MGID AND Difficulty = 3) drRowNumbers 
				ON	
						drRowNumbers.CASID = MGChooseAdvSlides.CASID 
					AND drRowNumbers.MGID = @MGID 
					AND drRowNumbers.Difficulty = 3	



; /****** Object:  StoredProcedure [dbo].[app_MGChooseAdvSlides_Update]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGChooseAdvSlides_Update] (
	 @CASID int 
	,@CAID int 
	,@MGID int 
	,@Difficulty int 
	,@StepNumber int 
	,@SlideText text 
	,@FirstImageGoToStep int 
	,@SecondImageGoToStep int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGChooseAdvSlides
	Set 
		CAID =  @CAID
		,MGID =  @MGID
		,Difficulty =  @Difficulty
		,StepNumber =  @StepNumber
		,SlideText =  @SlideText
		,FirstImageGoToStep =  @FirstImageGoToStep
		,SecondImageGoToStep =  @SecondImageGoToStep
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where CASID = @CASID



; /****** Object:  StoredProcedure [dbo].[app_MGCodeBreaker_Delete]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGCodeBreaker_Delete]
@CBID int 
AS
   Delete from [MGCodeBreaker] Where CBID = @CBID



; /****** Object:  StoredProcedure [dbo].[app_MGCodeBreaker_GetAll]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGCodeBreaker_GetAll]
AS
   Select * from [MGCodeBreaker]



; /****** Object:  StoredProcedure [dbo].[app_MGCodeBreaker_GetByID]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGCodeBreaker_GetByID]
@CBID int 
AS
   Select * from [MGCodeBreaker] Where CBID = @CBID



; /****** Object:  StoredProcedure [dbo].[app_MGCodeBreaker_GetByIDWithParent]    Script Date: 03/10/2014 14:43:21 ******/






create PROCEDURE [dbo].[app_MGCodeBreaker_GetByIDWithParent]
@MGID int 
AS
   Select 
	cb.*, 
	MiniGameTypeName, AdminName, GameName, isActive,NumberPoints, AwardedBadgeID
	from MGCodeBreaker  cb 
		inner join dbo.Minigame g on cb.MGID = g.MGID
	Where g.MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGCodeBreaker_GetByMGID]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
create PROCEDURE [dbo].[app_MGCodeBreaker_GetByMGID]
@MGID int 
AS
   Select * from [MGCodeBreaker] Where MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGCodeBreaker_Insert]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGCodeBreaker_Insert] (
	 @MGID int 
	,@EasyString varchar (250)
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@MediumString varchar (250)
	,@HardString varchar (250)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@CBID int output 
) AS
Begin
	Insert into MGCodeBreaker
		(MGID
		,EasyString
		,EnableMediumDifficulty
		,EnableHardDifficulty
		,MediumString
		,HardString
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MGID
		,@EasyString
		,@EnableMediumDifficulty
		,@EnableHardDifficulty
		,@MediumString
		,@HardString
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @CBID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGCodeBreaker_Update]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGCodeBreaker_Update] (
	 @CBID int 
	,@MGID int 
	,@EasyString varchar (250)
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@MediumString varchar (250)
	,@HardString varchar (250)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGCodeBreaker
	Set 
		MGID =  @MGID
		,EasyString =  @EasyString
		,EnableMediumDifficulty =  @EnableMediumDifficulty
		,EnableHardDifficulty =  @EnableHardDifficulty
		,MediumString =  @MediumString
		,HardString =  @HardString
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where CBID = @CBID



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPic_Delete]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGHiddenPic_Delete]
@HPID int 
AS
   Delete from [MGHiddenPic] Where HPID = @HPID



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPic_GetAll]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGHiddenPic_GetAll]
AS
   Select * from [MGHiddenPic]



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPic_GetByID]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGHiddenPic_GetByID]
@HPID int 
AS
   Select * from [MGHiddenPic] Where HPID = @HPID



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPic_GetByIDWithParent]    Script Date: 03/10/2014 14:43:21 ******/







create PROCEDURE [dbo].[app_MGHiddenPic_GetByIDWithParent]
@MGID int 
AS
   Select 
	mg.*, 
	MiniGameTypeName, AdminName, GameName, isActive,NumberPoints, AwardedBadgeID
	from MGHiddenPic  mg 
		inner join dbo.Minigame g on mg.MGID = g.MGID
	Where g.MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPic_GetByMGID]    Script Date: 03/10/2014 14:43:21 ******/







create PROCEDURE [dbo].[app_MGHiddenPic_GetByMGID]
@MGID int 
AS
   Select * from MGHiddenPic Where MGID = @MGID
   



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPic_GetRandomBK]    Script Date: 03/10/2014 14:43:21 ******/








CREATE PROCEDURE [dbo].[app_MGHiddenPic_GetRandomBK]
 @HPID int
,@HPBID int out
AS

	declare @a int
	select top 1	
		NEWID() as id, HPBID
	into #tmp
	from  dbo.MGHiddenPicBk
		Where HPID = @HPID
	order by id
	
	select @HPBID = HPBID from #tmp
	return @a



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPic_Insert]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGHiddenPic_Insert] (
	 @MGID int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@EasyDictionary text 
	,@MediumDictionary text 
	,@HardDictionary text 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@HPID int output 
) AS
Begin
	Insert into MGHiddenPic
		(MGID
		,EnableMediumDifficulty
		,EnableHardDifficulty
		,EasyDictionary
		,MediumDictionary
		,HardDictionary
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MGID
		,@EnableMediumDifficulty
		,@EnableHardDifficulty
		,@EasyDictionary
		,@MediumDictionary
		,@HardDictionary
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @HPID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPic_Update]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGHiddenPic_Update] (
	 @HPID int 
	,@MGID int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@EasyDictionary text 
	,@MediumDictionary text 
	,@HardDictionary text 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGHiddenPic
	Set 
		MGID =  @MGID
		,EnableMediumDifficulty =  @EnableMediumDifficulty
		,EnableHardDifficulty =  @EnableHardDifficulty
		,EasyDictionary =  @EasyDictionary
		,MediumDictionary =  @MediumDictionary
		,HardDictionary =  @HardDictionary
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where HPID = @HPID



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPicBk_Delete]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGHiddenPicBk_Delete]
@HPBID int 
AS
   Delete from [MGHiddenPicBk] Where HPBID = @HPBID



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPicBk_GetAll]    Script Date: 03/10/2014 14:43:21 ******/








CREATE PROCEDURE [dbo].[app_MGHiddenPicBk_GetAll]
@MGID int = 0
AS 
   Select * from MGHiddenPicBk Where MGID = @MGID 





; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPicBk_GetByID]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGHiddenPicBk_GetByID]
@HPBID int 
AS
   Select * from [MGHiddenPicBk] Where HPBID = @HPBID



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPicBk_GetByIDWithParent]    Script Date: 03/10/2014 14:43:21 ******/






create PROCEDURE [dbo].[app_MGHiddenPicBk_GetByIDWithParent]
@MGID int 
AS
   Select 
	mg.*, 
	MiniGameTypeName, AdminName, GameName, isActive,NumberPoints, AwardedBadgeID
	from MGHiddenPicBk  mg 
		inner join dbo.Minigame g on mg.MGID = g.MGID
	Where g.MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPicBk_GetByMGID]    Script Date: 03/10/2014 14:43:21 ******/







create PROCEDURE [dbo].[app_MGHiddenPicBk_GetByMGID]
@MGID int 
AS
   Select * from MGHiddenPicBk Where MGID = @MGID
   



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPicBk_Insert]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGHiddenPicBk_Insert] (
	 @HPID int 
	,@MGID int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@HPBID int output 
) AS
Begin
	Insert into MGHiddenPicBk
		(HPID
		,MGID
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@HPID
		,@MGID
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @HPBID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGHiddenPicBk_Update]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGHiddenPicBk_Update] (
	 @HPBID int 
	,@HPID int 
	,@MGID int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGHiddenPicBk
	Set 
		HPID =  @HPID
		,MGID =  @MGID
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where HPBID = @HPBID



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGame_Delete]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGMatchingGame_Delete]
@MAGID int 
AS
   Delete from [MGMatchingGame] Where MAGID = @MAGID



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGame_GetAll]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGMatchingGame_GetAll]
AS
   Select * from [MGMatchingGame]



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGame_GetByID]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGMatchingGame_GetByID]
@MAGID int 
AS
   Select * from [MGMatchingGame] Where MAGID = @MAGID



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGame_GetByIDWithParent]    Script Date: 03/10/2014 14:43:21 ******/






create PROCEDURE [dbo].[app_MGMatchingGame_GetByIDWithParent]
@MGID int 
AS
   Select 
	mg.*, 
	MiniGameTypeName, AdminName, GameName, isActive,NumberPoints, AwardedBadgeID
	from MGMatchingGame  mg 
		inner join dbo.Minigame g on mg.MGID = g.MGID
	Where g.MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGame_GetByMGID]    Script Date: 03/10/2014 14:43:21 ******/







create PROCEDURE [dbo].[app_MGMatchingGame_GetByMGID]
@MGID int 
AS
   Select * from MGMatchingGame Where MGID = @MGID
   



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGame_GetRandomPlayItems]    Script Date: 03/10/2014 14:43:21 ******/







CREATE PROCEDURE [dbo].[app_MGMatchingGame_GetRandomPlayItems]
@MAGID int
, @NumItems int
, @Difficulty int 
AS

declare @SQL varchar(8000)

CREATE TABLE #Temp1(
	[ID] uniqueidentifier ,
	[MAGTID] [int]  ,
	[MAGID] [int],
	[MGID] [int] ,
	[Tile1UseMedium] [bit] ,
	[Tile1UseHard] [bit] ,
	[Tile2UseMedium] [bit] ,
	[Tile2UseHard] [bit] ,
	[Tile3UseMedium] [bit] ,
	[Tile3UseHard] [bit] 
)

CREATE TABLE #Temp2( [MAGTID] [int], TileImage varchar(255))
	
select @SQL = 
	'insert into #Temp1 
	select top ' + convert(varchar,@NumItems) + ' NEWID() as ID, 
		[MAGTID], [MAGID], [MGID], [Tile1UseMedium], [Tile1UseHard], [Tile2UseMedium], [Tile2UseHard], [Tile3UseMedium],[Tile3UseHard]   from  dbo.MGMatchingGameTiles Where MAGID = ' + convert(varchar,@MAGID) + '  order by id'
EXEC(@SQL)

--select * from #Temp1 

insert into #Temp2
select MAGTID, 
	('md_t1_' + CONVERT(varchar, MAGTID) + '.png') as TileImage

from #Temp1

insert into #Temp2
select MAGTID, 
	(case 
		when @Difficulty = 1 
			then 'md_t1_' + CONVERT(varchar, MAGTID) + '.png'
			
		when @Difficulty = 2 AND Tile1UseMedium = 1 and Tile2UseMedium =  0  
			then 'md_t1_' + CONVERT(varchar, MAGTID) + '.png'
		when @Difficulty = 2 AND Tile2UseMedium = 1   
			then 'md_t2_' + CONVERT(varchar, MAGTID) + '.png'		
			
		when @Difficulty = 3 AND Tile2UseHard = 0 and Tile3UseHard =  0  
			then 'md_t1_' + CONVERT(varchar, MAGTID) + '.png'
		when @Difficulty = 3 AND Tile2UseHard = 1 and Tile3UseHard =  0  
			then 'md_t2_' + CONVERT(varchar, MAGTID) + '.png'					
		when @Difficulty = 3 AND  Tile3UseHard =  1  
			then 'md_t3_' + CONVERT(varchar, MAGTID) + '.png'
	end ) as TileImage
from #Temp1 



select NEWID() as ID, * from #Temp2 Order By ID
drop table #Temp1
drop table #Temp2



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGame_Insert]    Script Date: 03/10/2014 14:43:21 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGMatchingGame_Insert] (
	 @MGID int 
	,@CorrectRoundsToWinCount int 
	,@EasyGameSize int 
	,@MediumGameSize int 
	,@HardGameSize int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@MAGID int output 
) AS
Begin
	Insert into MGMatchingGame
		(MGID
		,CorrectRoundsToWinCount
		,EasyGameSize
		,MediumGameSize
		,HardGameSize
		,EnableMediumDifficulty
		,EnableHardDifficulty
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MGID
		,@CorrectRoundsToWinCount
		,@EasyGameSize
		,@MediumGameSize
		,@HardGameSize
		,@EnableMediumDifficulty
		,@EnableHardDifficulty
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @MAGID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGame_Update]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGMatchingGame_Update] (
	 @MAGID int 
	,@MGID int 
	,@CorrectRoundsToWinCount int 
	,@EasyGameSize int 
	,@MediumGameSize int 
	,@HardGameSize int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGMatchingGame
	Set 
		MGID =  @MGID
		,CorrectRoundsToWinCount =  @CorrectRoundsToWinCount
		,EasyGameSize =  @EasyGameSize
		,MediumGameSize =  @MediumGameSize
		,HardGameSize =  @HardGameSize
		,EnableMediumDifficulty =  @EnableMediumDifficulty
		,EnableHardDifficulty =  @EnableHardDifficulty
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where MAGID = @MAGID



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGameTiles_Delete]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGMatchingGameTiles_Delete]
@MAGTID int 
AS
   Delete from [MGMatchingGameTiles] Where MAGTID = @MAGTID



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGameTiles_GetAll]    Script Date: 03/10/2014 14:43:22 ******/








CREATE PROCEDURE [dbo].[app_MGMatchingGameTiles_GetAll]
@MGID int = 0
AS 
   Select * from MGMatchingGameTiles Where MGID = @MGID 




; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGameTiles_GetByID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGMatchingGameTiles_GetByID]
@MAGTID int 
AS
   Select * from [MGMatchingGameTiles] Where MAGTID = @MAGTID



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGameTiles_Insert]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGMatchingGameTiles_Insert] (
	 @MAGID int 
	,@MGID int 
	,@Tile1UseMedium bit 
	,@Tile1UseHard bit 
	,@Tile2UseMedium bit 
	,@Tile2UseHard bit 
	,@Tile3UseMedium bit 
	,@Tile3UseHard bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@MAGTID int output 
) AS
Begin
	Insert into MGMatchingGameTiles
		(MAGID
		,MGID
		,Tile1UseMedium
		,Tile1UseHard
		,Tile2UseMedium
		,Tile2UseHard
		,Tile3UseMedium
		,Tile3UseHard
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MAGID
		,@MGID
		,@Tile1UseMedium
		,@Tile1UseHard
		,@Tile2UseMedium
		,@Tile2UseHard
		,@Tile3UseMedium
		,@Tile3UseHard
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @MAGTID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGMatchingGameTiles_Update]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGMatchingGameTiles_Update] (
	 @MAGTID int 
	,@MAGID int 
	,@MGID int 
	,@Tile1UseMedium bit 
	,@Tile1UseHard bit 
	,@Tile2UseMedium bit 
	,@Tile2UseHard bit 
	,@Tile3UseMedium bit 
	,@Tile3UseHard bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGMatchingGameTiles
	Set 
		MAGID =  @MAGID
		,MGID =  @MGID
		,Tile1UseMedium =  @Tile1UseMedium
		,Tile1UseHard =  @Tile1UseHard
		,Tile2UseMedium =  @Tile2UseMedium
		,Tile2UseHard =  @Tile2UseHard
		,Tile3UseMedium =  @Tile3UseMedium
		,Tile3UseHard =  @Tile3UseHard
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where MAGTID = @MAGTID



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatch_Delete]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatch_Delete]
@MMID int 
AS
   Delete from [MGMixAndMatch] Where MMID = @MMID



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatch_GetAll]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatch_GetAll]
AS
   Select * from [MGMixAndMatch]



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatch_GetByID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatch_GetByID]
@MMID int 
AS
   Select * from [MGMixAndMatch] Where MMID = @MMID



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatch_GetByIDWithParent]    Script Date: 03/10/2014 14:43:22 ******/






create PROCEDURE [dbo].[app_MGMixAndMatch_GetByIDWithParent]
@MGID int 
AS
   Select 
	mm.*, 
	MiniGameTypeName, AdminName, GameName, isActive,NumberPoints, AwardedBadgeID
	from MGMixAndMatch  mm 
		inner join dbo.Minigame g on mm.MGID = g.MGID
	Where g.MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatch_GetByMGID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatch_GetByMGID]
@MGID int 
AS
   Select * from [MGMixAndMatch] Where MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatch_Insert]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatch_Insert] (
	 @MGID int 
	,@CorrectRoundsToWinCount int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@MMID int output 
) AS
Begin
	Insert into MGMixAndMatch
		(MGID
		,CorrectRoundsToWinCount
		,EnableMediumDifficulty
		,EnableHardDifficulty
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MGID
		,@CorrectRoundsToWinCount
		,@EnableMediumDifficulty
		,@EnableHardDifficulty
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @MMID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatch_Update]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatch_Update] (
	 @MMID int 
	,@MGID int 
	,@CorrectRoundsToWinCount int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGMixAndMatch
	Set 
		MGID =  @MGID
		,CorrectRoundsToWinCount =  @CorrectRoundsToWinCount
		,EnableMediumDifficulty =  @EnableMediumDifficulty
		,EnableHardDifficulty =  @EnableHardDifficulty
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where MMID = @MMID



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatchItems_Delete]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatchItems_Delete]
@MMIID int 
AS
   Delete from [MGMixAndMatchItems] Where MMIID = @MMIID



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatchItems_GetAll]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatchItems_GetAll]
@MGID int = 0
AS 
   Select * from [MGMixAndMatchItems] Where MGID = @MGID 



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatchItems_GetByID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatchItems_GetByID]
@MMIID int 
AS
   Select * from [MGMixAndMatchItems] Where MMIID = @MMIID



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatchItems_GetRandom3]    Script Date: 03/10/2014 14:43:22 ******/







create PROCEDURE [dbo].[app_MGMixAndMatchItems_GetRandom3]
@MMID int 
AS
	select top 3	
		NEWID() as id, *
	from  dbo.MGMixAndMatchItems
		Where MMID = @MMID
	order by id



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatchItems_Insert]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatchItems_Insert] (
	 @MMID int 
	,@MGID int 
	,@ItemImage varchar (150)
	,@EasyLabel varchar (150)
	,@MediumLabel varchar (150)
	,@HardLabel varchar (150)
	,@AudioEasy varchar (150)
	,@AudioMedium varchar (150)
	,@AudioHard varchar (150)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@MMIID int output 
) AS
Begin
	Insert into MGMixAndMatchItems
		(MMID
		,MGID
		,ItemImage
		,EasyLabel
		,MediumLabel
		,HardLabel
		,AudioEasy
		,AudioMedium
		,AudioHard
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MMID
		,@MGID
		,@ItemImage
		,@EasyLabel
		,@MediumLabel
		,@HardLabel
		,@AudioEasy
		,@AudioMedium
		,@AudioHard
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @MMIID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGMixAndMatchItems_Update]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGMixAndMatchItems_Update] (
	 @MMIID int 
	,@MMID int 
	,@MGID int 
	,@ItemImage varchar (150)
	,@EasyLabel varchar (150)
	,@MediumLabel varchar (150)
	,@HardLabel varchar (150)
	,@AudioEasy varchar (150)
	,@AudioMedium varchar (150)
	,@AudioHard varchar (150)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGMixAndMatchItems
	Set 
		MMID =  @MMID
		,MGID =  @MGID
		,ItemImage =  @ItemImage
		,EasyLabel =  @EasyLabel
		,MediumLabel =  @MediumLabel
		,HardLabel =  @HardLabel
		,AudioEasy =  @AudioEasy
		,AudioMedium =  @AudioMedium
		,AudioHard =  @AudioHard
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where MMIID = @MMIID



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBook_Delete]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBook_Delete]
@OBID int 
AS
   Delete from [MGOnlineBook] Where OBID = @OBID



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBook_GetAll]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBook_GetAll]
AS
   Select * from [MGOnlineBook]



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBook_GetByID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBook_GetByID]
@OBID int 
AS
   Select * from [MGOnlineBook] Where OBID = @OBID



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBook_GetByIDWithParent]    Script Date: 03/10/2014 14:43:22 ******/






CREATE PROCEDURE [dbo].[app_MGOnlineBook_GetByIDWithParent]
@MGID int 
AS
   Select 
	ob.*, 
	MiniGameTypeName, AdminName, GameName, isActive,NumberPoints, AwardedBadgeID
	from [MGOnlineBook] ob 
		inner join dbo.Minigame g on ob.MGID = g.MGID
	Where g.MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBook_GetByMGID]    Script Date: 03/10/2014 14:43:22 ******/







create PROCEDURE [dbo].[app_MGOnlineBook_GetByMGID]
@MGID int 
AS
   Select * from [MGOnlineBook] Where MGID = @MGID


; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBook_Insert]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBook_Insert] (
	 @MGID int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@OBID int output 
) AS
Begin
	Insert into MGOnlineBook
		(MGID
		,EnableMediumDifficulty
		,EnableHardDifficulty
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MGID
		,@EnableMediumDifficulty
		,@EnableHardDifficulty
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @OBID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBook_Update]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBook_Update] (
	 @OBID int 
	,@MGID int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGOnlineBook
	Set 
		MGID =  @MGID
		,EnableMediumDifficulty =  @EnableMediumDifficulty
		,EnableHardDifficulty =  @EnableHardDifficulty
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where OBID = @OBID



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBookPages_Delete]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBookPages_Delete]
@OBPGID int 
AS
  Declare @MGID int
  Select @MGID = MGID from [MGOnlineBookPages] Where OBPGID = @OBPGID

   Delete from [MGOnlineBookPages] Where OBPGID = @OBPGID
   
   exec app_MGOnlineBookPages_Reorder @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBookPages_GetAll]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBookPages_GetAll]
@MGID int = 0
AS
   Select * 
   , (Select isnull(Max(PageNumber),1) from [MGOnlineBookPages] where MGID = @MGID)  as MAX
	from [MGOnlineBookPages] 
   Where MGID = @MGID order by PageNumber



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBookPages_GetByID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBookPages_GetByID]
@OBPGID int 
AS
   Select * from [MGOnlineBookPages] Where OBPGID = @OBPGID order by PageNumber



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBookPages_GetByPage]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBookPages_GetByPage]
@Page int
,@OBID int 
AS
   Select * from [MGOnlineBookPages] Where PageNumber = @Page and OBID = @OBID  
   



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBookPages_Insert]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBookPages_Insert] (
	 @OBID int 
	,@MGID int 
	,@PageNumber int 
	,@TextEasy text 
	,@TextMedium text 
	,@TextHard text 
	,@AudioEasy varchar (150)
	,@AudioMedium varchar (150)
	,@AudioHard varchar (150)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@OBPGID int output 
) AS
Begin
	Insert into MGOnlineBookPages
		(OBID
		,MGID
		,PageNumber
		,TextEasy
		,TextMedium
		,TextHard
		,AudioEasy
		,AudioMedium
		,AudioHard
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@OBID
		,@MGID
		,(Select isnull(Max(PageNumber),0) +1 from MGOnlineBookPages where MGID = @MGID)
		,@TextEasy
		,@TextMedium
		,@TextHard
		,@AudioEasy
		,@AudioMedium
		,@AudioHard
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @OBPGID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBookPages_MoveDn]    Script Date: 03/10/2014 14:43:22 ******/








create PROCEDURE [dbo].[app_MGOnlineBookPages_MoveDn]
@OBPGID int 
AS

	Declare @CurrentRecordLocation int, @NextRecordID int, @MGID int
	Select @CurrentRecordLocation = PageNumber, @MGID = MGID from MGOnlineBookPages where OBPGID = @OBPGID
	exec [dbo].[app_MGOnlineBookPages_Reorder] @MGID
	if @CurrentRecordLocation < (Select MAX(PageNumber) from MGOnlineBookPages where MGID = @MGID)
	begin
		Select @NextRecordID = OBPGID from MGOnlineBookPages where PageNumber = (@CurrentRecordLocation + 1) AND MGID = @MGID
		
		update MGOnlineBookPages set PageNumber = @CurrentRecordLocation + 1
		where OBPGID = @OBPGID
	
		update MGOnlineBookPages set PageNumber = @CurrentRecordLocation 
		where OBPGID = @NextRecordID
	end





; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBookPages_MoveUp]    Script Date: 03/10/2014 14:43:22 ******/






create PROCEDURE [dbo].[app_MGOnlineBookPages_MoveUp]
@OBPGID int 
AS
	Declare @CurrentRecordLocation int, @PreviousRecordID int, @MGID int
	Select @CurrentRecordLocation = PageNumber, @MGID = MGID from MGOnlineBookPages where OBPGID = @OBPGID
	exec [dbo].[app_MGOnlineBookPages_Reorder] @MGID
	if @CurrentRecordLocation > 1
	begin
		Select @PreviousRecordID = OBPGID from MGOnlineBookPages where PageNumber = (@CurrentRecordLocation - 1) AND MGID = @MGID
		
		update MGOnlineBookPages set PageNumber = @CurrentRecordLocation - 1
		where OBPGID = @OBPGID
	
		update MGOnlineBookPages set PageNumber = @CurrentRecordLocation 
		where OBPGID = @PreviousRecordID
	end




; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBookPages_Reorder]    Script Date: 03/10/2014 14:43:22 ******/








create Procedure [dbo].[app_MGOnlineBookPages_Reorder]
@MGID int 
AS
	UPDATE MGOnlineBookPages 
	SET PageNumber = rowNumber 
	FROM MGOnlineBookPages
		INNER JOIN 
		(SELECT OBPGID, PageNumber, row_number() OVER (ORDER BY PageNumber Asc) as rowNumber
			FROM MGOnlineBookPages) drRowNumbers ON drRowNumbers.OBPGID = MGOnlineBookPages.OBPGID and MGID = @MGID
	




; /****** Object:  StoredProcedure [dbo].[app_MGOnlineBookPages_Update]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGOnlineBookPages_Update] (
	 @OBPGID int 
	,@OBID int 
	,@MGID int 
	,@PageNumber int 
	,@TextEasy text 
	,@TextMedium text 
	,@TextHard text 
	,@AudioEasy varchar (150)
	,@AudioMedium varchar (150)
	,@AudioHard varchar (150)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGOnlineBookPages
	Set 
		OBID =  @OBID
		,MGID =  @MGID
		,PageNumber =  @PageNumber
		,TextEasy =  @TextEasy
		,TextMedium =  @TextMedium
		,TextHard =  @TextHard
		,AudioEasy =  @AudioEasy
		,AudioMedium =  @AudioMedium
		,AudioHard =  @AudioHard
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where OBPGID = @OBPGID



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatch_Delete]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGWordMatch_Delete]
@WMID int 
AS
   Delete from [MGWordMatch] Where WMID = @WMID



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatch_GetAll]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGWordMatch_GetAll]
AS
   Select * from [MGWordMatch]



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatch_GetByID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGWordMatch_GetByID]
@WMID int 
AS
   Select * from [MGWordMatch] Where WMID = @WMID



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatch_GetByIDWithParent]    Script Date: 03/10/2014 14:43:22 ******/






create PROCEDURE [dbo].[app_MGWordMatch_GetByIDWithParent]
@MGID int 
AS
   Select 
	mm.*, 
	MiniGameTypeName, AdminName, GameName, isActive,NumberPoints, AwardedBadgeID
	from MGWordMatch  mm 
		inner join dbo.Minigame g on mm.MGID = g.MGID
	Where g.MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatch_GetByMGID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
create PROCEDURE [dbo].[app_MGWordMatch_GetByMGID]
@MGID int 
AS
   Select * from [MGWordMatch] Where MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatch_GetRandomX]    Script Date: 03/10/2014 14:43:22 ******/








CREATE PROCEDURE [dbo].[app_MGWordMatch_GetRandomX]
 @WMID int
,@Num int = 3
AS

declare @SQL varchar(8000)

select @SQL = 
	'select top ' + convert(varchar,@Num) + ' NEWID() as id, * from  dbo.MGWordMatchItems Where WMID = ' + convert(varchar,@WMID) + '  order by id'
	
	
EXEC(@SQL)



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatch_Insert]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGWordMatch_Insert] (
	 @MGID int 
	,@CorrectRoundsToWinCount int 
	,@NumOptionsToChooseFrom int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@WMID int output 
) AS
Begin
	Insert into MGWordMatch
		(MGID
		,CorrectRoundsToWinCount
		,NumOptionsToChooseFrom
		,EnableMediumDifficulty
		,EnableHardDifficulty
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MGID
		,@CorrectRoundsToWinCount
		,@NumOptionsToChooseFrom
		,@EnableMediumDifficulty
		,@EnableHardDifficulty
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @WMID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatch_Update]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGWordMatch_Update] (
	 @WMID int 
	,@MGID int 
	,@CorrectRoundsToWinCount int 
	,@NumOptionsToChooseFrom int 
	,@EnableMediumDifficulty bit 
	,@EnableHardDifficulty bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGWordMatch
	Set 
		MGID =  @MGID
		,CorrectRoundsToWinCount =  @CorrectRoundsToWinCount
		,NumOptionsToChooseFrom =  @NumOptionsToChooseFrom
		,EnableMediumDifficulty =  @EnableMediumDifficulty
		,EnableHardDifficulty =  @EnableHardDifficulty
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where WMID = @WMID



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatchItems_Delete]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_MGWordMatchItems_Delete]
@WMIID int 
AS
   Delete from [MGWordMatchItems] Where WMIID = @WMIID



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatchItems_GetAll]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGWordMatchItems_GetAll]
@MGID int
AS
   Select * from [MGWordMatchItems]
	where MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatchItems_GetByID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_MGWordMatchItems_GetByID]
@WMIID int 
AS
   Select * from [MGWordMatchItems] Where WMIID = @WMIID



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatchItems_Insert]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_MGWordMatchItems_Insert] (
	 @WMID int 
	,@MGID int 
	,@ItemImage varchar (150)
	,@EasyLabel varchar (150)
	,@MediumLabel varchar (150)
	,@HardLabel varchar (150)
	,@AudioEasy varchar (150)
	,@AudioMedium varchar (150)
	,@AudioHard varchar (150)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@WMIID int output 
) AS
Begin
	Insert into MGWordMatchItems
		(WMID
		,MGID
		,ItemImage
		,EasyLabel
		,MediumLabel
		,HardLabel
		,AudioEasy
		,AudioMedium
		,AudioHard
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@WMID
		,@MGID
		,@ItemImage
		,@EasyLabel
		,@MediumLabel
		,@HardLabel
		,@AudioEasy
		,@AudioMedium
		,@AudioHard
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @WMIID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_MGWordMatchItems_Update]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_MGWordMatchItems_Update] (
	 @WMIID int 
	,@WMID int 
	,@MGID int 
	,@ItemImage varchar (150)
	,@EasyLabel varchar (150)
	,@MediumLabel varchar (150)
	,@HardLabel varchar (150)
	,@AudioEasy varchar (150)
	,@AudioMedium varchar (150)
	,@AudioHard varchar (150)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update MGWordMatchItems
	Set 
		WMID =  @WMID
		,MGID =  @MGID
		,ItemImage =  @ItemImage
		,EasyLabel =  @EasyLabel
		,MediumLabel =  @MediumLabel
		,HardLabel =  @HardLabel
		,AudioEasy =  @AudioEasy
		,AudioMedium =  @AudioMedium
		,AudioHard =  @AudioHard
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where WMIID = @WMIID



; /****** Object:  StoredProcedure [dbo].[app_Minigame_Delete]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_Minigame_Delete]
@MGID int 
AS

	delete from dbo.MGOnlineBookPages  Where MGID = @MGID
	delete from dbo.MGOnlineBook  Where MGID = @MGID
	delete from dbo.MGMixAndMatchItems  Where MGID = @MGID
	delete from dbo.MGMixAndMatch  Where MGID = @MGID
	delete from dbo.MGCodeBreakerKey  Where MGID = @MGID
	delete from dbo.MGCodeBreaker  Where MGID = @MGID
	delete from dbo.MGMatchingGameTiles  Where MGID = @MGID
	delete from dbo.MGMatchingGame  Where MGID = @MGID
	delete from dbo.MGHiddenPicBk  Where MGID = @MGID
	delete from dbo.MGHiddenPic  Where MGID = @MGID
	delete from dbo.MGChooseAdvSlides  Where MGID = @MGID
	delete from dbo.MGChooseAdv  Where MGID = @MGID
	
Delete from [Minigame] Where MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_Minigame_GetAll]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Minigame_GetAll]
AS
   Select * from [Minigame]



; /****** Object:  StoredProcedure [dbo].[app_Minigame_GetByID]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Minigame_GetByID]
@MGID int 
AS
   Select * from [Minigame] Where MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_Minigame_Insert]    Script Date: 03/10/2014 14:43:22 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_Minigame_Insert] (
	 @MiniGameType int 
	,@MiniGameTypeName varchar (50)
	,@AdminName varchar (50)
	,@GameName varchar (50)
	,@isActive bit 
	,@NumberPoints int 
	,@AwardedBadgeID int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@MGID int output 
) AS
Begin
	Insert into Minigame
		(MiniGameType
		,MiniGameTypeName
		,AdminName
		,GameName
		,isActive
		,NumberPoints
		,AwardedBadgeID
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@MiniGameType
		,@MiniGameTypeName
		,@AdminName
		,@GameName
		,@isActive
		,@NumberPoints
		,@AwardedBadgeID
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @MGID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_Minigame_Update]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_Minigame_Update] (
	 @MGID int 
	,@MiniGameType int 
	,@MiniGameTypeName varchar (50)
	,@AdminName varchar (50)
	,@GameName varchar (50)
	,@isActive bit 
	,@NumberPoints int 
	,@AwardedBadgeID int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update Minigame
	Set 
		MiniGameType =  @MiniGameType
		,MiniGameTypeName =  @MiniGameTypeName
		,AdminName =  @AdminName
		,GameName =  @GameName
		,isActive =  @isActive
		,NumberPoints =  @NumberPoints
		,AwardedBadgeID =  @AwardedBadgeID
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where MGID = @MGID



; /****** Object:  StoredProcedure [dbo].[app_Notifications_Delete]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_Notifications_Delete]
@NID int 
AS
   Delete from [Notifications] Where NID = @NID



; /****** Object:  StoredProcedure [dbo].[app_Notifications_GetAll]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Notifications_GetAll]
AS
   Select * from [Notifications] order by AddedDate desc



; /****** Object:  StoredProcedure [dbo].[app_Notifications_GetAllFromPatron]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Notifications_GetAllFromPatron]
@PID int 
AS
   Select * from [Notifications] Where PID_From = @PID order by AddedDate desc



; /****** Object:  StoredProcedure [dbo].[app_Notifications_GetAllToPatron]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Notifications_GetAllToPatron]
@PID int 
AS
   Select n.*, isnull(p1.Username,'System') as ToUsername, isnull(p1.FirstName,'System') as ToFistName, isnull(p1.LastName,'System') as ToLastName
		, isnull(p2.Username,'System') as FromUsername, isnull(p2.FirstName,'System') as FromFistName, isnull(p2.LastName,'System') as FromLastName
   
   from [Notifications] n left outer join Patron p1
	on n.PID_To = p1.pid
		left outer join Patron p2
	on n.PID_From = p2.pid
   Where PID_To = @PID order by AddedDate desc





; /****** Object:  StoredProcedure [dbo].[app_Notifications_GetByID]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Notifications_GetByID]
@NID int 
AS
   Select * from [Notifications] Where NID = @NID



; /****** Object:  StoredProcedure [dbo].[app_Notifications_Insert]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_Notifications_Insert] (
	 @PID_To int 
	,@PID_From int 
	,@isQuestion bit 
	,@Subject varchar (150)
	,@Body text 
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@NID int output 
) AS
Begin
	Insert into Notifications
		(PID_To
		,PID_From
		,isQuestion
		,Subject
		,Body
		,AddedDate
		,AddedUser
		,LastModDate
		,LastModUser
)
	VALUES
		(@PID_To
		,@PID_From
		,@isQuestion
		,@Subject
		,@Body
		,@AddedDate
		,@AddedUser
		,@LastModDate
		,@LastModUser
)
	Select @NID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_Notifications_Update]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_Notifications_Update] (
	 @NID int 
	,@PID_To int 
	,@PID_From int 
	,@isQuestion bit 
	,@Subject varchar (150)
	,@Body text 
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@LastModDate datetime 
	,@LastModUser varchar (50)

) AS
	Update Notifications
	Set 
		PID_To =  @PID_To
		,PID_From =  @PID_From
		,isQuestion =  @isQuestion
		,Subject =  @Subject
		,Body =  @Body
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser

	Where NID = @NID



; /****** Object:  StoredProcedure [dbo].[app_Offer_Delete]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_Offer_Delete]
@OID int 
AS
   Delete from [Offer] Where OID = @OID



; /****** Object:  StoredProcedure [dbo].[app_Offer_GetAll]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Offer_GetAll]
AS
   Select * 
   , (select AdminName from dbo.Programs p where o.ProgramId = p.PID ) as Program
   , (select Code from dbo.Code c where o.BranchId = c.CID ) as Branch
   from [Offer] o



; /****** Object:  StoredProcedure [dbo].[app_Offer_GetByID]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Offer_GetByID]
@OID int 
AS
   Select * from [Offer] Where OID = @OID



; /****** Object:  StoredProcedure [dbo].[app_Offer_Insert]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_Offer_Insert] (
	 @isEnabled bit 
	,@AdminName varchar (50)
	,@Title varchar (150)
	,@ExternalRedirectFlag bit 
	,@RedirectURL varchar (150)
	,@MaxImpressions int 
	,@TotalImpressions int 
	,@SerialPrefix varchar (50)
	,@ZipCode varchar (5)
	,@AgeStart int 
	,@AgeEnd int 
	,@ProgramId int 
	,@BranchId int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@OID int output 
) AS
Begin
	Insert into Offer
		(isEnabled
		,AdminName
		,Title
		,ExternalRedirectFlag
		,RedirectURL
		,MaxImpressions
		,TotalImpressions
		,SerialPrefix
		,ZipCode
		,AgeStart
		,AgeEnd
		,ProgramId
		,BranchId
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@isEnabled
		,@AdminName
		,@Title
		,@ExternalRedirectFlag
		,@RedirectURL
		,@MaxImpressions
		,@TotalImpressions
		,@SerialPrefix
		,@ZipCode
		,@AgeStart
		,@AgeEnd
		,@ProgramId
		,@BranchId
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @OID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_Offer_Update]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_Offer_Update] (
	 @OID int 
	,@isEnabled bit 
	,@AdminName varchar (50)
	,@Title varchar (150)
	,@ExternalRedirectFlag bit 
	,@RedirectURL varchar (150)
	,@MaxImpressions int 
	,@TotalImpressions int 
	,@SerialPrefix varchar (50)
	,@ZipCode varchar (5)
	,@AgeStart int 
	,@AgeEnd int 
	,@ProgramId int 
	,@BranchId int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update Offer
	Set 
		isEnabled =  @isEnabled
		,AdminName =  @AdminName
		,Title =  @Title
		,ExternalRedirectFlag =  @ExternalRedirectFlag
		,RedirectURL =  @RedirectURL
		,MaxImpressions =  @MaxImpressions
		,TotalImpressions =  @TotalImpressions
		,SerialPrefix =  @SerialPrefix
		,ZipCode =  @ZipCode
		,AgeStart =  @AgeStart
		,AgeEnd =  @AgeEnd
		,ProgramId =  @ProgramId
		,BranchId =  @BranchId
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where OID = @OID



; /****** Object:  StoredProcedure [dbo].[app_Offers_GetForDisplay]    Script Date: 03/10/2014 14:43:23 ******/






CREATE PROCEDURE [dbo].[app_Offers_GetForDisplay]
@PID  int = 0
AS

--declare @PID int
--select @PID = 100000

declare @Zip varchar(20)
declare @Age int, @ProgramId int, @BranchId int

select @Age = isnull(Age,0) , @Zip = isnull(ZipCode,''), @ProgramId = isnull(ProgID,0), @BranchId = isnull(PrimaryLibrary,0)
from Patron
where PID = @PID
----------------------------------------------------------
--select @Age, @Zip, @Age-36, @ProgramId, @BranchId
--select  o.* 
--from Offer o
----------------------------------------------------------

	
select *
	into #temp
	from Offer
		where Offer.isEnabled = 1  AND (Offer.MaxImpressions = 0 or Offer.MaxImpressions > Offer.TotalImpressions)

delete from #temp
where 
	AgeStart > 0 and AgeEnd = 0 and @Age < AgeStart	
delete from #temp
where 
	AgeEnd > 0 and AgeStart = 0 and @Age > AgeEnd	
delete from #temp
where 
	AgeEnd > 0 and AgeStart > 0 and (@Age < AgeStart or @Age > AgeEnd)
delete from #temp
where 
	ProgramId <> 0 and ProgramId <> @ProgramId	
if @BranchId <> 0 
	delete from #temp
	where 
		BranchId <> 0 and BranchId <> @BranchId	
if @Zip	<> ''
	delete from #temp
	where 
		ZipCode <> '' and ZipCode <> left(@Zip,5)	

select ROW_NUMBER() over (order by OID) as Rank, 
	* 
from #temp	




; /****** Object:  StoredProcedure [dbo].[app_Patron_CanManageSubAccount]    Script Date: 03/10/2014 14:43:23 ******/






CREATE PROCEDURE [dbo].[app_Patron_CanManageSubAccount]							
	@MainAccount	int=0
  , @SubAccount		int=0

AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	Declare   @Count int
			, @UID int
 
	SELECT 
		  @Count = isnull(Count(*),0)
	FROM
		dbo.Patron
	WHERE
			 PID = @SubAccount
		 AND MasterAcctPID = @MainAccount
		
	GROUP BY PID
	
	IF @Count = 0 OR @Count is null
	BEGIN
		select 0
	END
	ELSE
	BEGIN
		select 1
	END
	return 0




; /****** Object:  StoredProcedure [dbo].[app_Patron_Delete]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_Patron_Delete]
@PID int 
AS
   Delete from [Patron] Where PID = @PID



; /****** Object:  StoredProcedure [dbo].[app_Patron_GetAll]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Patron_GetAll]
AS
   Select p.*, pg.AdminName as Program
   from [Patron] p 
			left outer join Programs pg
				on p.ProgID = pg.PID



; /****** Object:  StoredProcedure [dbo].[app_Patron_GetByEmail]    Script Date: 03/10/2014 14:43:23 ******/






create PROCEDURE [dbo].[app_Patron_GetByEmail]
	@Email		varchar(50)
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT *
	FROM Patron
	WHERE 
		EmailAddress = @Email



; /****** Object:  StoredProcedure [dbo].[app_Patron_GetByID]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Patron_GetByID]
@PID int 
AS
   Select * from [Patron] Where PID = @PID



; /****** Object:  StoredProcedure [dbo].[app_Patron_GetByUsername]    Script Date: 03/10/2014 14:43:23 ******/






------------------------------------------------------------------------
create PROCEDURE [dbo].[app_Patron_GetByUsername]
	@Username		varchar(50)
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT *
	FROM Patron
	WHERE 
		Username = @Username



; /****** Object:  StoredProcedure [dbo].[app_Patron_GetPatronForEdit]    Script Date: 03/10/2014 14:43:23 ******/






CREATE PROCEDURE [dbo].[app_Patron_GetPatronForEdit]							
	@PID	int=0
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT 
	isNull(p.[PID], 0) as PID, 
	isNull(p.[IsMasterAccount], 0) as IsMasterAccount,
	isNull(p.MasterAcctPID, 0) as  [MasterAcctPID] , 
	isNull(p.Username, '') as  [Username] , 
	isNull(p.Password, '') as  [Password] , 
	isNull(p.DOB, null) as  [DOB] , 
	isNull(p.Age, '') as  [Age] , 
	isNull(p.SchoolGrade, '') as  [SchoolGrade] , 
	isNull(p.ProgID, 0) as  [ProgID] , 
	isNull(p.FirstName, '') as  [FirstName] , 
	isNull(p.MiddleName, '') as  [MiddleName] , 
	isNull(p.LastName, '') as  [LastName] , 
	isNull(p.Gender, '') as    [Gender]   , 
	isNull(p.EmailAddress, '') as   [EmailAddress]  , 
	isNull(p.PhoneNumber, '') as   [PhoneNumber]  , 
	isNull(p.StreetAddress1, '') as   [StreetAddress1]  , 
	isNull(p.StreetAddress2, '') as    [StreetAddress2]   , 
	isNull(p.City, '') as   [City]  , 
	isNull(p.State, '') as   [State]  , 
	isNull(p.ZipCode, '') as   [ZipCode]  , 
	isNull(p.Country, '') as  [Country] , 
	isNull(p.County, '') as  [County] , 
	isNull(p.ParentGuardianFirstName, '') as  [ParentGuardianFirstName] , 
	isNull(p.ParentGuardianLastName, '') as  [ParentGuardianLastName] , 
	isNull(p.ParentGuardianMiddleName, '') as  [ParentGuardianMiddleName] , 
	isNull(p.PrimaryLibrary, 0) as  [PrimaryLibrary] , 
	isNull(p.LibraryCard, '') as   [LibraryCard]  , 
	isNull(p.SchoolName, '') as  [SchoolName] , 
	isNull(p.District, '') as  [District] , 
	isNull(p.Teacher, '') as   [Teacher]  , 
	isNull(p.GroupTeamName, '') as   [GroupTeamName]  , 
	isNull(p.SchoolType, '') as  [SchoolType] , 
	isNull(p.LiteracyLevel1, '') as  [LiteracyLevel1] , 
	isNull(p.LiteracyLevel2, '') as  [LiteracyLevel2] , 
	isNull(p.ParentPermFlag, 0) as   [ParentPermFlag]  , 
	isNull(p.Over18Flag, 0) as    [Over18Flag]   , 
	isNull(p.ShareFlag, 0) as    [ShareFlag]   , 
	isNull(p.TermsOfUseflag, 0) as  [TermsOfUseflag] , 
	isNull(p.Custom1, '') as  [Custom1] , 
	isNull(p.Custom2, '') as  [Custom2] , 
	isNull(p.Custom3, '') as  [Custom3] , 
	isNull(p.Custom4, '') as  [Custom4] , 
	isNull(p.Custom5, '') as  [Custom5] , 
	isNull(p.AvatarID, 0) as  [AvatarID] , 
	isNull(p.RegistrationDate, null) as   [RegistrationDate]  , 
	rs.*
	FROM
		dbo.Patron p right outer join RegistrationSettings rs
			on p.PID = @PID	

	



; /****** Object:  StoredProcedure [dbo].[app_Patron_GetSubAccountList]    Script Date: 03/10/2014 14:43:23 ******/






CREATE PROCEDURE [dbo].[app_Patron_GetSubAccountList]							
	@PID	int=0
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT 
		  subs.*, pg.AdminName as Program
	FROM
		dbo.Patron subs inner join dbo.Patron mast
			on subs.MasterAcctPID = mast.PID
				and mast.PID = @PID	
				and mast.IsMasterAccount = 1	
		left outer join Programs pg	
			on subs.ProgID = pg.PID
	--order BY subs.PID desc
	



; /****** Object:  StoredProcedure [dbo].[app_Patron_Insert]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_Patron_Insert] (
	 @IsMasterAccount bit 
	,@MasterAcctPID int 
	,@Username varchar (50)
	,@Password varchar (50)
	,@DOB datetime 
	,@Age int 
	,@SchoolGrade varchar (5)
	,@ProgID int 
	,@FirstName varchar (50)
	,@MiddleName varchar (50)
	,@LastName varchar (50)
	,@Gender varchar (1)
	,@EmailAddress varchar (150)
	,@PhoneNumber varchar (20)
	,@StreetAddress1 varchar (80)
	,@StreetAddress2 varchar (80)
	,@City varchar (20)
	,@State varchar (2)
	,@ZipCode varchar (10)
	,@Country varchar (50)
	,@County varchar (50)
	,@ParentGuardianFirstName varchar (50)
	,@ParentGuardianLastName varchar (50)
	,@ParentGuardianMiddleName varchar (50)
	,@PrimaryLibrary int 
	,@LibraryCard varchar (20)
	,@SchoolName varchar (50)
	,@District varchar (50)
	,@Teacher varchar (20)
	,@GroupTeamName varchar (20)
	,@SchoolType int 
	,@LiteracyLevel1 int 
	,@LiteracyLevel2 int 
	,@ParentPermFlag bit 
	,@Over18Flag bit 
	,@ShareFlag bit 
	,@TermsOfUseflag bit 
	,@Custom1 varchar (50)
	,@Custom2 varchar (50)
	,@Custom3 varchar (50)
	,@Custom4 varchar (50)
	,@Custom5 varchar (50)
	,@AvatarID int 
	,@PID int output 
) AS
Begin
	Insert into Patron
		(IsMasterAccount
		,MasterAcctPID
		,Username
		,Password
		,DOB
		,Age
		,SchoolGrade
		,ProgID
		,FirstName
		,MiddleName
		,LastName
		,Gender
		,EmailAddress
		,PhoneNumber
		,StreetAddress1
		,StreetAddress2
		,City
		,State
		,ZipCode
		,Country
		,County
		,ParentGuardianFirstName
		,ParentGuardianLastName
		,ParentGuardianMiddleName
		,PrimaryLibrary
		,LibraryCard
		,SchoolName
		,District
		,Teacher
		,GroupTeamName
		,SchoolType
		,LiteracyLevel1
		,LiteracyLevel2
		,ParentPermFlag
		,Over18Flag
		,ShareFlag
		,TermsOfUseflag
		,Custom1
		,Custom2
		,Custom3
		,Custom4
		,Custom5
		,AvatarID
)
	VALUES
		(@IsMasterAccount
		,@MasterAcctPID
		,@Username
		,@Password
		,@DOB
		,@Age
		,@SchoolGrade
		,@ProgID
		,@FirstName
		,@MiddleName
		,@LastName
		,@Gender
		,@EmailAddress
		,@PhoneNumber
		,@StreetAddress1
		,@StreetAddress2
		,@City
		,@State
		,@ZipCode
		,@Country
		,@County
		,@ParentGuardianFirstName
		,@ParentGuardianLastName
		,@ParentGuardianMiddleName
		,@PrimaryLibrary
		,@LibraryCard
		,@SchoolName
		,@District
		,@Teacher
		,@GroupTeamName
		,@SchoolType
		,@LiteracyLevel1
		,@LiteracyLevel2
		,@ParentPermFlag
		,@Over18Flag
		,@ShareFlag
		,@TermsOfUseflag
		,@Custom1
		,@Custom2
		,@Custom3
		,@Custom4
		,@Custom5
		,@AvatarID
)
	Select @PID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_Patron_Login]    Script Date: 03/10/2014 14:43:23 ******/






Create PROCEDURE [dbo].[app_Patron_Login]							
	@UserName		varchar(50)
  , @Password		varchar(50)

AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	Declare   @Count int
			, @UID int
 
	SELECT 
		  @Count = isnull(Count(*),0)
		, @UID = PID
	FROM
		dbo.Patron
	WHERE
			 Username = @UserName
		 AND Password = @Password
		
	GROUP BY PID
	
	IF @Count = 0 OR @Count is null
	BEGIN
		select 0
	END
	ELSE
	BEGIN
		select 1
	END
	return 0

	
		 






; /****** Object:  StoredProcedure [dbo].[app_Patron_Update]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_Patron_Update] (
	 @PID int 
	,@IsMasterAccount bit 
	,@MasterAcctPID int 
	,@Username varchar (50)
	,@Password varchar (50)
	,@DOB datetime 
	,@Age int 
	,@SchoolGrade varchar (5)
	,@ProgID int 
	,@FirstName varchar (50)
	,@MiddleName varchar (50)
	,@LastName varchar (50)
	,@Gender varchar (1)
	,@EmailAddress varchar (150)
	,@PhoneNumber varchar (20)
	,@StreetAddress1 varchar (80)
	,@StreetAddress2 varchar (80)
	,@City varchar (20)
	,@State varchar (2)
	,@ZipCode varchar (10)
	,@Country varchar (50)
	,@County varchar (50)
	,@ParentGuardianFirstName varchar (50)
	,@ParentGuardianLastName varchar (50)
	,@ParentGuardianMiddleName varchar (50)
	,@PrimaryLibrary int 
	,@LibraryCard varchar (20)
	,@SchoolName varchar (50)
	,@District varchar (50)
	,@Teacher varchar (20)
	,@GroupTeamName varchar (20)
	,@SchoolType int 
	,@LiteracyLevel1 int 
	,@LiteracyLevel2 int 
	,@ParentPermFlag bit 
	,@Over18Flag bit 
	,@ShareFlag bit 
	,@TermsOfUseflag bit 
	,@Custom1 varchar (50)
	,@Custom2 varchar (50)
	,@Custom3 varchar (50)
	,@Custom4 varchar (50)
	,@Custom5 varchar (50)
	,@AvatarID int 

) AS
	Update Patron
	Set 
		IsMasterAccount =  @IsMasterAccount
		,MasterAcctPID =  @MasterAcctPID
		,Username =  @Username
		,Password =  @Password
		,DOB =  @DOB
		,Age =  @Age
		,SchoolGrade =  @SchoolGrade
		,ProgID =  @ProgID
		,FirstName =  @FirstName
		,MiddleName =  @MiddleName
		,LastName =  @LastName
		,Gender =  @Gender
		,EmailAddress =  @EmailAddress
		,PhoneNumber =  @PhoneNumber
		,StreetAddress1 =  @StreetAddress1
		,StreetAddress2 =  @StreetAddress2
		,City =  @City
		,State =  @State
		,ZipCode =  @ZipCode
		,Country =  @Country
		,County =  @County
		,ParentGuardianFirstName =  @ParentGuardianFirstName
		,ParentGuardianLastName =  @ParentGuardianLastName
		,ParentGuardianMiddleName =  @ParentGuardianMiddleName
		,PrimaryLibrary =  @PrimaryLibrary
		,LibraryCard =  @LibraryCard
		,SchoolName =  @SchoolName
		,District =  @District
		,Teacher =  @Teacher
		,GroupTeamName =  @GroupTeamName
		,SchoolType =  @SchoolType
		,LiteracyLevel1 =  @LiteracyLevel1
		,LiteracyLevel2 =  @LiteracyLevel2
		,ParentPermFlag =  @ParentPermFlag
		,Over18Flag =  @Over18Flag
		,ShareFlag =  @ShareFlag
		,TermsOfUseflag =  @TermsOfUseflag
		,Custom1 =  @Custom1
		,Custom2 =  @Custom2
		,Custom3 =  @Custom3
		,Custom4 =  @Custom4
		,Custom5 =  @Custom5
		,AvatarID =  @AvatarID

	Where PID = @PID



; /****** Object:  StoredProcedure [dbo].[app_PatronBadges_Delete]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PatronBadges_Delete]
@PBID int 
AS
   Delete from [PatronBadges] Where PBID = @PBID



; /****** Object:  StoredProcedure [dbo].[app_PatronBadges_GetAll]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronBadges_GetAll]
@PID int = 0
AS
   Select 
	ROW_NUMBER() over (order by PBID) as Rank,
	pb.*, b.UserName as Title
	from [PatronBadges] pb left join Badge b 
		on pb.BadgeID = b.BID
   where PID = @PID 
   order by DateEarned



; /****** Object:  StoredProcedure [dbo].[app_PatronBadges_GetByID]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronBadges_GetByID]
@PBID int 
AS
   Select * from [PatronBadges] Where PBID = @PBID



; /****** Object:  StoredProcedure [dbo].[app_PatronBadges_Insert]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PatronBadges_Insert] (
	 @PID int 
	,@BadgeID int 
	,@DateEarned datetime 
	,@PBID int output 
) AS
Begin
	Insert into PatronBadges
		(PID
		,BadgeID
		,DateEarned
)
	VALUES
		(@PID
		,@BadgeID
		,@DateEarned
)
	Select @PBID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PatronBadges_Update]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PatronBadges_Update] (
	 @PBID int 
	,@PID int 
	,@BadgeID int 
	,@DateEarned datetime 

) AS
	Update PatronBadges
	Set 
		PID =  @PID
		,BadgeID =  @BadgeID
		,DateEarned =  @DateEarned

	Where PBID = @PBID



; /****** Object:  StoredProcedure [dbo].[app_PatronBookLists_Delete]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PatronBookLists_Delete]
@PBLBID int 
AS
   Delete from [PatronBookLists] Where PBLBID = @PBLBID



; /****** Object:  StoredProcedure [dbo].[app_PatronBookLists_GetAll]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronBookLists_GetAll]
AS
   Select * from [PatronBookLists]



; /****** Object:  StoredProcedure [dbo].[app_PatronBookLists_GetByID]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronBookLists_GetByID]
@PBLBID int 
AS
   Select * from [PatronBookLists] Where PBLBID = @PBLBID



; /****** Object:  StoredProcedure [dbo].[app_PatronBookLists_Insert]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PatronBookLists_Insert] (
	 @PID int 
	,@BLBID int 
	,@BLID int 
	,@HasReadFlag bit 
	,@LastModDate datetime 
	,@PBLBID int output 
) AS
Begin
	Insert into PatronBookLists
		(PID
		,BLBID
		,BLID
		,HasReadFlag
		,LastModDate
)
	VALUES
		(@PID
		,@BLBID
		,@BLID
		,@HasReadFlag
		,@LastModDate
)
	Select @PBLBID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PatronBookLists_Update]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PatronBookLists_Update] (
	 @PBLBID int 
	,@PID int 
	,@BLBID int 
	,@BLID int 
	,@HasReadFlag bit 
	,@LastModDate datetime 

) AS
	Update PatronBookLists
	Set 
		PID =  @PID
		,BLBID =  @BLBID
		,BLID =  @BLID
		,HasReadFlag =  @HasReadFlag
		,LastModDate =  @LastModDate

	Where PBLBID = @PBLBID



; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_Delete]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PatronPoints_Delete]
@PPID int 
AS
   Delete from [PatronPoints] Where PPID = @PPID



; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_GetAll]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronPoints_GetAll]
@PID int = 0
AS
   Select * from [PatronPoints] where @PID = PID order by AwardDate Desc



; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_GetByID]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronPoints_GetByID]
@PPID int 
AS
   Select * from [PatronPoints] Where PPID = @PPID



; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_GetPatronPointsBookList]    Script Date: 03/10/2014 14:43:23 ******/








CREATE PROCEDURE [dbo].[app_PatronPoints_GetPatronPointsBookList] (
	 @PID int , @BLID int = 0
	) AS
Begin

	Select * from PatronPoints where PID = @PID AND BookListID = @BLID and AwardReasonCd = 2

end




; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_GetPatronPointsByKeyword]    Script Date: 03/10/2014 14:43:23 ******/






CREATE PROCEDURE [dbo].[app_PatronPoints_GetPatronPointsByKeyword] (
	 @PID int , @Key varchar(50) = ''
	) AS
Begin

Select * from PatronPoints where PID = @PID AND EventCode = @Key and AwardReasonCd = 1

end




; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_GetPatronPointsByMGID]    Script Date: 03/10/2014 14:43:23 ******/







CREATE PROCEDURE [dbo].[app_PatronPoints_GetPatronPointsByMGID] (
	 @PID int , @MGID int = 0
	) AS
Begin

	Select * from PatronPoints where PID = @PID AND GameLevelActivityID = @MGID and AwardReasonCd = 4

end




; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_GetProgramLeaderboard]    Script Date: 03/10/2014 14:43:23 ******/



CREATE PROCEDURE [dbo].[app_PatronPoints_GetProgramLeaderboard]
@ProgId int = 0
AS
SET ARITHABORT  OFF
SET ANSI_WARNINGS OFF
select top 10 pp.PID, 
	isnull(SUM(isnull(convert(bigint,NumPoints),0)),0) as TotalPoints
	--isnull(SUM(isnull(NumPoints,0)),0) as TotalPoints
	, p.Username
into #TempLB
from PatronPoints pp join Patron p
	on pp.PID = p.PID
where p.ProgID = @ProgId
group by pp.PID, p.Username
order by TotalPoints desc

update #TempLB set TotalPoints = 20000000 where TotalPoints > 20000000

SET ARITHABORT  ON
SET ANSI_WARNINGS ON

select  PID, Username, CONVERT(int, TotalPoints) as TotalPoints, ROW_NUMBER() over (order by TotalPoints desc) as Rank
from #TempLB
order by TotalPoints desc



; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_GetTotalPatronPoints]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PatronPoints_GetTotalPatronPoints] (
	 @PID int 
	) AS
Begin

if (exists (select isnull(SUM(isnull(NumPoints,0)),0) as TotalPoints from PatronPoints where PID = @PID))
	select isnull(SUM(isnull(NumPoints,0)),0) as TotalPoints from PatronPoints where PID = @PID
else
	select 0 as TotalPoints 

end


; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_Insert]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PatronPoints_Insert] (
	 @PID int 
	,@NumPoints int 
	,@AwardDate datetime 
	,@AwardReason varchar (50)
	,@AwardReasonCd int 
	,@BadgeAwardedFlag bit 
	,@BadgeID int 
	,@PBID int 
	,@isReading bit 
	,@LogID int 
	,@isEvent bit 
	,@EventID int 
	,@EventCode varchar (50)
	,@isBookList bit 
	,@BookListID int 
	,@isGame bit 
	,@isGameLevelActivity bit 
	,@GameID int 
	,@GameLevel int 
	,@GameLevelID int 
	,@GameLevelActivityID int 
	,@PPID int output 
) AS
Begin
	Insert into PatronPoints
		(PID
		,NumPoints
		,AwardDate
		,AwardReason
		,AwardReasonCd
		,BadgeAwardedFlag
		,BadgeID
		,PBID
		,isReading
		,LogID
		,isEvent
		,EventID
		,EventCode
		,isBookList
		,BookListID
		,isGame
		,isGameLevelActivity
		,GameID
		,GameLevel
		,GameLevelID
		,GameLevelActivityID
)
	VALUES
		(@PID
		,@NumPoints
		,@AwardDate
		,@AwardReason
		,@AwardReasonCd
		,@BadgeAwardedFlag
		,@BadgeID
		,@PBID
		,@isReading
		,@LogID
		,@isEvent
		,@EventID
		,@EventCode
		,@isBookList
		,@BookListID
		,@isGame
		,@isGameLevelActivity
		,@GameID
		,@GameLevel
		,@GameLevelID
		,@GameLevelActivityID
)
	Select @PPID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PatronPoints_Update]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PatronPoints_Update] (
	 @PPID int 
	,@PID int 
	,@NumPoints int 
	,@AwardDate datetime 
	,@AwardReason varchar (50)
	,@AwardReasonCd int 
	,@BadgeAwardedFlag bit 
	,@BadgeID int 
	,@PBID int 
	,@isReading bit 
	,@LogID int 
	,@isEvent bit 
	,@EventID int 
	,@EventCode varchar (50)
	,@isBookList bit 
	,@BookListID int 
	,@isGame bit 
	,@isGameLevelActivity bit 
	,@GameID int 
	,@GameLevel int 
	,@GameLevelID int 
	,@GameLevelActivityID int 

) AS
	Update PatronPoints
	Set 
		PID =  @PID
		,NumPoints =  @NumPoints
		,AwardDate =  @AwardDate
		,AwardReason =  @AwardReason
		,AwardReasonCd =  @AwardReasonCd
		,BadgeAwardedFlag =  @BadgeAwardedFlag
		,BadgeID =  @BadgeID
		,PBID =  @PBID
		,isReading =  @isReading
		,LogID =  @LogID
		,isEvent =  @isEvent
		,EventID =  @EventID
		,EventCode =  @EventCode
		,isBookList =  @isBookList
		,BookListID =  @BookListID
		,isGame =  @isGame
		,isGameLevelActivity =  @isGameLevelActivity
		,GameID =  @GameID
		,GameLevel =  @GameLevel
		,GameLevelID =  @GameLevelID
		,GameLevelActivityID =  @GameLevelActivityID

	Where PPID = @PPID



; /****** Object:  StoredProcedure [dbo].[app_PatronPrizes_Delete]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PatronPrizes_Delete]
@PPID int 
AS
   Delete from [PatronPrizes] Where PPID = @PPID



; /****** Object:  StoredProcedure [dbo].[app_PatronPrizes_GetAll]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronPrizes_GetAll]
@PID int 
AS
   Select pp.*, ISNULL(b.AdminName,'') as Badge
   from [PatronPrizes] pp 
			left outer join Badge b
				on pp.BadgeID = b.BID
   where pp.PID=@PID



; /****** Object:  StoredProcedure [dbo].[app_PatronPrizes_GetByDrawingID]    Script Date: 03/10/2014 14:43:23 ******/






CREATE PROCEDURE [dbo].[app_PatronPrizes_GetByDrawingID]
@DrawingID int 
AS
   Select * from [PatronPrizes] Where DrawingID = @DrawingID



; /****** Object:  StoredProcedure [dbo].[app_PatronPrizes_GetByID]    Script Date: 03/10/2014 14:43:23 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronPrizes_GetByID]
@PPID int 
AS
   Select * from [PatronPrizes] Where PPID = @PPID



; /****** Object:  StoredProcedure [dbo].[app_PatronPrizes_Insert]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PatronPrizes_Insert] (
	 @PID int 
	,@PrizeSource int 
	,@BadgeID int 
	,@DrawingID int 
	,@PrizeName varchar (50)
	,@RedeemedFlag bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@PPID int output 
) AS
Begin
	Insert into PatronPrizes
		(PID
		,PrizeSource
		,BadgeID
		,DrawingID
		,PrizeName
		,RedeemedFlag
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@PID
		,@PrizeSource
		,@BadgeID
		,@DrawingID
		,@PrizeName
		,@RedeemedFlag
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @PPID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PatronPrizes_Update]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PatronPrizes_Update] (
	 @PPID int 
	,@PID int 
	,@PrizeSource int 
	,@BadgeID int 
	,@DrawingID int 
	,@PrizeName varchar (50)
	,@RedeemedFlag bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update PatronPrizes
	Set 
		PID =  @PID
		,PrizeSource =  @PrizeSource
		,BadgeID =  @BadgeID
		,DrawingID =  @DrawingID
		,PrizeName =  @PrizeName
		,RedeemedFlag =  @RedeemedFlag
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where PPID = @PPID



; /****** Object:  StoredProcedure [dbo].[app_PatronReadingLog_Delete]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PatronReadingLog_Delete]
@PRLID int 
AS
   Delete from [PatronReadingLog] Where PRLID = @PRLID



; /****** Object:  StoredProcedure [dbo].[app_PatronReadingLog_GetAll]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronReadingLog_GetAll]
@PID int = 0
AS
   Select * from [PatronReadingLog] where @PID = PID
   order by LoggingDate desc



; /****** Object:  StoredProcedure [dbo].[app_PatronReadingLog_GetByID]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronReadingLog_GetByID]
@PRLID int 
AS
   Select * from [PatronReadingLog] Where PRLID = @PRLID



; /****** Object:  StoredProcedure [dbo].[app_PatronReadingLog_Insert]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PatronReadingLog_Insert] (
	 @PID int 
	,@ReadingType int 
	,@ReadingTypeLabel varchar (50)
	,@ReadingAmount int 
	,@ReadingPoints int 
	,@LoggingDate varchar (50)
	,@Author varchar (50)
	,@Title varchar (150)
	,@HasReview bit 
	,@ReviewID int 
	,@PRLID int output 
) AS
Begin
	Insert into PatronReadingLog
		(PID
		,ReadingType
		,ReadingTypeLabel
		,ReadingAmount
		,ReadingPoints
		,LoggingDate
		,Author
		,Title
		,HasReview
		,ReviewID
)
	VALUES
		(@PID
		,@ReadingType
		,@ReadingTypeLabel
		,@ReadingAmount
		,@ReadingPoints
		,@LoggingDate
		,@Author
		,@Title
		,@HasReview
		,@ReviewID
)
	Select @PRLID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PatronReadingLog_Update]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PatronReadingLog_Update] (
	 @PRLID int 
	,@PID int 
	,@ReadingType int 
	,@ReadingTypeLabel varchar (50)
	,@ReadingAmount int 
	,@ReadingPoints int 
	,@LoggingDate varchar (50)
	,@Author varchar (50)
	,@Title varchar (150)
	,@HasReview bit 
	,@ReviewID int 

) AS
	Update PatronReadingLog
	Set 
		PID =  @PID
		,ReadingType =  @ReadingType
		,ReadingTypeLabel =  @ReadingTypeLabel
		,ReadingAmount =  @ReadingAmount
		,ReadingPoints =  @ReadingPoints
		,LoggingDate =  @LoggingDate
		,Author =  @Author
		,Title =  @Title
		,HasReview =  @HasReview
		,ReviewID =  @ReviewID

	Where PRLID = @PRLID



; /****** Object:  StoredProcedure [dbo].[app_PatronReview_Delete]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PatronReview_Delete]
@PRID int 
AS
   Delete from [PatronReview] Where PRID = @PRID



; /****** Object:  StoredProcedure [dbo].[app_PatronReview_GetAll]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronReview_GetAll]
@pid INT = 0
AS
   Select * from [PatronReview] WHERE @PID = PID



; /****** Object:  StoredProcedure [dbo].[app_PatronReview_GetByID]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronReview_GetByID]
@PRID int 
AS
   Select * from [PatronReview] Where PRID = @PRID



; /****** Object:  StoredProcedure [dbo].[app_PatronReview_GetByLogID]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronReview_GetByLogID]
@PRLID int 
AS
   Select * from [PatronReview] Where PRLID = @PRLID



; /****** Object:  StoredProcedure [dbo].[app_PatronReview_Insert]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PatronReview_Insert] (
	 @PID int 
	,@PRLID int 
	,@Author varchar (50)
	,@Title varchar (150)
	,@Review text 
	,@isApproved bit 
	,@ReviewDate datetime 
	,@ApprovalDate datetime 
	,@ApprovedBy varchar (50)
	,@PRID int output 
) AS
Begin
	Insert into PatronReview
		(PID
		,PRLID
		,Author
		,Title
		,Review
		,isApproved
		,ReviewDate
		,ApprovalDate
		,ApprovedBy
)
	VALUES
		(@PID
		,@PRLID
		,@Author
		,@Title
		,@Review
		,@isApproved
		,@ReviewDate
		,@ApprovalDate
		,@ApprovedBy
)
	Select @PRID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PatronReview_Update]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PatronReview_Update] (
	 @PRID int 
	,@PID int 
	,@PRLID int 
	,@Author varchar (50)
	,@Title varchar (150)
	,@Review text 
	,@isApproved bit 
	,@ReviewDate datetime 
	,@ApprovalDate datetime 
	,@ApprovedBy varchar (50)

) AS
	Update PatronReview
	Set 
		PID =  @PID
		,PRLID =  @PRLID
		,Author =  @Author
		,Title =  @Title
		,Review =  @Review
		,isApproved =  @isApproved
		,ReviewDate =  @ReviewDate
		,ApprovalDate =  @ApprovalDate
		,ApprovedBy =  @ApprovedBy

	Where PRID = @PRID



; /****** Object:  StoredProcedure [dbo].[app_PatronRewardCodes_Delete]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PatronRewardCodes_Delete]
@PRCID int 
AS
   Delete from [PatronRewardCodes] Where PRCID = @PRCID



; /****** Object:  StoredProcedure [dbo].[app_PatronRewardCodes_GetAll]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronRewardCodes_GetAll] 
@PID int 
AS
   Select * from [PatronRewardCodes] Where PID = @PID



; /****** Object:  StoredProcedure [dbo].[app_PatronRewardCodes_GetByID]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PatronRewardCodes_GetByID]
@PRCID int 
AS
   Select * from [PatronRewardCodes] Where PRCID = @PRCID



; /****** Object:  StoredProcedure [dbo].[app_PatronRewardCodes_Insert]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PatronRewardCodes_Insert] (
	 @PID int 
	,@BadgeID int 
	,@ProgID int 
	,@RewardCode varchar (100)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@PRCID int output 
) AS
Begin
	Insert into PatronRewardCodes
		(PID
		,BadgeID
		,ProgID
		,RewardCode
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@PID
		,@BadgeID
		,@ProgID
		,@RewardCode
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @PRCID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PatronRewardCodes_Update]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PatronRewardCodes_Update] (
	 @PRCID int 
	,@PID int 
	,@BadgeID int 
	,@ProgID int 
	,@RewardCode varchar (100)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update PatronRewardCodes
	Set 
		PID =  @PID
		,BadgeID =  @BadgeID
		,ProgID =  @ProgID
		,RewardCode =  @RewardCode
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where PRCID = @PRCID



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawing_Delete]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawing_Delete]
@PDID int 
AS
   Delete from [PrizeDrawing] Where PDID = @PDID



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawing_DrawWinners]    Script Date: 03/10/2014 14:43:24 ******/







CREATE PROCEDURE [dbo].[app_PrizeDrawing_DrawWinners]
 @PDID int = 0
,@NumWinners int = 1
,@Additional int = 0
AS

declare @TID int

select @TID = TID
from dbo.PrizeDrawing
where PDID = @PDID

declare @Gender varchar(1), @SchoolName varchar(50)
declare @ProgID int, @PrimaryLibrary int
declare @IncPrevWinnersFlag bit
declare @MinP int, @MaxP int, @MinR int, @MaxR int

select @ProgID = ProgID, @PrimaryLibrary = PrimaryLibrary, @Gender = Gender, @SchoolName = SchoolName, @IncPrevWinnersFlag = IncPrevWinnersFlag
	,@MinP = MinPoints, @MaxP = MaxPoints, @MinR = MinReviews, @MaxR = MaxReviews
from dbo.PrizeTemplate 
where TID = @TID


select PID , p.ProgID, p.PrimaryLibrary, p.SchoolName, p.Gender

	,isnull((Select SUM(NumPoints) from dbo.PatronPoints pp where pp.PID = p.PID 
			and  (AwardDate >= t.LogDateStart or t.LogDateStart is null)
			and  (AwardDate <= t.LogDateEnd or t.LogDateEnd is null)
	),0) as PatronPoints
	,isnull((Select count(PRID) from dbo.PatronReview pr where pr.PID = p.PID 
			and  (ReviewDate >= t.ReviewDateStart or t.ReviewDateStart is null)
			and  (ReviewDate <= t.ReviewDateEnd or t.ReviewDateEnd is null)
	),0) as PatronReviews
	, NEWID() as Random	
into #TEMP	
 from Patron p
	join dbo.PrizeTemplate t
		on t.TID = @TID

if (@ProgID <> 0) delete from #TEMP where ProgID <> @ProgID
if (@PrimaryLibrary <> 0) delete from #TEMP where PrimaryLibrary <> @PrimaryLibrary
if (@Gender <> '') delete from #TEMP where Gender <> @Gender
if (@SchoolName <> '') delete from #TEMP where SchoolName <> @SchoolName

if (@MinP <> 0) delete from #TEMP where PatronPoints < @MinP
if (@MaxP <> 0) delete from #TEMP where PatronPoints > @MaxP
if (@MinR <> 0) delete from #TEMP where PatronReviews < @MinR
if (@MaxR <> 0) delete from #TEMP where PatronReviews > @MaxR

if (@IncPrevWinnersFlag = 0) delete from #TEMP where PID in (Select distinct PatronID from dbo.PrizeDrawingWinners)
if (@Additional = 1) delete from #TEMP where PID in (Select distinct PatronID from dbo.PrizeDrawingWinners where PDID = @PDID)
 
insert into PrizeDrawingWinners (PDID, PatronID, NotificationID, PrizePickedUpFlag, LastModDate, LastModUser, AddedDate, AddedUser)
select top (@NumWinners) @PDID, PID, 0, 0, GETDATE(), 'N/A', GETDATE(), 'N/A'
from #TEMP
order by Random

select * from  PrizeDrawingWinners where   PDID = @PDID and NotificationID = 0
   



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawing_GetAll]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawing_GetAll]
AS
   Select pd.*, t.TName
   from [PrizeDrawing] pd
			left outer join PrizeTemplate t
				on pd.TID = t.TID
	order by  PDID desc



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawing_GetAllWinners]    Script Date: 03/10/2014 14:43:24 ******/






CREATE PROCEDURE [dbo].[app_PrizeDrawing_GetAllWinners]
@PDID int = 0
AS
   Select pdw.*, p.Username, p.FirstName, p.LastName
   from  dbo.PrizeDrawingWinners pdw
			left outer join Patron p
				on pdw.PatronID= p.PID
    where PDID = @PDID
	order by  PDID desc



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawing_GetByID]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawing_GetByID]
@PDID int 
AS
   Select * from [PrizeDrawing] Where PDID = @PDID



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawing_Insert]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawing_Insert] (
	 @PrizeName varchar (250)
	,@TID int 
	,@DrawingDateTime datetime 
	,@NumWinners int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@PDID int output 
) AS
Begin
	Insert into PrizeDrawing
		(PrizeName
		,TID
		,DrawingDateTime
		,NumWinners
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@PrizeName
		,@TID
		,@DrawingDateTime
		,@NumWinners
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @PDID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawing_Update]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawing_Update] (
	 @PDID int 
	,@PrizeName varchar (250)
	,@TID int 
	,@DrawingDateTime datetime 
	,@NumWinners int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update PrizeDrawing
	Set 
		PrizeName =  @PrizeName
		,TID =  @TID
		,DrawingDateTime =  @DrawingDateTime
		,NumWinners =  @NumWinners
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where PDID = @PDID



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawingWinners_Delete]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawingWinners_Delete]
@PDWID int 
AS
   Delete from [PrizeDrawingWinners] Where PDWID = @PDWID



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawingWinners_GetAll]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawingWinners_GetAll]
AS
   Select * from [PrizeDrawingWinners]



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawingWinners_GetByID]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawingWinners_GetByID]
@PDWID int 
AS
   Select * from [PrizeDrawingWinners] Where PDWID = @PDWID



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawingWinners_Insert]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawingWinners_Insert] (
	 @PDID int 
	,@PatronID int 
	,@NotificationID int 
	,@PrizePickedUpFlag bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@PDWID int output 
) AS
Begin
	Insert into PrizeDrawingWinners
		(PDID
		,PatronID
		,NotificationID
		,PrizePickedUpFlag
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@PDID
		,@PatronID
		,@NotificationID
		,@PrizePickedUpFlag
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @PDWID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PrizeDrawingWinners_Update]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PrizeDrawingWinners_Update] (
	 @PDWID int 
	,@PDID int 
	,@PatronID int 
	,@NotificationID int 
	,@PrizePickedUpFlag bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update PrizeDrawingWinners
	Set 
		PDID =  @PDID
		,PatronID =  @PatronID
		,NotificationID =  @NotificationID
		,PrizePickedUpFlag =  @PrizePickedUpFlag
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where PDWID = @PDWID



; /****** Object:  StoredProcedure [dbo].[app_PrizeTemplate_Delete]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_PrizeTemplate_Delete]
@TID int 
AS
   Delete from [PrizeTemplate] Where TID = @TID



; /****** Object:  StoredProcedure [dbo].[app_PrizeTemplate_GetAll]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PrizeTemplate_GetAll]
AS
   Select t.* , ISNULL(p.AdminName,'') as ProgName,  ISNULL(c.Code,'') as Library 
   from [PrizeTemplate] t
			left outer join Programs p
				on t.ProgID = p.PID
			left outer join Code c
				on t.PrimaryLibrary = c.CID
	order by TID desc	



; /****** Object:  StoredProcedure [dbo].[app_PrizeTemplate_GetByID]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_PrizeTemplate_GetByID]
@TID int 
AS
   Select * from [PrizeTemplate] Where TID = @TID



; /****** Object:  StoredProcedure [dbo].[app_PrizeTemplate_Insert]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_PrizeTemplate_Insert] (
	 @TName varchar (150)
	,@NumPrizes int 
	,@IncPrevWinnersFlag bit 
	,@SendNotificationFlag bit 
	,@NotificationSubject varchar (250)
	,@NotificationMessage text 
	,@ProgID int 
	,@Gender varchar (1)
	,@SchoolName varchar (50)
	,@PrimaryLibrary int 
	,@MinPoints int 
	,@MaxPoints int 
	,@LogDateStart datetime 
	,@LogDateEnd datetime 
	,@MinReviews int 
	,@MaxReviews int 
	,@ReviewDateStart datetime 
	,@ReviewDateEnd datetime 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@TID int output 
) AS
Begin
	Insert into PrizeTemplate
		(TName
		,NumPrizes
		,IncPrevWinnersFlag
		,SendNotificationFlag
		,NotificationSubject
		,NotificationMessage
		,ProgID
		,Gender
		,SchoolName
		,PrimaryLibrary
		,MinPoints
		,MaxPoints
		,LogDateStart
		,LogDateEnd
		,MinReviews
		,MaxReviews
		,ReviewDateStart
		,ReviewDateEnd
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@TName
		,@NumPrizes
		,@IncPrevWinnersFlag
		,@SendNotificationFlag
		,@NotificationSubject
		,@NotificationMessage
		,@ProgID
		,@Gender
		,@SchoolName
		,@PrimaryLibrary
		,@MinPoints
		,@MaxPoints
		,@LogDateStart
		,@LogDateEnd
		,@MinReviews
		,@MaxReviews
		,@ReviewDateStart
		,@ReviewDateEnd
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @TID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_PrizeTemplate_Update]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_PrizeTemplate_Update] (
	 @TID int 
	,@TName varchar (150)
	,@NumPrizes int 
	,@IncPrevWinnersFlag bit 
	,@SendNotificationFlag bit 
	,@NotificationSubject varchar (250)
	,@NotificationMessage text 
	,@ProgID int 
	,@Gender varchar (1)
	,@SchoolName varchar (50)
	,@PrimaryLibrary int 
	,@MinPoints int 
	,@MaxPoints int 
	,@LogDateStart datetime 
	,@LogDateEnd datetime 
	,@MinReviews int 
	,@MaxReviews int 
	,@ReviewDateStart datetime 
	,@ReviewDateEnd datetime 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update PrizeTemplate
	Set 
		TName =  @TName
		,NumPrizes =  @NumPrizes
		,IncPrevWinnersFlag =  @IncPrevWinnersFlag
		,SendNotificationFlag =  @SendNotificationFlag
		,NotificationSubject =  @NotificationSubject
		,NotificationMessage =  @NotificationMessage
		,ProgID =  @ProgID
		,Gender =  @Gender
		,SchoolName =  @SchoolName
		,PrimaryLibrary =  @PrimaryLibrary
		,MinPoints =  @MinPoints
		,MaxPoints =  @MaxPoints
		,LogDateStart =  @LogDateStart
		,LogDateEnd =  @LogDateEnd
		,MinReviews =  @MinReviews
		,MaxReviews =  @MaxReviews
		,ReviewDateStart =  @ReviewDateStart
		,ReviewDateEnd =  @ReviewDateEnd
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where TID = @TID



; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_AssignCodeForPatron]    Script Date: 03/10/2014 14:43:24 ******/







CREATE PROCEDURE [dbo].[app_ProgramCodes_AssignCodeForPatron] (
		@PID int 
	,@PatronId int 

) AS
declare 	 @PCID int 
	
	select 
		top 1
	@PCID = PCID from ProgramCodes where PID =  @PID and isUsed = 0 order by PCID 



	Update ProgramCodes
	Set 
			isUsed =  1
		,DateUsed =  GETDATE()
		,PatronId =  @PatronId

	Where PCID = @PCID
	
	select * from ProgramCodes where PCID = @PCID



; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_Delete]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_ProgramCodes_Delete]
@PCID int 
AS
   Delete from [ProgramCodes] Where PCID = @PCID



; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_Generate]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramCodes_Generate]
 @start INT = 1
,@end INT = 10000
,@PID int = 1
AS
   
-- generate x rows/numbers
--DECLARE @start INT = 1
--DECLARE @end INT = 10000

WITH numbers AS (
    SELECT @start AS Number
    UNION ALL
    SELECT number + 1 
    FROM  numbers
    WHERE number < @end
)
insert into ProgramCodes(PID, CodeNumber, CodeValue, isUsed, DateCreated, DateUsed, PatronId)
SELECT @PID, Number, NEWID() as Code, 0, GETDATE(),null,0
FROM numbers
OPTION (MAXRECURSION 0)




; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_GetAll]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramCodes_GetAll]
AS
   Select * from [ProgramCodes]



; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_GetAllByProgram]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramCodes_GetAllByProgram]
@PID int 
AS
   Select * from [ProgramCodes] where PID = @PID



; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_GetAllForPatron]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramCodes_GetAllForPatron]
@PID int 
AS
   Select * from [ProgramCodes] where PatronId = @PID



; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_GetByID]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramCodes_GetByID]
@PCID int 
AS
   Select * from [ProgramCodes] Where PCID = @PCID



; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_GetExportList]    Script Date: 03/10/2014 14:43:24 ******/







CREATE PROCEDURE [dbo].[app_ProgramCodes_GetExportList]
@PID int = 1
AS
   
select CodeNumber as "Code Number", CodeValue as "Code Value", case isUsed when 1 then 'Yes' else 'No' end as "Code Was Assigned",	DateUsed as "Date Used"
	,p.FirstName as "Assigned to First Name"
	,p.LastName as "Assigned to Last Name"
	,p.Username as "Assigned to Username"
from ProgramCodes pc
			left outer join Patron p 
				on pc.PatronId = p.PID
where pc.PID = @PID
order by PCID




; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_Insert]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_ProgramCodes_Insert] (
	 @PID int 
	,@CodeNumber int 
	,@CodeValue uniqueidentifier 
	,@isUsed bit 
	,@DateCreated datetime 
	,@DateUsed datetime 
	,@PatronId int 
	,@PCID int output 
) AS
Begin
	Insert into ProgramCodes
		(PID
		,CodeNumber
		,CodeValue
		,isUsed
		,DateCreated
		,DateUsed
		,PatronId
)
	VALUES
		(@PID
		,@CodeNumber
		,@CodeValue
		,@isUsed
		,@DateCreated
		,@DateUsed
		,@PatronId
)
	Select @PCID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_Stats]    Script Date: 03/10/2014 14:43:24 ******/







CREATE PROCEDURE [dbo].[app_ProgramCodes_Stats]
@PID int = 1
AS
   
select isnull((select COUNT(*) from ProgramCodes where PID = @PID),0) as TotalCodes
	,isnull((select COUNT(*) from ProgramCodes where PID = @PID and isUsed=1),0) as UsedCodes
	,isnull((select COUNT(*) from ProgramCodes where PID = @PID and isUsed=0),0) as RemainingCodes
	,isnull((select Top 1 convert(varchar(64),CodeValue) from ProgramCodes where PID = @PID and isUsed=1 order by PCID desc),'') as LastUsedCode
	




; /****** Object:  StoredProcedure [dbo].[app_ProgramCodes_Update]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_ProgramCodes_Update] (
	 @PCID int 
	,@PID int 
	,@CodeNumber int 
	,@CodeValue uniqueidentifier 
	,@isUsed bit 
	,@DateCreated datetime 
	,@DateUsed datetime 
	,@PatronId int 

) AS
	Update ProgramCodes
	Set 
		PID =  @PID
		,CodeNumber =  @CodeNumber
		,CodeValue =  @CodeValue
		,isUsed =  @isUsed
		,DateCreated =  @DateCreated
		,DateUsed =  @DateUsed
		,PatronId =  @PatronId

	Where PCID = @PCID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGame_Delete]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_ProgramGame_Delete]
@PGID int 
AS

   Delete ProgramGameLevel Where PGID = @PGID
   Delete from [ProgramGame] Where PGID = @PGID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGame_GetAll]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramGame_GetAll]
AS
   Select * from [ProgramGame]



; /****** Object:  StoredProcedure [dbo].[app_ProgramGame_GetByID]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramGame_GetByID]
@PGID int 
AS
   Select * from [ProgramGame] Where PGID = @PGID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGame_Insert]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_ProgramGame_Insert] (
	 @GameName varchar (50)
	,@MapImage varchar (50)
	,@BonusMapImage varchar (50)
	,@BoardWidth int 
	,@BoardHeight int 
	,@BonusLevelPointMultiplier money 
	,@LevelCompleteImage varchar (50)
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@LastModDate datetime 
	,@PGID int output 
) AS
Begin
	Insert into ProgramGame
		(GameName
		,MapImage
		,BonusMapImage
		,BoardWidth
		,BoardHeight
		,BonusLevelPointMultiplier
		,LevelCompleteImage
		,LastModUser
		,AddedDate
		,AddedUser
		,LastModDate
)
	VALUES
		(@GameName
		,@MapImage
		,@BonusMapImage
		,@BoardWidth
		,@BoardHeight
		,@BonusLevelPointMultiplier
		,@LevelCompleteImage
		,@LastModUser
		,@AddedDate
		,@AddedUser
		,@LastModDate
)
	Select @PGID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_ProgramGame_Update]    Script Date: 03/10/2014 14:43:24 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_ProgramGame_Update] (
	 @PGID int 
	,@GameName varchar (50)
	,@MapImage varchar (50)
	,@BonusMapImage varchar (50)
	,@BoardWidth int 
	,@BoardHeight int 
	,@BonusLevelPointMultiplier money 
	,@LevelCompleteImage varchar (50)
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@LastModDate datetime 

) AS
	Update ProgramGame
	Set 
		GameName =  @GameName
		,MapImage =  @MapImage
		,BonusMapImage =  @BonusMapImage
		,BoardWidth =  @BoardWidth
		,BoardHeight =  @BoardHeight
		,BonusLevelPointMultiplier =  @BonusLevelPointMultiplier
		,LevelCompleteImage =  @LevelCompleteImage
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser
		,LastModDate =  @LastModDate

	Where PGID = @PGID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGameLevel_Delete]    Script Date: 03/10/2014 14:43:24 ******/






	
CREATE PROCEDURE [dbo].[app_ProgramGameLevel_Delete]
@PGLID int 
AS
  Declare @PGID int
  Select @PGID = PGID from [ProgramGameLevel] Where PGLID = @PGLID
   Delete from [ProgramGameLevel] Where PGLID = @PGLID
   exec [app_ProgramGameLevel_Reorder] @PGID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGameLevel_GetAll]    Script Date: 03/10/2014 14:43:25 ******/







CREATE PROCEDURE [dbo].[app_ProgramGameLevel_GetAll]
@PGID int = 0
AS
   Select * 
   , (Select isnull(Max(LevelNumber),1) from [ProgramGameLevel] where PGID = @PGID)  as MAX
   from [ProgramGameLevel]
   where PGID = @PGID
	order by LevelNumber



; /****** Object:  StoredProcedure [dbo].[app_ProgramGameLevel_GetByID]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramGameLevel_GetByID]
@PGLID int 
AS
   Select * from [ProgramGameLevel] Where PGLID = @PGLID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGameLevel_Insert]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_ProgramGameLevel_Insert] (
	 @PGID int 
	,@LevelNumber int 
	,@LocationX int 
	,@LocationY int 
	,@PointNumber int 
	,@Minigame1ID int 
	,@Minigame2ID int 
	,@AwardBadgeID int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@PGLID int output 
) AS
Begin
	Insert into ProgramGameLevel
		(PGID
		,LevelNumber
		,LocationX
		,LocationY
		,PointNumber
		,Minigame1ID
		,Minigame2ID
		,AwardBadgeID
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@PGID
		,(Select isnull(Max(LevelNumber),0) +1 from ProgramGameLevel where PGID = @PGID)
		,@LocationX
		,@LocationY
		,@PointNumber
		,@Minigame1ID
		,@Minigame2ID
		,@AwardBadgeID
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @PGLID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_ProgramGameLevel_MoveDn]    Script Date: 03/10/2014 14:43:25 ******/







CREATE PROCEDURE [dbo].[app_ProgramGameLevel_MoveDn]
@PGLID int 
AS

	Declare @CurrentRecordLocation int, @NextRecordID int, @PGID int
	Select @CurrentRecordLocation = LevelNumber, @PGID = PGID from ProgramGameLevel where PGLID = @PGLID
	exec [dbo].[app_ProgramGameLevel_Reorder] @PGID
	if @CurrentRecordLocation < (Select MAX(LevelNumber) from ProgramGameLevel where PGID = @PGID)
	begin
		Select @NextRecordID = PGLID from ProgramGameLevel where LevelNumber = (@CurrentRecordLocation + 1) AND PGID = @PGID
		
		update ProgramGameLevel set LevelNumber = @CurrentRecordLocation + 1
		where PGLID = @PGLID
	
		update ProgramGameLevel set LevelNumber = @CurrentRecordLocation 
		where PGLID = @NextRecordID
	end



; /****** Object:  StoredProcedure [dbo].[app_ProgramGameLevel_MoveUp]    Script Date: 03/10/2014 14:43:25 ******/







CREATE PROCEDURE [dbo].[app_ProgramGameLevel_MoveUp]
@PGLID int 
AS
	Declare @CurrentRecordLocation int, @PreviousRecordID int, @PGID int
	Select @CurrentRecordLocation = LevelNumber, @PGID = PGID from ProgramGameLevel where PGLID = @PGLID
	exec [dbo].[app_ProgramGameLevel_Reorder] @PGID
	if @CurrentRecordLocation > 1
	begin
		Select @PreviousRecordID = PGLID from ProgramGameLevel where LevelNumber = (@CurrentRecordLocation - 1) AND PGID = @PGID
		
		update ProgramGameLevel set LevelNumber = @CurrentRecordLocation - 1
		where PGLID = @PGLID
	
		update ProgramGameLevel set LevelNumber = @CurrentRecordLocation 
		where PGLID = @PreviousRecordID
	end



; /****** Object:  StoredProcedure [dbo].[app_ProgramGameLevel_Reorder]    Script Date: 03/10/2014 14:43:25 ******/







CREATE Procedure [dbo].[app_ProgramGameLevel_Reorder]
@PGID int 
AS
	UPDATE ProgramGameLevel 
	SET LevelNumber = rowNumber 
	FROM ProgramGameLevel
		INNER JOIN 
		(SELECT PGLID, LevelNumber, row_number() OVER (ORDER BY LevelNumber Asc) as rowNumber
			FROM ProgramGameLevel) drRowNumbers ON drRowNumbers.PGLID = ProgramGameLevel.PGLID and PGID = @PGID
	



; /****** Object:  StoredProcedure [dbo].[app_ProgramGameLevel_Update]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_ProgramGameLevel_Update] (
	 @PGLID int 
	,@PGID int 
	,@LevelNumber int 
	,@LocationX int 
	,@LocationY int 
	,@PointNumber int 
	,@Minigame1ID int 
	,@Minigame2ID int 
	,@AwardBadgeID int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update ProgramGameLevel
	Set 
		PGID =  @PGID
		,LevelNumber =  @LevelNumber
		,LocationX =  @LocationX
		,LocationY =  @LocationY
		,PointNumber =  @PointNumber
		,Minigame1ID =  @Minigame1ID
		,Minigame2ID =  @Minigame2ID
		,AwardBadgeID =  @AwardBadgeID
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where PGLID = @PGLID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGamePointConversion_Delete]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_ProgramGamePointConversion_Delete]
@PGCID int 
AS
   Delete from [ProgramGamePointConversion] Where PGCID = @PGCID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGamePointConversion_GetAll]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramGamePointConversion_GetAll]
@PGID int = 0
AS
   Select * from [ProgramGamePointConversion]
   where PGID = @PGID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGamePointConversion_GetByActivityType]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramGamePointConversion_GetByActivityType]
@PGID int,@ActivityTypeID int 
AS
   Select * from [ProgramGamePointConversion] Where ActivityTypeId = @ActivityTypeID and PGID = @PGID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGamePointConversion_GetByID]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ProgramGamePointConversion_GetByID]
@PGCID int 
AS
   Select * from [ProgramGamePointConversion] Where PGCID = @PGCID



; /****** Object:  StoredProcedure [dbo].[app_ProgramGamePointConversion_Insert]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_ProgramGamePointConversion_Insert] (
	 @PGID int 
	,@ActivityTypeId int 
	,@ActivityCount int 
	,@PointCount int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@PGCID int output 
) AS
Begin
	Insert into ProgramGamePointConversion
		(PGID
		,ActivityTypeId
		,ActivityCount
		,PointCount
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@PGID
		,@ActivityTypeId
		,@ActivityCount
		,@PointCount
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @PGCID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_ProgramGamePointConversion_Update]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_ProgramGamePointConversion_Update] (
	 @PGCID int 
	,@PGID int 
	,@ActivityTypeId int 
	,@ActivityCount int 
	,@PointCount int 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update ProgramGamePointConversion
	Set 
		PGID =  @PGID
		,ActivityTypeId =  @ActivityTypeId
		,ActivityCount =  @ActivityCount
		,PointCount =  @PointCount
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where PGCID = @PGCID



; /****** Object:  StoredProcedure [dbo].[app_Programs_Delete]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_Programs_Delete]
@PID int,
@PatronProgram int = 0,
@PrizeProgram int = 0,
@OfferProgram int = 0,
@BookListProgram int = 0

AS

UPDATE Patron set ProgID = @PatronProgram where ProgID = @PID  	
UPDATE PrizeTemplate set ProgID = @PatronProgram where ProgID = @PID  	
UPDATE Offer set ProgramId = @PatronProgram where ProgramId = @PID  	
UPDATE BookList set ProgID = @PatronProgram where ProgID = @PID  	

DELETE from ProgramCodes where PID = @PID
DELETE from ProgramGamePointConversion where PGID = @PID
--DELETE from ProgramCodes where PID = @PID

   Delete from [Programs] Where PID = @PID



; /****** Object:  StoredProcedure [dbo].[app_Programs_GetAll]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Programs_GetAll]
AS
   Select * , (select COUNT(1) from Patron where Patron.ProgID = Programs.PID) as ParticipantCount
   from [Programs]



; /****** Object:  StoredProcedure [dbo].[app_Programs_GetAllActive]    Script Date: 03/10/2014 14:43:25 ******/






create PROCEDURE [dbo].[app_Programs_GetAllActive]
AS
   Select * , (select COUNT(1) from Patron where Patron.ProgID = Programs.PID) as ParticipantCount
   , (Select isnull(Max(POrder),1) from Programs)  as MAX
   from [Programs]
   where 
	IsActive = 1

   order by POrder Asc
   
   



; /****** Object:  StoredProcedure [dbo].[app_Programs_GetAllOrdered]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Programs_GetAllOrdered]
AS
   Select * , (select COUNT(1) from Patron where Patron.ProgID = Programs.PID) as ParticipantCount
   , (Select isnull(Max(POrder),1) from Programs)  as MAX
   from [Programs]
   order by POrder Asc



; /****** Object:  StoredProcedure [dbo].[app_Programs_GetAllTabs]    Script Date: 03/10/2014 14:43:25 ******/







CREATE PROCEDURE [dbo].[app_Programs_GetAllTabs]
AS
   Select * , (select COUNT(1) from Patron where Patron.ProgID = Programs.PID) as ParticipantCount
   , (Select isnull(Max(POrder),1) from Programs)  as MAX
   from [Programs]
   where 
	IsActive = 1
	and IsHidden = 0  
   order by POrder Asc
   
   



; /****** Object:  StoredProcedure [dbo].[app_Programs_GetByID]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_Programs_GetByID]
@PID int 
AS
   Select * from [Programs] Where PID = @PID



; /****** Object:  StoredProcedure [dbo].[app_Programs_GetDefaultProgramForAgeAndGrade]    Script Date: 03/10/2014 14:43:25 ******/







CREATE PROCEDURE [dbo].[app_Programs_GetDefaultProgramForAgeAndGrade]
 @Age int = -1
,@Grade int = -1
AS

declare @ID int

select PID, Porder, MaxAge, MaxGrade, TabName
into #Temp
from [Programs]

if (@Grade = -1 And @Age > -1)
begin
   Select top 1 @ID= PID
   from #Temp
   where 
	MaxAge >= @Age
   order by POrder Asc, MaxAge asc
   --select @ID

end
else
if (@Grade > -1 And @Age = -1)
begin
   Select top 1 @ID= PID
   from #Temp
   where 
	MaxGrade >= @Grade
   order by POrder Asc, MaxGrade asc
   --select @ID
end
else
begin
   Select top 1 @ID= PID
   from [Programs]
   where 
	IsActive = 1
	and IsHidden = 0  
   order by POrder Asc
   --select @ID
end

if (@ID is null) 
   Select top 1 @ID= PID
   from [Programs]
   where 
	IsActive = 1
	and IsHidden = 0  
   order by POrder Asc
   --select @ID

select @ID
select * from #temp
   return 0



; /****** Object:  StoredProcedure [dbo].[app_Programs_GetDefaultProgramID]    Script Date: 03/10/2014 14:43:25 ******/







   CREATE PROCEDURE [dbo].[app_Programs_GetDefaultProgramID]
AS
	declare @ID int
   Select top 1 @ID= PID
   from [Programs]
   where 
	IsActive = 1
	and IsHidden = 0  
   order by POrder Asc
   select @ID
   return 0



; /****** Object:  StoredProcedure [dbo].[app_Programs_GetProgramMinigames]    Script Date: 03/10/2014 14:43:25 ******/






CREATE PROCEDURE [dbo].[app_Programs_GetProgramMinigames]
 @LevelIDs varchar(1000) = ''
,@WhichMG int = 0
AS

if @WhichMG = 0
		select mg.*
			from Minigame mg join dbo.ProgramGameLevel pg
				on mg.MGID = pg.Minigame1ID
			where pg.PGLID in 
					(select * from [dbo].[fnSplitBigInt](@LevelIDs))
		order by pg.LevelNumber
else
		select mg.* 
			from Minigame mg join dbo.ProgramGameLevel pg
				on mg.MGID = pg.Minigame2ID
			where pg.PGLID in 
					(select * from [dbo].[fnSplitBigInt](@LevelIDs))
		order by pg.LevelNumber					



; /****** Object:  StoredProcedure [dbo].[app_Programs_Insert]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_Programs_Insert] (
	 @AdminName varchar (50)
	,@Title varchar (50)
	,@TabName varchar (20)
	,@POrder int 
	,@IsActive bit 
	,@IsHidden bit 
	,@StartDate datetime 
	,@EndDate datetime 
	,@MaxAge int 
	,@MaxGrade int 
	,@LoggingStart datetime 
	,@LoggingEnd datetime 
	,@ParentalConsentFlag bit 
	,@ParentalConsentText text 
	,@PatronReviewFlag bit 
	,@LogoutURL varchar (150)
	,@ProgramGameID int 
	,@HTML1 text 
	,@HTML2 text 
	,@HTML3 text 
	,@HTML4 text 
	,@HTML5 text 
	,@HTML6 text 
	,@BannerImage varchar (150)
	,@RegistrationBadgeID int 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@LastModDate datetime 
	,@PID int output 
) AS
Begin
	Insert into Programs
		(AdminName
		,Title
		,TabName
		,POrder
		,IsActive
		,IsHidden
		,StartDate
		,EndDate
		,MaxAge
		,MaxGrade
		,LoggingStart
		,LoggingEnd
		,ParentalConsentFlag
		,ParentalConsentText
		,PatronReviewFlag
		,LogoutURL
		,ProgramGameID
		,HTML1
		,HTML2
		,HTML3
		,HTML4
		,HTML5
		,HTML6
		,BannerImage
		,RegistrationBadgeID
		,LastModUser
		,AddedDate
		,AddedUser
		,LastModDate
)
	VALUES
		(@AdminName
		,@Title
		,@TabName
		,(Select isnull(Max(POrder),0) +1 from Programs)
		,@IsActive
		,@IsHidden
		,@StartDate
		,@EndDate
		,@MaxAge
		,@MaxGrade
		,@LoggingStart
		,@LoggingEnd
		,@ParentalConsentFlag
		,@ParentalConsentText
		,@PatronReviewFlag
		,@LogoutURL
		,@ProgramGameID
		,@HTML1
		,@HTML2
		,@HTML3
		,@HTML4
		,@HTML5
		,@HTML6
		,@BannerImage
		,@RegistrationBadgeID
		,@LastModUser
		,@AddedDate
		,@AddedUser
		,@LastModDate
)
	Select @PID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_Programs_MoveDn]    Script Date: 03/10/2014 14:43:25 ******/







CREATE PROCEDURE [dbo].[app_Programs_MoveDn]
@PID int 
AS
	exec [dbo].[app_Programs_Reorder]
	
	Declare @CurrentRecordLocation int, @NextRecordID int
	Select @CurrentRecordLocation = POrder from Programs where PID = @PID
	if @CurrentRecordLocation < (Select MAX(POrder) from Programs)
	begin
		Select @NextRecordID = PID from Programs where POrder = (@CurrentRecordLocation + 1)
		
		update Programs set POrder = @CurrentRecordLocation + 1
		where PID = @PID
	
		update Programs set POrder = @CurrentRecordLocation 
		where PID = @NextRecordID
	end




; /****** Object:  StoredProcedure [dbo].[app_Programs_MoveUp]    Script Date: 03/10/2014 14:43:25 ******/








CREATE PROCEDURE [dbo].[app_Programs_MoveUp]
@PID int 
AS
	exec [dbo].[app_Programs_Reorder]
	Declare @CurrentRecordLocation int, @PreviousRecordID int
	Select @CurrentRecordLocation = POrder from Programs where PID = @PID
	if @CurrentRecordLocation > 1
	begin
		Select @PreviousRecordID = PID from Programs where POrder = (@CurrentRecordLocation - 1)
		
		update Programs set POrder = @CurrentRecordLocation - 1
		where PID = @PID
	
		update Programs set POrder = @CurrentRecordLocation 
		where PID = @PreviousRecordID
	end



; /****** Object:  StoredProcedure [dbo].[app_Programs_Reorder]    Script Date: 03/10/2014 14:43:25 ******/






CREATE Procedure [dbo].[app_Programs_Reorder]
AS
	
	UPDATE Programs 
	SET POrder = rowNumber 
	FROM Programs
		INNER JOIN 
		(SELECT PID, POrder, row_number() OVER (ORDER BY POrder Asc) as rowNumber
			FROM Programs) drRowNumbers ON drRowNumbers.PID = Programs.PID
	
	



; /****** Object:  StoredProcedure [dbo].[app_Programs_Update]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_Programs_Update] (
	 @PID int 
	,@AdminName varchar (50)
	,@Title varchar (50)
	,@TabName varchar (20)
	,@POrder int 
	,@IsActive bit 
	,@IsHidden bit 
	,@StartDate datetime 
	,@EndDate datetime 
	,@MaxAge int 
	,@MaxGrade int 
	,@LoggingStart datetime 
	,@LoggingEnd datetime 
	,@ParentalConsentFlag bit 
	,@ParentalConsentText text 
	,@PatronReviewFlag bit 
	,@LogoutURL varchar (150)
	,@ProgramGameID int 
	,@HTML1 text 
	,@HTML2 text 
	,@HTML3 text 
	,@HTML4 text 
	,@HTML5 text 
	,@HTML6 text 
	,@BannerImage varchar (150)
	,@RegistrationBadgeID int 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@LastModDate datetime 

) AS
	Update Programs
	Set 
		AdminName =  @AdminName
		,Title =  @Title
		,TabName =  @TabName
		,POrder =  @POrder
		,IsActive =  @IsActive
		,IsHidden =  @IsHidden
		,StartDate =  @StartDate
		,EndDate =  @EndDate
		,MaxAge =  @MaxAge
		,MaxGrade =  @MaxGrade
		,LoggingStart =  @LoggingStart
		,LoggingEnd =  @LoggingEnd
		,ParentalConsentFlag =  @ParentalConsentFlag
		,ParentalConsentText =  @ParentalConsentText
		,PatronReviewFlag =  @PatronReviewFlag
		,LogoutURL =  @LogoutURL
		,ProgramGameID =  @ProgramGameID
		,HTML1 =  @HTML1
		,HTML2 =  @HTML2
		,HTML3 =  @HTML3
		,HTML4 =  @HTML4
		,HTML5 =  @HTML5
		,HTML6 =  @HTML6
		,BannerImage =  @BannerImage
		,RegistrationBadgeID =  @RegistrationBadgeID
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser
		,LastModDate =  @LastModDate

	Where PID = @PID



; /****** Object:  StoredProcedure [dbo].[app_RegistrationSettings_Delete]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_RegistrationSettings_Delete]
@RID int 
AS
   Delete from [RegistrationSettings] Where RID = @RID



; /****** Object:  StoredProcedure [dbo].[app_RegistrationSettings_GetAll]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_RegistrationSettings_GetAll]
AS
   Select * from [RegistrationSettings]



; /****** Object:  StoredProcedure [dbo].[app_RegistrationSettings_GetByID]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_RegistrationSettings_GetByID]
@RID int 
AS
   Select * from [RegistrationSettings] Where RID = @RID



; /****** Object:  StoredProcedure [dbo].[app_RegistrationSettings_Insert]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_RegistrationSettings_Insert] (
	 @Literacy1Label varchar (50)
	,@Literacy2Label varchar (50)
	,@DOB_Prompt bit 
	,@Age_Prompt bit 
	,@SchoolGrade_Prompt bit 
	,@FirstName_Prompt bit 
	,@MiddleName_Prompt bit 
	,@LastName_Prompt bit 
	,@Gender_Prompt bit 
	,@EmailAddress_Prompt bit 
	,@PhoneNumber_Prompt bit 
	,@StreetAddress1_Prompt bit 
	,@StreetAddress2_Prompt bit 
	,@City_Prompt bit 
	,@State_Prompt bit 
	,@ZipCode_Prompt bit 
	,@Country_Prompt bit 
	,@County_Prompt bit 
	,@ParentGuardianFirstName_Prompt bit 
	,@ParentGuardianLastName_Prompt bit 
	,@ParentGuardianMiddleName_Prompt bit 
	,@PrimaryLibrary_Prompt bit 
	,@LibraryCard_Prompt bit 
	,@SchoolName_Prompt bit 
	,@District_Prompt bit 
	,@Teacher_Prompt bit 
	,@GroupTeamName_Prompt bit 
	,@SchoolType_Prompt bit 
	,@LiteracyLevel1_Prompt bit 
	,@LiteracyLevel2_Prompt bit 
	,@ParentPermFlag_Prompt bit 
	,@Over18Flag_Prompt bit 
	,@ShareFlag_Prompt bit 
	,@TermsOfUseflag_Prompt bit 
	,@Custom1_Prompt bit 
	,@Custom2_Prompt bit 
	,@Custom3_Prompt bit 
	,@Custom4_Prompt bit 
	,@Custom5_Prompt bit 
	,@DOB_Req bit 
	,@Age_Req bit 
	,@SchoolGrade_Req bit 
	,@FirstName_Req bit 
	,@MiddleName_Req bit 
	,@LastName_Req bit 
	,@Gender_Req bit 
	,@EmailAddress_Req bit 
	,@PhoneNumber_Req bit 
	,@StreetAddress1_Req bit 
	,@StreetAddress2_Req bit 
	,@City_Req bit 
	,@State_Req bit 
	,@ZipCode_Req bit 
	,@Country_Req bit 
	,@County_Req bit 
	,@ParentGuardianFirstName_Req bit 
	,@ParentGuardianLastName_Req bit 
	,@ParentGuardianMiddleName_Req bit 
	,@PrimaryLibrary_Req bit 
	,@LibraryCard_Req bit 
	,@SchoolName_Req bit 
	,@District_Req bit 
	,@Teacher_Req bit 
	,@GroupTeamName_Req bit 
	,@SchoolType_Req bit 
	,@LiteracyLevel1_Req bit 
	,@LiteracyLevel2_Req bit 
	,@ParentPermFlag_Req bit 
	,@Over18Flag_Req bit 
	,@ShareFlag_Req bit 
	,@TermsOfUseflag_Req bit 
	,@Custom1_Req bit 
	,@Custom2_Req bit 
	,@Custom3_Req bit 
	,@Custom4_Req bit 
	,@Custom5_Req bit 
	,@DOB_Show bit 
	,@Age_Show bit 
	,@SchoolGrade_Show bit 
	,@FirstName_Show bit 
	,@MiddleName_Show bit 
	,@LastName_Show bit 
	,@Gender_Show bit 
	,@EmailAddress_Show bit 
	,@PhoneNumber_Show bit 
	,@StreetAddress1_Show bit 
	,@StreetAddress2_Show bit 
	,@City_Show bit 
	,@State_Show bit 
	,@ZipCode_Show bit 
	,@Country_Show bit 
	,@County_Show bit 
	,@ParentGuardianFirstName_Show bit 
	,@ParentGuardianLastName_Show bit 
	,@ParentGuardianMiddleName_Show bit 
	,@PrimaryLibrary_Show bit 
	,@LibraryCard_Show bit 
	,@SchoolName_Show bit 
	,@District_Show bit 
	,@Teacher_Show bit 
	,@GroupTeamName_Show bit 
	,@SchoolType_Show bit 
	,@LiteracyLevel1_Show bit 
	,@LiteracyLevel2_Show bit 
	,@ParentPermFlag_Show bit 
	,@Over18Flag_Show bit 
	,@ShareFlag_Show bit 
	,@TermsOfUseflag_Show bit 
	,@Custom1_Show bit 
	,@Custom2_Show bit 
	,@Custom3_Show bit 
	,@Custom4_Show bit 
	,@Custom5_Show bit 
	,@DOB_Edit bit 
	,@Age_Edit bit 
	,@SchoolGrade_Edit bit 
	,@FirstName_Edit bit 
	,@MiddleName_Edit bit 
	,@LastName_Edit bit 
	,@Gender_Edit bit 
	,@EmailAddress_Edit bit 
	,@PhoneNumber_Edit bit 
	,@StreetAddress1_Edit bit 
	,@StreetAddress2_Edit bit 
	,@City_Edit bit 
	,@State_Edit bit 
	,@ZipCode_Edit bit 
	,@Country_Edit bit 
	,@County_Edit bit 
	,@ParentGuardianFirstName_Edit bit 
	,@ParentGuardianLastName_Edit bit 
	,@ParentGuardianMiddleName_Edit bit 
	,@PrimaryLibrary_Edit bit 
	,@LibraryCard_Edit bit 
	,@SchoolName_Edit bit 
	,@District_Edit bit 
	,@Teacher_Edit bit 
	,@GroupTeamName_Edit bit 
	,@SchoolType_Edit bit 
	,@LiteracyLevel1_Edit bit 
	,@LiteracyLevel2_Edit bit 
	,@ParentPermFlag_Edit bit 
	,@Over18Flag_Edit bit 
	,@ShareFlag_Edit bit 
	,@TermsOfUseflag_Edit bit 
	,@Custom1_Edit bit 
	,@Custom2_Edit bit 
	,@Custom3_Edit bit 
	,@Custom4_Edit bit 
	,@Custom5_Edit bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@RID int output 
) AS
Begin
	Insert into RegistrationSettings
		(Literacy1Label
		,Literacy2Label
		,DOB_Prompt
		,Age_Prompt
		,SchoolGrade_Prompt
		,FirstName_Prompt
		,MiddleName_Prompt
		,LastName_Prompt
		,Gender_Prompt
		,EmailAddress_Prompt
		,PhoneNumber_Prompt
		,StreetAddress1_Prompt
		,StreetAddress2_Prompt
		,City_Prompt
		,State_Prompt
		,ZipCode_Prompt
		,Country_Prompt
		,County_Prompt
		,ParentGuardianFirstName_Prompt
		,ParentGuardianLastName_Prompt
		,ParentGuardianMiddleName_Prompt
		,PrimaryLibrary_Prompt
		,LibraryCard_Prompt
		,SchoolName_Prompt
		,District_Prompt
		,Teacher_Prompt
		,GroupTeamName_Prompt
		,SchoolType_Prompt
		,LiteracyLevel1_Prompt
		,LiteracyLevel2_Prompt
		,ParentPermFlag_Prompt
		,Over18Flag_Prompt
		,ShareFlag_Prompt
		,TermsOfUseflag_Prompt
		,Custom1_Prompt
		,Custom2_Prompt
		,Custom3_Prompt
		,Custom4_Prompt
		,Custom5_Prompt
		,DOB_Req
		,Age_Req
		,SchoolGrade_Req
		,FirstName_Req
		,MiddleName_Req
		,LastName_Req
		,Gender_Req
		,EmailAddress_Req
		,PhoneNumber_Req
		,StreetAddress1_Req
		,StreetAddress2_Req
		,City_Req
		,State_Req
		,ZipCode_Req
		,Country_Req
		,County_Req
		,ParentGuardianFirstName_Req
		,ParentGuardianLastName_Req
		,ParentGuardianMiddleName_Req
		,PrimaryLibrary_Req
		,LibraryCard_Req
		,SchoolName_Req
		,District_Req
		,Teacher_Req
		,GroupTeamName_Req
		,SchoolType_Req
		,LiteracyLevel1_Req
		,LiteracyLevel2_Req
		,ParentPermFlag_Req
		,Over18Flag_Req
		,ShareFlag_Req
		,TermsOfUseflag_Req
		,Custom1_Req
		,Custom2_Req
		,Custom3_Req
		,Custom4_Req
		,Custom5_Req
		,DOB_Show
		,Age_Show
		,SchoolGrade_Show
		,FirstName_Show
		,MiddleName_Show
		,LastName_Show
		,Gender_Show
		,EmailAddress_Show
		,PhoneNumber_Show
		,StreetAddress1_Show
		,StreetAddress2_Show
		,City_Show
		,State_Show
		,ZipCode_Show
		,Country_Show
		,County_Show
		,ParentGuardianFirstName_Show
		,ParentGuardianLastName_Show
		,ParentGuardianMiddleName_Show
		,PrimaryLibrary_Show
		,LibraryCard_Show
		,SchoolName_Show
		,District_Show
		,Teacher_Show
		,GroupTeamName_Show
		,SchoolType_Show
		,LiteracyLevel1_Show
		,LiteracyLevel2_Show
		,ParentPermFlag_Show
		,Over18Flag_Show
		,ShareFlag_Show
		,TermsOfUseflag_Show
		,Custom1_Show
		,Custom2_Show
		,Custom3_Show
		,Custom4_Show
		,Custom5_Show
		,DOB_Edit
		,Age_Edit
		,SchoolGrade_Edit
		,FirstName_Edit
		,MiddleName_Edit
		,LastName_Edit
		,Gender_Edit
		,EmailAddress_Edit
		,PhoneNumber_Edit
		,StreetAddress1_Edit
		,StreetAddress2_Edit
		,City_Edit
		,State_Edit
		,ZipCode_Edit
		,Country_Edit
		,County_Edit
		,ParentGuardianFirstName_Edit
		,ParentGuardianLastName_Edit
		,ParentGuardianMiddleName_Edit
		,PrimaryLibrary_Edit
		,LibraryCard_Edit
		,SchoolName_Edit
		,District_Edit
		,Teacher_Edit
		,GroupTeamName_Edit
		,SchoolType_Edit
		,LiteracyLevel1_Edit
		,LiteracyLevel2_Edit
		,ParentPermFlag_Edit
		,Over18Flag_Edit
		,ShareFlag_Edit
		,TermsOfUseflag_Edit
		,Custom1_Edit
		,Custom2_Edit
		,Custom3_Edit
		,Custom4_Edit
		,Custom5_Edit
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@Literacy1Label
		,@Literacy2Label
		,@DOB_Prompt
		,@Age_Prompt
		,@SchoolGrade_Prompt
		,@FirstName_Prompt
		,@MiddleName_Prompt
		,@LastName_Prompt
		,@Gender_Prompt
		,@EmailAddress_Prompt
		,@PhoneNumber_Prompt
		,@StreetAddress1_Prompt
		,@StreetAddress2_Prompt
		,@City_Prompt
		,@State_Prompt
		,@ZipCode_Prompt
		,@Country_Prompt
		,@County_Prompt
		,@ParentGuardianFirstName_Prompt
		,@ParentGuardianLastName_Prompt
		,@ParentGuardianMiddleName_Prompt
		,@PrimaryLibrary_Prompt
		,@LibraryCard_Prompt
		,@SchoolName_Prompt
		,@District_Prompt
		,@Teacher_Prompt
		,@GroupTeamName_Prompt
		,@SchoolType_Prompt
		,@LiteracyLevel1_Prompt
		,@LiteracyLevel2_Prompt
		,@ParentPermFlag_Prompt
		,@Over18Flag_Prompt
		,@ShareFlag_Prompt
		,@TermsOfUseflag_Prompt
		,@Custom1_Prompt
		,@Custom2_Prompt
		,@Custom3_Prompt
		,@Custom4_Prompt
		,@Custom5_Prompt
		,@DOB_Req
		,@Age_Req
		,@SchoolGrade_Req
		,@FirstName_Req
		,@MiddleName_Req
		,@LastName_Req
		,@Gender_Req
		,@EmailAddress_Req
		,@PhoneNumber_Req
		,@StreetAddress1_Req
		,@StreetAddress2_Req
		,@City_Req
		,@State_Req
		,@ZipCode_Req
		,@Country_Req
		,@County_Req
		,@ParentGuardianFirstName_Req
		,@ParentGuardianLastName_Req
		,@ParentGuardianMiddleName_Req
		,@PrimaryLibrary_Req
		,@LibraryCard_Req
		,@SchoolName_Req
		,@District_Req
		,@Teacher_Req
		,@GroupTeamName_Req
		,@SchoolType_Req
		,@LiteracyLevel1_Req
		,@LiteracyLevel2_Req
		,@ParentPermFlag_Req
		,@Over18Flag_Req
		,@ShareFlag_Req
		,@TermsOfUseflag_Req
		,@Custom1_Req
		,@Custom2_Req
		,@Custom3_Req
		,@Custom4_Req
		,@Custom5_Req
		,@DOB_Show
		,@Age_Show
		,@SchoolGrade_Show
		,@FirstName_Show
		,@MiddleName_Show
		,@LastName_Show
		,@Gender_Show
		,@EmailAddress_Show
		,@PhoneNumber_Show
		,@StreetAddress1_Show
		,@StreetAddress2_Show
		,@City_Show
		,@State_Show
		,@ZipCode_Show
		,@Country_Show
		,@County_Show
		,@ParentGuardianFirstName_Show
		,@ParentGuardianLastName_Show
		,@ParentGuardianMiddleName_Show
		,@PrimaryLibrary_Show
		,@LibraryCard_Show
		,@SchoolName_Show
		,@District_Show
		,@Teacher_Show
		,@GroupTeamName_Show
		,@SchoolType_Show
		,@LiteracyLevel1_Show
		,@LiteracyLevel2_Show
		,@ParentPermFlag_Show
		,@Over18Flag_Show
		,@ShareFlag_Show
		,@TermsOfUseflag_Show
		,@Custom1_Show
		,@Custom2_Show
		,@Custom3_Show
		,@Custom4_Show
		,@Custom5_Show
		,@DOB_Edit
		,@Age_Edit
		,@SchoolGrade_Edit
		,@FirstName_Edit
		,@MiddleName_Edit
		,@LastName_Edit
		,@Gender_Edit
		,@EmailAddress_Edit
		,@PhoneNumber_Edit
		,@StreetAddress1_Edit
		,@StreetAddress2_Edit
		,@City_Edit
		,@State_Edit
		,@ZipCode_Edit
		,@Country_Edit
		,@County_Edit
		,@ParentGuardianFirstName_Edit
		,@ParentGuardianLastName_Edit
		,@ParentGuardianMiddleName_Edit
		,@PrimaryLibrary_Edit
		,@LibraryCard_Edit
		,@SchoolName_Edit
		,@District_Edit
		,@Teacher_Edit
		,@GroupTeamName_Edit
		,@SchoolType_Edit
		,@LiteracyLevel1_Edit
		,@LiteracyLevel2_Edit
		,@ParentPermFlag_Edit
		,@Over18Flag_Edit
		,@ShareFlag_Edit
		,@TermsOfUseflag_Edit
		,@Custom1_Edit
		,@Custom2_Edit
		,@Custom3_Edit
		,@Custom4_Edit
		,@Custom5_Edit
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @RID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_RegistrationSettings_Update]    Script Date: 03/10/2014 14:43:25 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_RegistrationSettings_Update] (
	 @RID int 
	,@Literacy1Label varchar (50)
	,@Literacy2Label varchar (50)
	,@DOB_Prompt bit 
	,@Age_Prompt bit 
	,@SchoolGrade_Prompt bit 
	,@FirstName_Prompt bit 
	,@MiddleName_Prompt bit 
	,@LastName_Prompt bit 
	,@Gender_Prompt bit 
	,@EmailAddress_Prompt bit 
	,@PhoneNumber_Prompt bit 
	,@StreetAddress1_Prompt bit 
	,@StreetAddress2_Prompt bit 
	,@City_Prompt bit 
	,@State_Prompt bit 
	,@ZipCode_Prompt bit 
	,@Country_Prompt bit 
	,@County_Prompt bit 
	,@ParentGuardianFirstName_Prompt bit 
	,@ParentGuardianLastName_Prompt bit 
	,@ParentGuardianMiddleName_Prompt bit 
	,@PrimaryLibrary_Prompt bit 
	,@LibraryCard_Prompt bit 
	,@SchoolName_Prompt bit 
	,@District_Prompt bit 
	,@Teacher_Prompt bit 
	,@GroupTeamName_Prompt bit 
	,@SchoolType_Prompt bit 
	,@LiteracyLevel1_Prompt bit 
	,@LiteracyLevel2_Prompt bit 
	,@ParentPermFlag_Prompt bit 
	,@Over18Flag_Prompt bit 
	,@ShareFlag_Prompt bit 
	,@TermsOfUseflag_Prompt bit 
	,@Custom1_Prompt bit 
	,@Custom2_Prompt bit 
	,@Custom3_Prompt bit 
	,@Custom4_Prompt bit 
	,@Custom5_Prompt bit 
	,@DOB_Req bit 
	,@Age_Req bit 
	,@SchoolGrade_Req bit 
	,@FirstName_Req bit 
	,@MiddleName_Req bit 
	,@LastName_Req bit 
	,@Gender_Req bit 
	,@EmailAddress_Req bit 
	,@PhoneNumber_Req bit 
	,@StreetAddress1_Req bit 
	,@StreetAddress2_Req bit 
	,@City_Req bit 
	,@State_Req bit 
	,@ZipCode_Req bit 
	,@Country_Req bit 
	,@County_Req bit 
	,@ParentGuardianFirstName_Req bit 
	,@ParentGuardianLastName_Req bit 
	,@ParentGuardianMiddleName_Req bit 
	,@PrimaryLibrary_Req bit 
	,@LibraryCard_Req bit 
	,@SchoolName_Req bit 
	,@District_Req bit 
	,@Teacher_Req bit 
	,@GroupTeamName_Req bit 
	,@SchoolType_Req bit 
	,@LiteracyLevel1_Req bit 
	,@LiteracyLevel2_Req bit 
	,@ParentPermFlag_Req bit 
	,@Over18Flag_Req bit 
	,@ShareFlag_Req bit 
	,@TermsOfUseflag_Req bit 
	,@Custom1_Req bit 
	,@Custom2_Req bit 
	,@Custom3_Req bit 
	,@Custom4_Req bit 
	,@Custom5_Req bit 
	,@DOB_Show bit 
	,@Age_Show bit 
	,@SchoolGrade_Show bit 
	,@FirstName_Show bit 
	,@MiddleName_Show bit 
	,@LastName_Show bit 
	,@Gender_Show bit 
	,@EmailAddress_Show bit 
	,@PhoneNumber_Show bit 
	,@StreetAddress1_Show bit 
	,@StreetAddress2_Show bit 
	,@City_Show bit 
	,@State_Show bit 
	,@ZipCode_Show bit 
	,@Country_Show bit 
	,@County_Show bit 
	,@ParentGuardianFirstName_Show bit 
	,@ParentGuardianLastName_Show bit 
	,@ParentGuardianMiddleName_Show bit 
	,@PrimaryLibrary_Show bit 
	,@LibraryCard_Show bit 
	,@SchoolName_Show bit 
	,@District_Show bit 
	,@Teacher_Show bit 
	,@GroupTeamName_Show bit 
	,@SchoolType_Show bit 
	,@LiteracyLevel1_Show bit 
	,@LiteracyLevel2_Show bit 
	,@ParentPermFlag_Show bit 
	,@Over18Flag_Show bit 
	,@ShareFlag_Show bit 
	,@TermsOfUseflag_Show bit 
	,@Custom1_Show bit 
	,@Custom2_Show bit 
	,@Custom3_Show bit 
	,@Custom4_Show bit 
	,@Custom5_Show bit 
	,@DOB_Edit bit 
	,@Age_Edit bit 
	,@SchoolGrade_Edit bit 
	,@FirstName_Edit bit 
	,@MiddleName_Edit bit 
	,@LastName_Edit bit 
	,@Gender_Edit bit 
	,@EmailAddress_Edit bit 
	,@PhoneNumber_Edit bit 
	,@StreetAddress1_Edit bit 
	,@StreetAddress2_Edit bit 
	,@City_Edit bit 
	,@State_Edit bit 
	,@ZipCode_Edit bit 
	,@Country_Edit bit 
	,@County_Edit bit 
	,@ParentGuardianFirstName_Edit bit 
	,@ParentGuardianLastName_Edit bit 
	,@ParentGuardianMiddleName_Edit bit 
	,@PrimaryLibrary_Edit bit 
	,@LibraryCard_Edit bit 
	,@SchoolName_Edit bit 
	,@District_Edit bit 
	,@Teacher_Edit bit 
	,@GroupTeamName_Edit bit 
	,@SchoolType_Edit bit 
	,@LiteracyLevel1_Edit bit 
	,@LiteracyLevel2_Edit bit 
	,@ParentPermFlag_Edit bit 
	,@Over18Flag_Edit bit 
	,@ShareFlag_Edit bit 
	,@TermsOfUseflag_Edit bit 
	,@Custom1_Edit bit 
	,@Custom2_Edit bit 
	,@Custom3_Edit bit 
	,@Custom4_Edit bit 
	,@Custom5_Edit bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update RegistrationSettings
	Set 
		Literacy1Label =  @Literacy1Label
		,Literacy2Label =  @Literacy2Label
		,DOB_Prompt =  @DOB_Prompt
		,Age_Prompt =  @Age_Prompt
		,SchoolGrade_Prompt =  @SchoolGrade_Prompt
		,FirstName_Prompt =  @FirstName_Prompt
		,MiddleName_Prompt =  @MiddleName_Prompt
		,LastName_Prompt =  @LastName_Prompt
		,Gender_Prompt =  @Gender_Prompt
		,EmailAddress_Prompt =  @EmailAddress_Prompt
		,PhoneNumber_Prompt =  @PhoneNumber_Prompt
		,StreetAddress1_Prompt =  @StreetAddress1_Prompt
		,StreetAddress2_Prompt =  @StreetAddress2_Prompt
		,City_Prompt =  @City_Prompt
		,State_Prompt =  @State_Prompt
		,ZipCode_Prompt =  @ZipCode_Prompt
		,Country_Prompt =  @Country_Prompt
		,County_Prompt =  @County_Prompt
		,ParentGuardianFirstName_Prompt =  @ParentGuardianFirstName_Prompt
		,ParentGuardianLastName_Prompt =  @ParentGuardianLastName_Prompt
		,ParentGuardianMiddleName_Prompt =  @ParentGuardianMiddleName_Prompt
		,PrimaryLibrary_Prompt =  @PrimaryLibrary_Prompt
		,LibraryCard_Prompt =  @LibraryCard_Prompt
		,SchoolName_Prompt =  @SchoolName_Prompt
		,District_Prompt =  @District_Prompt
		,Teacher_Prompt =  @Teacher_Prompt
		,GroupTeamName_Prompt =  @GroupTeamName_Prompt
		,SchoolType_Prompt =  @SchoolType_Prompt
		,LiteracyLevel1_Prompt =  @LiteracyLevel1_Prompt
		,LiteracyLevel2_Prompt =  @LiteracyLevel2_Prompt
		,ParentPermFlag_Prompt =  @ParentPermFlag_Prompt
		,Over18Flag_Prompt =  @Over18Flag_Prompt
		,ShareFlag_Prompt =  @ShareFlag_Prompt
		,TermsOfUseflag_Prompt =  @TermsOfUseflag_Prompt
		,Custom1_Prompt =  @Custom1_Prompt
		,Custom2_Prompt =  @Custom2_Prompt
		,Custom3_Prompt =  @Custom3_Prompt
		,Custom4_Prompt =  @Custom4_Prompt
		,Custom5_Prompt =  @Custom5_Prompt
		,DOB_Req =  @DOB_Req
		,Age_Req =  @Age_Req
		,SchoolGrade_Req =  @SchoolGrade_Req
		,FirstName_Req =  @FirstName_Req
		,MiddleName_Req =  @MiddleName_Req
		,LastName_Req =  @LastName_Req
		,Gender_Req =  @Gender_Req
		,EmailAddress_Req =  @EmailAddress_Req
		,PhoneNumber_Req =  @PhoneNumber_Req
		,StreetAddress1_Req =  @StreetAddress1_Req
		,StreetAddress2_Req =  @StreetAddress2_Req
		,City_Req =  @City_Req
		,State_Req =  @State_Req
		,ZipCode_Req =  @ZipCode_Req
		,Country_Req =  @Country_Req
		,County_Req =  @County_Req
		,ParentGuardianFirstName_Req =  @ParentGuardianFirstName_Req
		,ParentGuardianLastName_Req =  @ParentGuardianLastName_Req
		,ParentGuardianMiddleName_Req =  @ParentGuardianMiddleName_Req
		,PrimaryLibrary_Req =  @PrimaryLibrary_Req
		,LibraryCard_Req =  @LibraryCard_Req
		,SchoolName_Req =  @SchoolName_Req
		,District_Req =  @District_Req
		,Teacher_Req =  @Teacher_Req
		,GroupTeamName_Req =  @GroupTeamName_Req
		,SchoolType_Req =  @SchoolType_Req
		,LiteracyLevel1_Req =  @LiteracyLevel1_Req
		,LiteracyLevel2_Req =  @LiteracyLevel2_Req
		,ParentPermFlag_Req =  @ParentPermFlag_Req
		,Over18Flag_Req =  @Over18Flag_Req
		,ShareFlag_Req =  @ShareFlag_Req
		,TermsOfUseflag_Req =  @TermsOfUseflag_Req
		,Custom1_Req =  @Custom1_Req
		,Custom2_Req =  @Custom2_Req
		,Custom3_Req =  @Custom3_Req
		,Custom4_Req =  @Custom4_Req
		,Custom5_Req =  @Custom5_Req
				,SchoolGrade_Show =  @SchoolGrade_Show
		,FirstName_Show =  @FirstName_Show
		,MiddleName_Show =  @MiddleName_Show
		,LastName_Show =  @LastName_Show
		,Gender_Show =  @Gender_Show
		,EmailAddress_Show =  @EmailAddress_Show
		,PhoneNumber_Show =  @PhoneNumber_Show
		,StreetAddress1_Show =  @StreetAddress1_Show
		,StreetAddress2_Show =  @StreetAddress2_Show
		,City_Show =  @City_Show
		,State_Show =  @State_Show
		,ZipCode_Show =  @ZipCode_Show
		,Country_Show =  @Country_Show
		,County_Show =  @County_Show
		,ParentGuardianFirstName_Show =  @ParentGuardianFirstName_Show
		,ParentGuardianLastName_Show =  @ParentGuardianLastName_Show
		,ParentGuardianMiddleName_Show =  @ParentGuardianMiddleName_Show
		,PrimaryLibrary_Show =  @PrimaryLibrary_Show
		,LibraryCard_Show =  @LibraryCard_Show
		,SchoolName_Show =  @SchoolName_Show
		,District_Show =  @District_Show
		,Teacher_Show =  @Teacher_Show
		,GroupTeamName_Show =  @GroupTeamName_Show
		,SchoolType_Show =  @SchoolType_Show
		,LiteracyLevel1_Show =  @LiteracyLevel1_Show
		,LiteracyLevel2_Show =  @LiteracyLevel2_Show
		,ParentPermFlag_Show =  @ParentPermFlag_Show
		,Over18Flag_Show =  @Over18Flag_Show
		,ShareFlag_Show =  @ShareFlag_Show
		,TermsOfUseflag_Show =  @TermsOfUseflag_Show
		,Custom1_Show =  @Custom1_Show
		,Custom2_Show =  @Custom2_Show
		,Custom3_Show =  @Custom3_Show
		,Custom4_Show =  @Custom4_Show
		,Custom5_Show =  @Custom5_Show
		,SchoolGrade_Edit =  @SchoolGrade_Edit
		,FirstName_Edit =  @FirstName_Edit
		,MiddleName_Edit =  @MiddleName_Edit
		,LastName_Edit =  @LastName_Edit
		,Gender_Edit =  @Gender_Edit
		,EmailAddress_Edit =  @EmailAddress_Edit
		,PhoneNumber_Edit =  @PhoneNumber_Edit
		,StreetAddress1_Edit =  @StreetAddress1_Edit
		,StreetAddress2_Edit =  @StreetAddress2_Edit
		,City_Edit =  @City_Edit
		,State_Edit =  @State_Edit
		,ZipCode_Edit =  @ZipCode_Edit
		,Country_Edit =  @Country_Edit
		,County_Edit =  @County_Edit
		,ParentGuardianFirstName_Edit =  @ParentGuardianFirstName_Edit
		,ParentGuardianLastName_Edit =  @ParentGuardianLastName_Edit
		,ParentGuardianMiddleName_Edit =  @ParentGuardianMiddleName_Edit
		,PrimaryLibrary_Edit =  @PrimaryLibrary_Edit
		,LibraryCard_Edit =  @LibraryCard_Edit
		,SchoolName_Edit =  @SchoolName_Edit
		,District_Edit =  @District_Edit
		,Teacher_Edit =  @Teacher_Edit
		,GroupTeamName_Edit =  @GroupTeamName_Edit
		,SchoolType_Edit =  @SchoolType_Edit
		,LiteracyLevel1_Edit =  @LiteracyLevel1_Edit
		,LiteracyLevel2_Edit =  @LiteracyLevel2_Edit
		,ParentPermFlag_Edit =  @ParentPermFlag_Edit
		,Over18Flag_Edit =  @Over18Flag_Edit
		,ShareFlag_Edit =  @ShareFlag_Edit
		,TermsOfUseflag_Edit =  @TermsOfUseflag_Edit
		,Custom1_Edit =  @Custom1_Edit
		,Custom2_Edit =  @Custom2_Edit
		,Custom3_Edit =  @Custom3_Edit
		,Custom4_Edit =  @Custom4_Edit
		,Custom5_Edit =  @Custom5_Edit
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser
		,LastModDate =  @LastModDate				
	Where RID = @RID



; /****** Object:  StoredProcedure [dbo].[app_ReportTemplate_Delete]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_ReportTemplate_Delete]
@RTID int 
AS
   Delete from [ReportTemplate] Where RTID = @RTID



; /****** Object:  StoredProcedure [dbo].[app_ReportTemplate_GetAll]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ReportTemplate_GetAll]
AS
   Select RTID, ReportName from [ReportTemplate]



; /****** Object:  StoredProcedure [dbo].[app_ReportTemplate_GetByID]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_ReportTemplate_GetByID]
@RTID int 
AS
   Select * from [ReportTemplate] Where RTID = @RTID



; /****** Object:  StoredProcedure [dbo].[app_ReportTemplate_Insert]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_ReportTemplate_Insert] (
	 @ProgId int 
	,@ReportName varchar (150)
	,@DisplayFilters bit 
	,@DOBFrom datetime 
	,@DOBTo datetime 
	,@AgeFrom int 
	,@AgeTo int 
	,@SchoolGrade varchar (5)
	,@FirstName varchar (50)
	,@LastName varchar (50)
	,@Gender varchar (1)
	,@EmailAddress varchar (150)
	,@PhoneNumber varchar (20)
	,@City varchar (20)
	,@State varchar (2)
	,@ZipCode varchar (10)
	,@County varchar (50)
	,@PrimaryLibrary int 
	,@SchoolName varchar (50)
	,@District varchar (50)
	,@Teacher varchar (20)
	,@GroupTeamName varchar (20)
	,@SchoolType int 
	,@LiteracyLevel1 int 
	,@LiteracyLevel2 int 
	,@Custom1 varchar (50)
	,@Custom2 varchar (50)
	,@Custom3 varchar (50)
	,@Custom4 varchar (50)
	,@Custom5 varchar (50)
	,@RegistrationDateStart datetime 
	,@RegistrationDateEnd datetime 
	,@PointsMin int 
	,@PointsMax int 
	,@PointsStart datetime 
	,@PointsEnd datetime 
	,@EventCode varchar (50)
	,@EarnedBadge int 
	,@PhysicalPrizeEarned varchar (50)
	,@PhysicalPrizeRedeemed bit 
	,@PhysicalPrizeStartDate datetime 
	,@PhysicalPrizeEndDate datetime 
	,@ReviewsMin int 
	,@ReviewsMax int 
	,@ReviewTitle varchar (150)
	,@ReviewAuthor varchar (100)
	,@ReviewStartDate datetime 
	,@ReviewEndDate datetime 
	,@RandomDrawingName varchar (50)
	,@RandomDrawingNum int 
	,@RandomDrawingStartDate datetime 
	,@RandomDrawingEndDate datetime 
	,@HasBeenDrawn bit 
	,@HasRedeemend bit 
	,@PIDInc bit 
	,@UsernameInc bit 
	,@DOBInc bit 
	,@AgeInc bit 
	,@SchoolGradeInc bit 
	,@FirstNameInc bit 
	,@LastNameInc bit 
	,@GenderInc bit 
	,@EmailAddressInc bit 
	,@PhoneNumberInc bit 
	,@CityInc bit 
	,@StateInc bit 
	,@ZipCodeInc bit 
	,@CountyInc bit 
	,@PrimaryLibraryInc bit 
	,@SchoolNameInc bit 
	,@DistrictInc bit 
	,@TeacherInc bit 
	,@GroupTeamNameInc bit 
	,@SchoolTypeInc bit 
	,@LiteracyLevel1Inc bit 
	,@LiteracyLevel2Inc bit 
	,@Custom1Inc bit 
	,@Custom2Inc bit 
	,@Custom3Inc bit 
	,@Custom4Inc bit 
	,@Custom5Inc bit 
	,@RegistrationDateInc bit 
	,@PointsInc bit 
	,@EarnedBadgeInc bit 
	,@PhysicalPrizeNameInc bit 
	,@PhysicalPrizeDateInc bit 
	,@NumReviewsInc bit 
	,@ReviewAuthorInc bit 
	,@ReviewTitleInc bit 
	,@ReviewDateInc bit 
	,@RandomDrawingNameInc bit 
	,@RandomDrawingNumInc bit 
	,@RandomDrawingDateInc bit 
	,@HasBeenDrawnInc bit 
	,@HasRedeemendInc bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@RTID int output 
) AS
Begin
	Insert into ReportTemplate
		(ProgId
		,ReportName
		,DisplayFilters
		,DOBFrom
		,DOBTo
		,AgeFrom
		,AgeTo
		,SchoolGrade
		,FirstName
		,LastName
		,Gender
		,EmailAddress
		,PhoneNumber
		,City
		,State
		,ZipCode
		,County
		,PrimaryLibrary
		,SchoolName
		,District
		,Teacher
		,GroupTeamName
		,SchoolType
		,LiteracyLevel1
		,LiteracyLevel2
		,Custom1
		,Custom2
		,Custom3
		,Custom4
		,Custom5
		,RegistrationDateStart
		,RegistrationDateEnd
		,PointsMin
		,PointsMax
		,PointsStart
		,PointsEnd
		,EventCode
		,EarnedBadge
		,PhysicalPrizeEarned
		,PhysicalPrizeRedeemed
		,PhysicalPrizeStartDate
		,PhysicalPrizeEndDate
		,ReviewsMin
		,ReviewsMax
		,ReviewTitle
		,ReviewAuthor
		,ReviewStartDate
		,ReviewEndDate
		,RandomDrawingName
		,RandomDrawingNum
		,RandomDrawingStartDate
		,RandomDrawingEndDate
		,HasBeenDrawn
		,HasRedeemend
		,PIDInc
		,UsernameInc
		,DOBInc
		,AgeInc
		,SchoolGradeInc
		,FirstNameInc
		,LastNameInc
		,GenderInc
		,EmailAddressInc
		,PhoneNumberInc
		,CityInc
		,StateInc
		,ZipCodeInc
		,CountyInc
		,PrimaryLibraryInc
		,SchoolNameInc
		,DistrictInc
		,TeacherInc
		,GroupTeamNameInc
		,SchoolTypeInc
		,LiteracyLevel1Inc
		,LiteracyLevel2Inc
		,Custom1Inc
		,Custom2Inc
		,Custom3Inc
		,Custom4Inc
		,Custom5Inc
		,RegistrationDateInc
		,PointsInc
		,EarnedBadgeInc
		,PhysicalPrizeNameInc
		,PhysicalPrizeDateInc
		,NumReviewsInc
		,ReviewAuthorInc
		,ReviewTitleInc
		,ReviewDateInc
		,RandomDrawingNameInc
		,RandomDrawingNumInc
		,RandomDrawingDateInc
		,HasBeenDrawnInc
		,HasRedeemendInc
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@ProgId
		,@ReportName
		,@DisplayFilters
		,@DOBFrom
		,@DOBTo
		,@AgeFrom
		,@AgeTo
		,@SchoolGrade
		,@FirstName
		,@LastName
		,@Gender
		,@EmailAddress
		,@PhoneNumber
		,@City
		,@State
		,@ZipCode
		,@County
		,@PrimaryLibrary
		,@SchoolName
		,@District
		,@Teacher
		,@GroupTeamName
		,@SchoolType
		,@LiteracyLevel1
		,@LiteracyLevel2
		,@Custom1
		,@Custom2
		,@Custom3
		,@Custom4
		,@Custom5
		,@RegistrationDateStart
		,@RegistrationDateEnd
		,@PointsMin
		,@PointsMax
		,@PointsStart
		,@PointsEnd
		,@EventCode
		,@EarnedBadge
		,@PhysicalPrizeEarned
		,@PhysicalPrizeRedeemed
		,@PhysicalPrizeStartDate
		,@PhysicalPrizeEndDate
		,@ReviewsMin
		,@ReviewsMax
		,@ReviewTitle
		,@ReviewAuthor
		,@ReviewStartDate
		,@ReviewEndDate
		,@RandomDrawingName
		,@RandomDrawingNum
		,@RandomDrawingStartDate
		,@RandomDrawingEndDate
		,@HasBeenDrawn
		,@HasRedeemend
		,@PIDInc
		,@UsernameInc
		,@DOBInc
		,@AgeInc
		,@SchoolGradeInc
		,@FirstNameInc
		,@LastNameInc
		,@GenderInc
		,@EmailAddressInc
		,@PhoneNumberInc
		,@CityInc
		,@StateInc
		,@ZipCodeInc
		,@CountyInc
		,@PrimaryLibraryInc
		,@SchoolNameInc
		,@DistrictInc
		,@TeacherInc
		,@GroupTeamNameInc
		,@SchoolTypeInc
		,@LiteracyLevel1Inc
		,@LiteracyLevel2Inc
		,@Custom1Inc
		,@Custom2Inc
		,@Custom3Inc
		,@Custom4Inc
		,@Custom5Inc
		,@RegistrationDateInc
		,@PointsInc
		,@EarnedBadgeInc
		,@PhysicalPrizeNameInc
		,@PhysicalPrizeDateInc
		,@NumReviewsInc
		,@ReviewAuthorInc
		,@ReviewTitleInc
		,@ReviewDateInc
		,@RandomDrawingNameInc
		,@RandomDrawingNumInc
		,@RandomDrawingDateInc
		,@HasBeenDrawnInc
		,@HasRedeemendInc
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @RTID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_ReportTemplate_Update]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_ReportTemplate_Update] (
	 @RTID int 
	,@ProgId int 
	,@ReportName varchar (150)
	,@DisplayFilters bit 
	,@DOBFrom datetime 
	,@DOBTo datetime 
	,@AgeFrom int 
	,@AgeTo int 
	,@SchoolGrade varchar (5)
	,@FirstName varchar (50)
	,@LastName varchar (50)
	,@Gender varchar (1)
	,@EmailAddress varchar (150)
	,@PhoneNumber varchar (20)
	,@City varchar (20)
	,@State varchar (2)
	,@ZipCode varchar (10)
	,@County varchar (50)
	,@PrimaryLibrary int 
	,@SchoolName varchar (50)
	,@District varchar (50)
	,@Teacher varchar (20)
	,@GroupTeamName varchar (20)
	,@SchoolType int 
	,@LiteracyLevel1 int 
	,@LiteracyLevel2 int 
	,@Custom1 varchar (50)
	,@Custom2 varchar (50)
	,@Custom3 varchar (50)
	,@Custom4 varchar (50)
	,@Custom5 varchar (50)
	,@RegistrationDateStart datetime 
	,@RegistrationDateEnd datetime 
	,@PointsMin int 
	,@PointsMax int 
	,@PointsStart datetime 
	,@PointsEnd datetime 
	,@EventCode varchar (50)
	,@EarnedBadge int 
	,@PhysicalPrizeEarned varchar (50)
	,@PhysicalPrizeRedeemed bit 
	,@PhysicalPrizeStartDate datetime 
	,@PhysicalPrizeEndDate datetime 
	,@ReviewsMin int 
	,@ReviewsMax int 
	,@ReviewTitle varchar (150)
	,@ReviewAuthor varchar (100)
	,@ReviewStartDate datetime 
	,@ReviewEndDate datetime 
	,@RandomDrawingName varchar (50)
	,@RandomDrawingNum int 
	,@RandomDrawingStartDate datetime 
	,@RandomDrawingEndDate datetime 
	,@HasBeenDrawn bit 
	,@HasRedeemend bit 
	,@PIDInc bit 
	,@UsernameInc bit 
	,@DOBInc bit 
	,@AgeInc bit 
	,@SchoolGradeInc bit 
	,@FirstNameInc bit 
	,@LastNameInc bit 
	,@GenderInc bit 
	,@EmailAddressInc bit 
	,@PhoneNumberInc bit 
	,@CityInc bit 
	,@StateInc bit 
	,@ZipCodeInc bit 
	,@CountyInc bit 
	,@PrimaryLibraryInc bit 
	,@SchoolNameInc bit 
	,@DistrictInc bit 
	,@TeacherInc bit 
	,@GroupTeamNameInc bit 
	,@SchoolTypeInc bit 
	,@LiteracyLevel1Inc bit 
	,@LiteracyLevel2Inc bit 
	,@Custom1Inc bit 
	,@Custom2Inc bit 
	,@Custom3Inc bit 
	,@Custom4Inc bit 
	,@Custom5Inc bit 
	,@RegistrationDateInc bit 
	,@PointsInc bit 
	,@EarnedBadgeInc bit 
	,@PhysicalPrizeNameInc bit 
	,@PhysicalPrizeDateInc bit 
	,@NumReviewsInc bit 
	,@ReviewAuthorInc bit 
	,@ReviewTitleInc bit 
	,@ReviewDateInc bit 
	,@RandomDrawingNameInc bit 
	,@RandomDrawingNumInc bit 
	,@RandomDrawingDateInc bit 
	,@HasBeenDrawnInc bit 
	,@HasRedeemendInc bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update ReportTemplate
	Set 
		ProgId =  @ProgId
		,ReportName =  @ReportName
		,DisplayFilters =  @DisplayFilters
		,DOBFrom =  @DOBFrom
		,DOBTo =  @DOBTo
		,AgeFrom =  @AgeFrom
		,AgeTo =  @AgeTo
		,SchoolGrade =  @SchoolGrade
		,FirstName =  @FirstName
		,LastName =  @LastName
		,Gender =  @Gender
		,EmailAddress =  @EmailAddress
		,PhoneNumber =  @PhoneNumber
		,City =  @City
		,State =  @State
		,ZipCode =  @ZipCode
		,County =  @County
		,PrimaryLibrary =  @PrimaryLibrary
		,SchoolName =  @SchoolName
		,District =  @District
		,Teacher =  @Teacher
		,GroupTeamName =  @GroupTeamName
		,SchoolType =  @SchoolType
		,LiteracyLevel1 =  @LiteracyLevel1
		,LiteracyLevel2 =  @LiteracyLevel2
		,Custom1 =  @Custom1
		,Custom2 =  @Custom2
		,Custom3 =  @Custom3
		,Custom4 =  @Custom4
		,Custom5 =  @Custom5
		,RegistrationDateStart =  @RegistrationDateStart
		,RegistrationDateEnd =  @RegistrationDateEnd
		,PointsMin =  @PointsMin
		,PointsMax =  @PointsMax
		,PointsStart =  @PointsStart
		,PointsEnd =  @PointsEnd
		,EventCode =  @EventCode
		,EarnedBadge =  @EarnedBadge
		,PhysicalPrizeEarned =  @PhysicalPrizeEarned
		,PhysicalPrizeRedeemed =  @PhysicalPrizeRedeemed
		,PhysicalPrizeStartDate =  @PhysicalPrizeStartDate
		,PhysicalPrizeEndDate =  @PhysicalPrizeEndDate
		,ReviewsMin =  @ReviewsMin
		,ReviewsMax =  @ReviewsMax
		,ReviewTitle =  @ReviewTitle
		,ReviewAuthor =  @ReviewAuthor
		,ReviewStartDate =  @ReviewStartDate
		,ReviewEndDate =  @ReviewEndDate
		,RandomDrawingName =  @RandomDrawingName
		,RandomDrawingNum =  @RandomDrawingNum
		,RandomDrawingStartDate =  @RandomDrawingStartDate
		,RandomDrawingEndDate =  @RandomDrawingEndDate
		,HasBeenDrawn =  @HasBeenDrawn
		,HasRedeemend =  @HasRedeemend
		,PIDInc =  @PIDInc
		,UsernameInc =  @UsernameInc
		,DOBInc =  @DOBInc
		,AgeInc =  @AgeInc
		,SchoolGradeInc =  @SchoolGradeInc
		,FirstNameInc =  @FirstNameInc
		,LastNameInc =  @LastNameInc
		,GenderInc =  @GenderInc
		,EmailAddressInc =  @EmailAddressInc
		,PhoneNumberInc =  @PhoneNumberInc
		,CityInc =  @CityInc
		,StateInc =  @StateInc
		,ZipCodeInc =  @ZipCodeInc
		,CountyInc =  @CountyInc
		,PrimaryLibraryInc =  @PrimaryLibraryInc
		,SchoolNameInc =  @SchoolNameInc
		,DistrictInc =  @DistrictInc
		,TeacherInc =  @TeacherInc
		,GroupTeamNameInc =  @GroupTeamNameInc
		,SchoolTypeInc =  @SchoolTypeInc
		,LiteracyLevel1Inc =  @LiteracyLevel1Inc
		,LiteracyLevel2Inc =  @LiteracyLevel2Inc
		,Custom1Inc =  @Custom1Inc
		,Custom2Inc =  @Custom2Inc
		,Custom3Inc =  @Custom3Inc
		,Custom4Inc =  @Custom4Inc
		,Custom5Inc =  @Custom5Inc
		,RegistrationDateInc =  @RegistrationDateInc
		,PointsInc =  @PointsInc
		,EarnedBadgeInc =  @EarnedBadgeInc
		,PhysicalPrizeNameInc =  @PhysicalPrizeNameInc
		,PhysicalPrizeDateInc =  @PhysicalPrizeDateInc
		,NumReviewsInc =  @NumReviewsInc
		,ReviewAuthorInc =  @ReviewAuthorInc
		,ReviewTitleInc =  @ReviewTitleInc
		,ReviewDateInc =  @ReviewDateInc
		,RandomDrawingNameInc =  @RandomDrawingNameInc
		,RandomDrawingNumInc =  @RandomDrawingNumInc
		,RandomDrawingDateInc =  @RandomDrawingDateInc
		,HasBeenDrawnInc =  @HasBeenDrawnInc
		,HasRedeemendInc =  @HasRedeemendInc
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where RTID = @RTID



; /****** Object:  StoredProcedure [dbo].[app_SentEmailLog_Delete]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_SentEmailLog_Delete]
@EID int 
AS
   Delete from [SentEmailLog] Where EID = @EID



; /****** Object:  StoredProcedure [dbo].[app_SentEmailLog_DeleteAll]    Script Date: 03/10/2014 14:43:26 ******/






CREATE PROCEDURE [dbo].[app_SentEmailLog_DeleteAll]
@EID int 
AS
   Delete from [SentEmailLog] 



; /****** Object:  StoredProcedure [dbo].[app_SentEmailLog_GetAll]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_SentEmailLog_GetAll]
@EID int 
AS
   Select * from [SentEmailLog]



; /****** Object:  StoredProcedure [dbo].[app_SentEmailLog_GetByID]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_SentEmailLog_GetByID]
@EID int 
AS
   Select * from [SentEmailLog] Where EID = @EID



; /****** Object:  StoredProcedure [dbo].[app_SentEmailLog_Insert]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_SentEmailLog_Insert] (
	 @SentDateTime datetime 
	,@SentFrom varchar (150)
	,@SentTo varchar (150)
	,@Subject varchar (150)
	,@Body text 
	,@EID int output 
) AS
Begin
	Insert into SentEmailLog
		(SentDateTime
		,SentFrom
		,SentTo
		,Subject
		,Body
)
	VALUES
		(@SentDateTime
		,@SentFrom
		,@SentTo
		,@Subject
		,@Body
)
	Select @EID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_SentEmailLog_Update]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_SentEmailLog_Update] (
	 @EID int 
	,@SentDateTime datetime 
	,@SentFrom varchar (150)
	,@SentTo varchar (150)
	,@Subject varchar (150)
	,@Body text 

) AS
	Update SentEmailLog
	Set 
		SentDateTime =  @SentDateTime
		,SentFrom =  @SentFrom
		,SentTo =  @SentTo
		,Subject =  @Subject
		,Body =  @Body

	Where EID = @EID



; /****** Object:  StoredProcedure [dbo].[app_SRPReport_Delete]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_SRPReport_Delete]
@RID int 
AS
   Delete from [SRPReport] Where RID = @RID



; /****** Object:  StoredProcedure [dbo].[app_SRPReport_GetAll]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_SRPReport_GetAll]
AS
   Select RID, ReportName, AddedDate
   
   
    from [SRPReport]
    
   



; /****** Object:  StoredProcedure [dbo].[app_SRPReport_GetByID]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_SRPReport_GetByID]
@RID int 
AS
   Select * from [SRPReport] Where RID = @RID



; /****** Object:  StoredProcedure [dbo].[app_SRPReport_Insert]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_SRPReport_Insert] (
	 @RTID int 
	,@ProgId int 
	,@ReportName varchar (150)
	,@DisplayFilters bit 
	,@ReportFormat int 
	,@DOBFrom datetime 
	,@DOBTo datetime 
	,@AgeFrom int 
	,@AgeTo int 
	,@SchoolGrade varchar (5)
	,@FirstName varchar (50)
	,@LastName varchar (50)
	,@Gender varchar (1)
	,@EmailAddress varchar (150)
	,@PhoneNumber varchar (20)
	,@City varchar (20)
	,@State varchar (2)
	,@ZipCode varchar (10)
	,@County varchar (50)
	,@PrimaryLibrary int 
	,@SchoolName varchar (50)
	,@District varchar (50)
	,@Teacher varchar (20)
	,@GroupTeamName varchar (20)
	,@SchoolType int 
	,@LiteracyLevel1 int 
	,@LiteracyLevel2 int 
	,@Custom1 varchar (50)
	,@Custom2 varchar (50)
	,@Custom3 varchar (50)
	,@Custom4 varchar (50)
	,@Custom5 varchar (50)
	,@RegistrationDateStart datetime 
	,@RegistrationDateEnd datetime 
	,@PointsMin int 
	,@PointsMax int 
	,@PointsStart datetime 
	,@PointsEnd datetime 
	,@EventCode varchar (50)
	,@EarnedBadge int 
	,@PhysicalPrizeEarned varchar (50)
	,@PhysicalPrizeRedeemed bit 
	,@PhysicalPrizeStartDate datetime 
	,@PhysicalPrizeEndDate datetime 
	,@ReviewsMin int 
	,@ReviewsMax int 
	,@ReviewTitle varchar (150)
	,@ReviewAuthor varchar (100)
	,@ReviewStartDate datetime 
	,@ReviewEndDate datetime 
	,@RandomDrawingName varchar (50)
	,@RandomDrawingNum int 
	,@RandomDrawingStartDate datetime 
	,@RandomDrawingEndDate datetime 
	,@HasBeenDrawn bit 
	,@HasRedeemend bit 
	,@PIDInc bit 
	,@UsernameInc bit 
	,@DOBInc bit 
	,@AgeInc bit 
	,@SchoolGradeInc bit 
	,@FirstNameInc bit 
	,@LastNameInc bit 
	,@GenderInc bit 
	,@EmailAddressInc bit 
	,@PhoneNumberInc bit 
	,@CityInc bit 
	,@StateInc bit 
	,@ZipCodeInc bit 
	,@CountyInc bit 
	,@PrimaryLibraryInc bit 
	,@SchoolNameInc bit 
	,@DistrictInc bit 
	,@TeacherInc bit 
	,@GroupTeamNameInc bit 
	,@SchoolTypeInc bit 
	,@LiteracyLevel1Inc bit 
	,@LiteracyLevel2Inc bit 
	,@Custom1Inc bit 
	,@Custom2Inc bit 
	,@Custom3Inc bit 
	,@Custom4Inc bit 
	,@Custom5Inc bit 
	,@RegistrationDateInc bit 
	,@PointsInc bit 
	,@EarnedBadgeInc bit 
	,@PhysicalPrizeNameInc bit 
	,@PhysicalPrizeDateInc bit 
	,@NumReviewsInc bit 
	,@ReviewAuthorInc bit 
	,@ReviewTitleInc bit 
	,@ReviewDateInc bit 
	,@RandomDrawingNameInc bit 
	,@RandomDrawingNumInc bit 
	,@RandomDrawingDateInc bit 
	,@HasBeenDrawnInc bit 
	,@HasRedeemendInc bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@RID int output 
) AS
Begin
	Insert into SRPReport
		(RTID
		,ProgId
		,ReportName
		,DisplayFilters
		,ReportFormat
		,DOBFrom
		,DOBTo
		,AgeFrom
		,AgeTo
		,SchoolGrade
		,FirstName
		,LastName
		,Gender
		,EmailAddress
		,PhoneNumber
		,City
		,State
		,ZipCode
		,County
		,PrimaryLibrary
		,SchoolName
		,District
		,Teacher
		,GroupTeamName
		,SchoolType
		,LiteracyLevel1
		,LiteracyLevel2
		,Custom1
		,Custom2
		,Custom3
		,Custom4
		,Custom5
		,RegistrationDateStart
		,RegistrationDateEnd
		,PointsMin
		,PointsMax
		,PointsStart
		,PointsEnd
		,EventCode
		,EarnedBadge
		,PhysicalPrizeEarned
		,PhysicalPrizeRedeemed
		,PhysicalPrizeStartDate
		,PhysicalPrizeEndDate
		,ReviewsMin
		,ReviewsMax
		,ReviewTitle
		,ReviewAuthor
		,ReviewStartDate
		,ReviewEndDate
		,RandomDrawingName
		,RandomDrawingNum
		,RandomDrawingStartDate
		,RandomDrawingEndDate
		,HasBeenDrawn
		,HasRedeemend
		,PIDInc
		,UsernameInc
		,DOBInc
		,AgeInc
		,SchoolGradeInc
		,FirstNameInc
		,LastNameInc
		,GenderInc
		,EmailAddressInc
		,PhoneNumberInc
		,CityInc
		,StateInc
		,ZipCodeInc
		,CountyInc
		,PrimaryLibraryInc
		,SchoolNameInc
		,DistrictInc
		,TeacherInc
		,GroupTeamNameInc
		,SchoolTypeInc
		,LiteracyLevel1Inc
		,LiteracyLevel2Inc
		,Custom1Inc
		,Custom2Inc
		,Custom3Inc
		,Custom4Inc
		,Custom5Inc
		,RegistrationDateInc
		,PointsInc
		,EarnedBadgeInc
		,PhysicalPrizeNameInc
		,PhysicalPrizeDateInc
		,NumReviewsInc
		,ReviewAuthorInc
		,ReviewTitleInc
		,ReviewDateInc
		,RandomDrawingNameInc
		,RandomDrawingNumInc
		,RandomDrawingDateInc
		,HasBeenDrawnInc
		,HasRedeemendInc
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@RTID
		,@ProgId
		,@ReportName
		,@DisplayFilters
		,@ReportFormat
		,@DOBFrom
		,@DOBTo
		,@AgeFrom
		,@AgeTo
		,@SchoolGrade
		,@FirstName
		,@LastName
		,@Gender
		,@EmailAddress
		,@PhoneNumber
		,@City
		,@State
		,@ZipCode
		,@County
		,@PrimaryLibrary
		,@SchoolName
		,@District
		,@Teacher
		,@GroupTeamName
		,@SchoolType
		,@LiteracyLevel1
		,@LiteracyLevel2
		,@Custom1
		,@Custom2
		,@Custom3
		,@Custom4
		,@Custom5
		,@RegistrationDateStart
		,@RegistrationDateEnd
		,@PointsMin
		,@PointsMax
		,@PointsStart
		,@PointsEnd
		,@EventCode
		,@EarnedBadge
		,@PhysicalPrizeEarned
		,@PhysicalPrizeRedeemed
		,@PhysicalPrizeStartDate
		,@PhysicalPrizeEndDate
		,@ReviewsMin
		,@ReviewsMax
		,@ReviewTitle
		,@ReviewAuthor
		,@ReviewStartDate
		,@ReviewEndDate
		,@RandomDrawingName
		,@RandomDrawingNum
		,@RandomDrawingStartDate
		,@RandomDrawingEndDate
		,@HasBeenDrawn
		,@HasRedeemend
		,@PIDInc
		,@UsernameInc
		,@DOBInc
		,@AgeInc
		,@SchoolGradeInc
		,@FirstNameInc
		,@LastNameInc
		,@GenderInc
		,@EmailAddressInc
		,@PhoneNumberInc
		,@CityInc
		,@StateInc
		,@ZipCodeInc
		,@CountyInc
		,@PrimaryLibraryInc
		,@SchoolNameInc
		,@DistrictInc
		,@TeacherInc
		,@GroupTeamNameInc
		,@SchoolTypeInc
		,@LiteracyLevel1Inc
		,@LiteracyLevel2Inc
		,@Custom1Inc
		,@Custom2Inc
		,@Custom3Inc
		,@Custom4Inc
		,@Custom5Inc
		,@RegistrationDateInc
		,@PointsInc
		,@EarnedBadgeInc
		,@PhysicalPrizeNameInc
		,@PhysicalPrizeDateInc
		,@NumReviewsInc
		,@ReviewAuthorInc
		,@ReviewTitleInc
		,@ReviewDateInc
		,@RandomDrawingNameInc
		,@RandomDrawingNumInc
		,@RandomDrawingDateInc
		,@HasBeenDrawnInc
		,@HasRedeemendInc
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @RID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_SRPReport_Update]    Script Date: 03/10/2014 14:43:26 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_SRPReport_Update] (
	 @RID int 
	,@RTID int 
	,@ProgId int 
	,@ReportName varchar (150)
	,@DisplayFilters bit 
	,@ReportFormat int 
	,@DOBFrom datetime 
	,@DOBTo datetime 
	,@AgeFrom int 
	,@AgeTo int 
	,@SchoolGrade varchar (5)
	,@FirstName varchar (50)
	,@LastName varchar (50)
	,@Gender varchar (1)
	,@EmailAddress varchar (150)
	,@PhoneNumber varchar (20)
	,@City varchar (20)
	,@State varchar (2)
	,@ZipCode varchar (10)
	,@County varchar (50)
	,@PrimaryLibrary int 
	,@SchoolName varchar (50)
	,@District varchar (50)
	,@Teacher varchar (20)
	,@GroupTeamName varchar (20)
	,@SchoolType int 
	,@LiteracyLevel1 int 
	,@LiteracyLevel2 int 
	,@Custom1 varchar (50)
	,@Custom2 varchar (50)
	,@Custom3 varchar (50)
	,@Custom4 varchar (50)
	,@Custom5 varchar (50)
	,@RegistrationDateStart datetime 
	,@RegistrationDateEnd datetime 
	,@PointsMin int 
	,@PointsMax int 
	,@PointsStart datetime 
	,@PointsEnd datetime 
	,@EventCode varchar (50)
	,@EarnedBadge int 
	,@PhysicalPrizeEarned varchar (50)
	,@PhysicalPrizeRedeemed bit 
	,@PhysicalPrizeStartDate datetime 
	,@PhysicalPrizeEndDate datetime 
	,@ReviewsMin int 
	,@ReviewsMax int 
	,@ReviewTitle varchar (150)
	,@ReviewAuthor varchar (100)
	,@ReviewStartDate datetime 
	,@ReviewEndDate datetime 
	,@RandomDrawingName varchar (50)
	,@RandomDrawingNum int 
	,@RandomDrawingStartDate datetime 
	,@RandomDrawingEndDate datetime 
	,@HasBeenDrawn bit 
	,@HasRedeemend bit 
	,@PIDInc bit 
	,@UsernameInc bit 
	,@DOBInc bit 
	,@AgeInc bit 
	,@SchoolGradeInc bit 
	,@FirstNameInc bit 
	,@LastNameInc bit 
	,@GenderInc bit 
	,@EmailAddressInc bit 
	,@PhoneNumberInc bit 
	,@CityInc bit 
	,@StateInc bit 
	,@ZipCodeInc bit 
	,@CountyInc bit 
	,@PrimaryLibraryInc bit 
	,@SchoolNameInc bit 
	,@DistrictInc bit 
	,@TeacherInc bit 
	,@GroupTeamNameInc bit 
	,@SchoolTypeInc bit 
	,@LiteracyLevel1Inc bit 
	,@LiteracyLevel2Inc bit 
	,@Custom1Inc bit 
	,@Custom2Inc bit 
	,@Custom3Inc bit 
	,@Custom4Inc bit 
	,@Custom5Inc bit 
	,@RegistrationDateInc bit 
	,@PointsInc bit 
	,@EarnedBadgeInc bit 
	,@PhysicalPrizeNameInc bit 
	,@PhysicalPrizeDateInc bit 
	,@NumReviewsInc bit 
	,@ReviewAuthorInc bit 
	,@ReviewTitleInc bit 
	,@ReviewDateInc bit 
	,@RandomDrawingNameInc bit 
	,@RandomDrawingNumInc bit 
	,@RandomDrawingDateInc bit 
	,@HasBeenDrawnInc bit 
	,@HasRedeemendInc bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update SRPReport
	Set 
		RTID =  @RTID
		,ProgId =  @ProgId
		,ReportName =  @ReportName
		,DisplayFilters =  @DisplayFilters
		,ReportFormat =  @ReportFormat
		,DOBFrom =  @DOBFrom
		,DOBTo =  @DOBTo
		,AgeFrom =  @AgeFrom
		,AgeTo =  @AgeTo
		,SchoolGrade =  @SchoolGrade
		,FirstName =  @FirstName
		,LastName =  @LastName
		,Gender =  @Gender
		,EmailAddress =  @EmailAddress
		,PhoneNumber =  @PhoneNumber
		,City =  @City
		,State =  @State
		,ZipCode =  @ZipCode
		,County =  @County
		,PrimaryLibrary =  @PrimaryLibrary
		,SchoolName =  @SchoolName
		,District =  @District
		,Teacher =  @Teacher
		,GroupTeamName =  @GroupTeamName
		,SchoolType =  @SchoolType
		,LiteracyLevel1 =  @LiteracyLevel1
		,LiteracyLevel2 =  @LiteracyLevel2
		,Custom1 =  @Custom1
		,Custom2 =  @Custom2
		,Custom3 =  @Custom3
		,Custom4 =  @Custom4
		,Custom5 =  @Custom5
		,RegistrationDateStart =  @RegistrationDateStart
		,RegistrationDateEnd =  @RegistrationDateEnd
		,PointsMin =  @PointsMin
		,PointsMax =  @PointsMax
		,PointsStart =  @PointsStart
		,PointsEnd =  @PointsEnd
		,EventCode =  @EventCode
		,EarnedBadge =  @EarnedBadge
		,PhysicalPrizeEarned =  @PhysicalPrizeEarned
		,PhysicalPrizeRedeemed =  @PhysicalPrizeRedeemed
		,PhysicalPrizeStartDate =  @PhysicalPrizeStartDate
		,PhysicalPrizeEndDate =  @PhysicalPrizeEndDate
		,ReviewsMin =  @ReviewsMin
		,ReviewsMax =  @ReviewsMax
		,ReviewTitle =  @ReviewTitle
		,ReviewAuthor =  @ReviewAuthor
		,ReviewStartDate =  @ReviewStartDate
		,ReviewEndDate =  @ReviewEndDate
		,RandomDrawingName =  @RandomDrawingName
		,RandomDrawingNum =  @RandomDrawingNum
		,RandomDrawingStartDate =  @RandomDrawingStartDate
		,RandomDrawingEndDate =  @RandomDrawingEndDate
		,HasBeenDrawn =  @HasBeenDrawn
		,HasRedeemend =  @HasRedeemend
		,PIDInc =  @PIDInc
		,UsernameInc =  @UsernameInc
		,DOBInc =  @DOBInc
		,AgeInc =  @AgeInc
		,SchoolGradeInc =  @SchoolGradeInc
		,FirstNameInc =  @FirstNameInc
		,LastNameInc =  @LastNameInc
		,GenderInc =  @GenderInc
		,EmailAddressInc =  @EmailAddressInc
		,PhoneNumberInc =  @PhoneNumberInc
		,CityInc =  @CityInc
		,StateInc =  @StateInc
		,ZipCodeInc =  @ZipCodeInc
		,CountyInc =  @CountyInc
		,PrimaryLibraryInc =  @PrimaryLibraryInc
		,SchoolNameInc =  @SchoolNameInc
		,DistrictInc =  @DistrictInc
		,TeacherInc =  @TeacherInc
		,GroupTeamNameInc =  @GroupTeamNameInc
		,SchoolTypeInc =  @SchoolTypeInc
		,LiteracyLevel1Inc =  @LiteracyLevel1Inc
		,LiteracyLevel2Inc =  @LiteracyLevel2Inc
		,Custom1Inc =  @Custom1Inc
		,Custom2Inc =  @Custom2Inc
		,Custom3Inc =  @Custom3Inc
		,Custom4Inc =  @Custom4Inc
		,Custom5Inc =  @Custom5Inc
		,RegistrationDateInc =  @RegistrationDateInc
		,PointsInc =  @PointsInc
		,EarnedBadgeInc =  @EarnedBadgeInc
		,PhysicalPrizeNameInc =  @PhysicalPrizeNameInc
		,PhysicalPrizeDateInc =  @PhysicalPrizeDateInc
		,NumReviewsInc =  @NumReviewsInc
		,ReviewAuthorInc =  @ReviewAuthorInc
		,ReviewTitleInc =  @ReviewTitleInc
		,ReviewDateInc =  @ReviewDateInc
		,RandomDrawingNameInc =  @RandomDrawingNameInc
		,RandomDrawingNumInc =  @RandomDrawingNumInc
		,RandomDrawingDateInc =  @RandomDrawingDateInc
		,HasBeenDrawnInc =  @HasBeenDrawnInc
		,HasRedeemendInc =  @HasRedeemendInc
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where RID = @RID



; /****** Object:  StoredProcedure [dbo].[app_SRPSettings_Delete]    Script Date: 03/10/2014 14:43:27 ******/






--Create the Delete Proc
CREATE PROCEDURE [dbo].[app_SRPSettings_Delete]
@SID int 
AS
   Delete from [SRPSettings] Where SID = @SID



; /****** Object:  StoredProcedure [dbo].[app_SRPSettings_GetAll]    Script Date: 03/10/2014 14:43:27 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_SRPSettings_GetAll]
AS
   Select * from [SRPSettings]



; /****** Object:  StoredProcedure [dbo].[app_SRPSettings_GetByID]    Script Date: 03/10/2014 14:43:27 ******/






--Create the Select Proc
CREATE PROCEDURE [dbo].[app_SRPSettings_GetByID]
@SID int 
AS
   Select * from [SRPSettings] Where SID = @SID



; /****** Object:  StoredProcedure [dbo].[app_SRPSettings_GetByName]    Script Date: 03/10/2014 14:43:27 ******/






CREATE PROCEDURE [dbo].[app_SRPSettings_GetByName]
@Name varchar(50) 
AS
   Select * from [SRPSettings] Where Name = @Name



; /****** Object:  StoredProcedure [dbo].[app_SRPSettings_Insert]    Script Date: 03/10/2014 14:43:27 ******/






--Create the Insert Proc
CREATE PROCEDURE [dbo].[app_SRPSettings_Insert] (
	 @Name varchar (50)
	,@Value text 
	,@StorageType varchar (50)
	,@EditType varchar (50)
	,@ModID int 
	,@Label varchar (50)
	,@Description varchar (500)
	,@ValueList varchar (5000)
	,@DefaultValue text
	,@SID int output 
) AS
Begin
	Insert into SRPSettings
		(Name
		,Value
		,StorageType
		,EditType
		,ModID
		,Label
		,Description
		,ValueList
		,DefaultValue
)
	VALUES
		(@Name
		,@Value
		,@StorageType
		,@EditType
		,@ModID
		,@Label
		,@Description
		,@ValueList
		,@DefaultValue
)
	Select @SID = SCOPE_IDENTITY()
END



; /****** Object:  StoredProcedure [dbo].[app_SRPSettings_Update]    Script Date: 03/10/2014 14:43:27 ******/






--Create the Update Proc
CREATE PROCEDURE [dbo].[app_SRPSettings_Update] (
	 @SID int 
	,@Name varchar (50)
	,@Value text 
	,@StorageType varchar (50)
	,@EditType varchar (50)
	,@ModID int 
	,@Label varchar (50)
	,@Description varchar (500)
	,@ValueList varchar (5000)
	,@DefaultValue text 

) AS
	Update SRPSettings
	Set 
		Name =  @Name
		,Value =  @Value
		,StorageType =  @StorageType
		,EditType =  @EditType
		,ModID =  @ModID
		,Label =  @Label
		,Description =  @Description
		,ValueList =  @ValueList
		,DefaultValue =  @DefaultValue

	Where SID = @SID



; /****** Object:  StoredProcedure [dbo].[cbspSRPGroups_Delete]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPGroups_Delete]
	@GID		int
  , @ActionUsername varchar(50)	
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DELETE FROM
		 dbo.SRPGroups
	WHERE 
		GID = @GID





; /****** Object:  StoredProcedure [dbo].[cbspSRPGroups_DeleteAll]    Script Date: 03/10/2014 14:43:27 ******/









-- Deletes all records from the 'SRPGroups' table.
CREATE PROCEDURE [dbo].[cbspSRPGroups_DeleteAll]
AS
	DELETE FROM [dbo].[SRPGroups]





; /****** Object:  StoredProcedure [dbo].[cbspSRPGroups_DeleteByPrimaryKey]    Script Date: 03/10/2014 14:43:27 ******/









-- Deletes a record from the 'SRPGroups' table using the primary key value.
CREATE PROCEDURE [dbo].[cbspSRPGroups_DeleteByPrimaryKey]
	@GID int
AS
	DELETE FROM [dbo].[SRPGroups] WHERE
		[GID] = @GID





; /****** Object:  StoredProcedure [dbo].[cbspSRPGroups_Get]    Script Date: 03/10/2014 14:43:27 ******/








CREATE PROCEDURE [dbo].[cbspSRPGroups_Get]
	@GID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT *
	FROM dbo.SRPGroups
	WHERE 
		GID = @GID





; /****** Object:  StoredProcedure [dbo].[cbspSRPGroups_GetAll]    Script Date: 03/10/2014 14:43:27 ******/









-- Gets all records from the 'SRPGroups' table.
CREATE PROCEDURE [dbo].[cbspSRPGroups_GetAll]
AS
	SELECT * FROM [dbo].[SRPGroups]





; /****** Object:  StoredProcedure [dbo].[cbspSRPGroups_GetByPrimaryKey]    Script Date: 03/10/2014 14:43:27 ******/









-- Gets a record from the 'SRPGroups' table using the primary key value.
CREATE PROCEDURE [dbo].[cbspSRPGroups_GetByPrimaryKey]
	@GID int
AS
	SELECT * FROM [dbo].[SRPGroups] WHERE
		[GID] = @GID





; /****** Object:  StoredProcedure [dbo].[cbspSRPGroups_Insert]    Script Date: 03/10/2014 14:43:27 ******/









-- Inserts a new record into the 'SRPGroups' table.
CREATE PROCEDURE [dbo].[cbspSRPGroups_Insert]
	@GroupName varchar(50),
	@GroupDescription varchar(255),
	@ActionUsername varchar(50)
AS
	INSERT INTO [dbo].[SRPGroups]
	(
		[GroupName],
		[GroupDescription],
		[LastModDate],
		[LastModUser],
		[AddedDate],
		[AddedUser]
	)
	VALUES
	(
		@GroupName,
		@GroupDescription,
		GETDATE(),
		@ActionUsername,
		GETDATE(),
		@ActionUsername
	)
	SELECT @@IDENTITY





; /****** Object:  StoredProcedure [dbo].[cbspSRPGroups_Update]    Script Date: 03/10/2014 14:43:27 ******/









-- Updates a record in the 'SRPGroups' table.
CREATE PROCEDURE [dbo].[cbspSRPGroups_Update]
	-- The rest of writeable parameters
	@GroupName varchar(50),
	@GroupDescription varchar(255),
	@ActionUsername varchar(50),
	-- Primary key parameters
	@GID int
AS
	UPDATE [dbo].[SRPGroups] SET
		[GroupName] = @GroupName,
		[GroupDescription] = @GroupDescription,
		[LastModDate] = GETDATE(),
		[LastModUser] = @ActionUsername
	WHERE
		[GID] = @GID





; /****** Object:  StoredProcedure [dbo].[cbspSRPGroupsGroups_GetSpecialUserPermissionsNotGranted]    Script Date: 03/10/2014 14:43:27 ******/








CREATE PROCEDURE [dbo].[cbspSRPGroupsGroups_GetSpecialUserPermissionsNotGranted]
	@GID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	SELECT     @GID as GID, dbo.SRPPermissionsMaster.PermissionID, 
						  dbo.SRPPermissionsMaster.PermissionName, 
						  dbo.SRPPermissionsMaster.PermissionDesc, 
						  null as AddedDate, 'N/A' as AddedUser
	FROM dbo.SRPPermissionsMaster
	WHERE 
		dbo.SRPPermissionsMaster.PermissionID NOT IN 
			(
				SELECT     dbo.SRPPermissionsMaster.PermissionID
				FROM         dbo.SRPPermissionsMaster INNER JOIN
                      dbo.SRPGroupPermissions ON dbo.SRPPermissionsMaster.PermissionID = dbo.SRPGroupPermissions.PermissionID INNER JOIN
                      dbo.SRPGroups ON dbo.SRPGroupPermissions.GID = dbo.SRPGroups.GID
                WHERE 
					dbo.SRPGroupPermissions.GID = @GID
			)





; /****** Object:  StoredProcedure [dbo].[cbspSRPPermissionsMaster_Delete]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPPermissionsMaster_Delete]
	  @PermissionID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	DELETE FROM
		dbo.SRPPermissionsMaster 
	WHERE
		@PermissionID = PermissionID





; /****** Object:  StoredProcedure [dbo].[cbspSRPPermissionsMaster_DeleteByModule]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPPermissionsMaster_DeleteByModule]
	  @ModId		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	DELETE FROM
		dbo.SRPPermissionsMaster 
	WHERE
		ModId = @ModId





; /****** Object:  StoredProcedure [dbo].[cbspSRPPermissionsMaster_Get]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPPermissionsMaster_Get]
	@PermissionID int = -1
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SELECT 
		*
	FROM
		dbo.SRPPermissionsMaster
	WHERE
		PermissionID = @PermissionID





; /****** Object:  StoredProcedure [dbo].[cbspSRPPermissionsMaster_GetByModule]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPPermissionsMaster_GetByModule]
	@ModID int = -1
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SELECT 
		*
	FROM
		dbo.SRPPermissionsMaster
	WHERE
		ModID = @ModID





; /****** Object:  StoredProcedure [dbo].[cbspSRPPermissionsMaster_GetByModuleName]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPPermissionsMaster_GetByModuleName]
	@ModuleName		varchar(50) = 'N/A'
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SELECT 
		 dbo.SRPPermissionsMaster.*
	FROM
		 dbo.SRPModule 
		 INNER JOIN dbo.SRPPermissionsMaster ON 
			dbo.SRPModule.ModId = dbo.SRPPermissionsMaster.MODID
	WHERE
		dbo.SRPModule.ModName = @ModuleName





; /****** Object:  StoredProcedure [dbo].[cbspSRPPermissionsMaster_GetByName]    Script Date: 03/10/2014 14:43:27 ******/









------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPPermissionsMaster_GetByName]
	@PermissionName		varchar(50) = 'N/A'
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SELECT 
		*
	FROM
		dbo.SRPPermissionsMaster
	WHERE
		PermissionName = @PermissionName





; /****** Object:  StoredProcedure [dbo].[cbspSRPPermissionsMaster_Insert]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPPermissionsMaster_Insert]
	  @PermissionID		int
	, @PermissionName	varchar(50)
	, @PermissionDesc	text
	, @MODID				int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	INSERT INTO
		dbo.SRPPermissionsMaster 
		(PermissionID, PermissionName, PermissionDesc, MODID)
	VALUES
		(@PermissionID, @PermissionName, @PermissionDesc, @MODID)





; /****** Object:  StoredProcedure [dbo].[cbspSRPPermissionsMaster_Update]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPPermissionsMaster_Update]
	  @PermissionID		int
	, @PermissionName	varchar(50)
	, @PermissionDesc	text
	, @MODID				int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	UPDATE
		dbo.SRPPermissionsMaster
	SET
		  PermissionName = @PermissionName
		, PermissionDesc = @PermissionDesc
		, MODID = @MODID
	WHERE
		PermissionID = @PermissionID





; /****** Object:  StoredProcedure [dbo].[cbspSRPSettings_DeleteAll]    Script Date: 03/10/2014 14:43:27 ******/








-- Deletes all records from the 'SRPSettings' table.
CREATE PROCEDURE [dbo].[cbspSRPSettings_DeleteAll]
AS
	DELETE FROM [dbo].[SRPSettings]




; /****** Object:  StoredProcedure [dbo].[cbspSRPSettings_DeleteByPrimaryKey]    Script Date: 03/10/2014 14:43:27 ******/








-- Deletes a record from the 'SRPSettings' table using the primary key value.
CREATE PROCEDURE [dbo].[cbspSRPSettings_DeleteByPrimaryKey]
	@SID int
AS
	DELETE FROM [dbo].[SRPSettings] WHERE
		[SID] = @SID




; /****** Object:  StoredProcedure [dbo].[cbspSRPSettings_GetAll]    Script Date: 03/10/2014 14:43:27 ******/








-- Gets all records from the 'SRPSettings' table.
CREATE PROCEDURE [dbo].[cbspSRPSettings_GetAll]
AS
	SELECT * FROM [dbo].[SRPSettings]




; /****** Object:  StoredProcedure [dbo].[cbspSRPSettings_GetByName]    Script Date: 03/10/2014 14:43:27 ******/








-- Gets a record from the 'SRPSettings' table using the primary key value.
CREATE PROCEDURE [dbo].[cbspSRPSettings_GetByName]
	@Name varchar(50)
AS
	SELECT * FROM [dbo].[SRPSettings] WHERE
		[Name] = @Name




; /****** Object:  StoredProcedure [dbo].[cbspSRPSettings_GetByPrimaryKey]    Script Date: 03/10/2014 14:43:27 ******/








-- Gets a record from the 'SRPSettings' table using the primary key value.
CREATE PROCEDURE [dbo].[cbspSRPSettings_GetByPrimaryKey]
	@SID int
AS
	SELECT * FROM [dbo].[SRPSettings] WHERE
		[SID] = @SID




; /****** Object:  StoredProcedure [dbo].[cbspSRPSettings_Insert]    Script Date: 03/10/2014 14:43:27 ******/








-- Inserts a new record into the 'SRPSettings' table.
create  PROCEDURE [dbo].[cbspSRPSettings_Insert]
	@Name varchar(50),
	@Value text,
	@StorageType varchar(50),
	@EditType varchar(50),
	@ModID int,
	@Label varchar(50),
	@Description varchar(500),
	@ValueList varchar(5000),
	@DefaultValue text
AS
	INSERT INTO [dbo].[SRPSettings]
	(
		[Name],
		[Value],
		[StorageType],
		[EditType],
		[ModID],
		[Label],
		[Description],
		[ValueList],
		[DefaultValue]
	)
	VALUES
	(
		@Name,
		@Value,
		@StorageType,
		@EditType,
		@ModID,
		@Label,
		@Description,
		@ValueList,
		@DefaultValue
	)
	SELECT @@IDENTITY




; /****** Object:  StoredProcedure [dbo].[cbspSRPSettings_Update]    Script Date: 03/10/2014 14:43:27 ******/








-- Updates a record in the 'SRPSettings' table.
create PROCEDURE [dbo].[cbspSRPSettings_Update]
	-- The rest of writeable parameters
	@Name varchar(50),
	@Value text,
	@StorageType varchar(50),
	@EditType varchar(50),
	@ModID int,
	@Label varchar(50),
	@Description varchar(500),
	@ValueList varchar(5000),
	@DefaultValue text,
	-- Primary key parameters
	@SID int
AS
	UPDATE [dbo].[SRPSettings] SET
		[Name] = @Name,
		[Value] = @Value,
		[StorageType] = @StorageType,
		[EditType] = @EditType,
		[ModID] = @ModID,
		[Label] = @Label,
		[Description] = @Description,
		[ValueList] = @ValueList,
		[DefaultValue] = @DefaultValue
	WHERE
		[SID] = @SID




; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_Delete]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_Delete]
	@UID		int
  , @ActionUsername varchar(50)	
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	UPDATE
		 dbo.SRPUser
	SET
		  isDeleted = 1
		, DeletedDate = getdate()
		, LastModDate = getdate()
		, LastModUser = @ActionUsername
	WHERE 
		UID = @UID





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_EmailExists]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_EmailExists]
	@EmailAddress		varchar(128)
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
declare @RowCount int
	SELECT @RowCount =  Count(*)
	FROM dbo.SRPUser
	WHERE 
		LOWER(EmailAddress) = LOWER(@EmailAddress)
	IF @RowCount > 0
		return 1
	ELSE
		return 0





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_Get]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_Get]
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT *
	FROM dbo.SRPUser
	WHERE 
		UID = @UID





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetActiveSessions]    Script Date: 03/10/2014 14:43:27 ******/








----------------------------------------------------------------	
CREATE PROCEDURE [dbo].[cbspSRPUser_GetActiveSessions]
as			
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

SELECT     dbo.SRPUserLoginHistory.UIDLH, dbo.SRPUserLoginHistory.UID, dbo.SRPUser.Username, dbo.SRPUser.FirstName, dbo.SRPUser.LastName, 
                      dbo.SRPUser.EmailAddress, dbo.SRPUserLoginHistory.SessionsID, dbo.SRPUserLoginHistory.StartDateTime, dbo.SRPUserLoginHistory.IP, 
                      dbo.SRPUserLoginHistory.MachineName, dbo.SRPUserLoginHistory.Browser, dbo.SRPUserLoginHistory.EndDateTime
FROM         dbo.SRPUser INNER JOIN
                      dbo.SRPUserLoginHistory ON dbo.SRPUser.UID = dbo.SRPUserLoginHistory.UID
where                       
	 dbo.SRPUserLoginHistory.EndDateTime is null


	





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetAll]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_GetAll]
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT 
		*
	FROM
		dbo.SRPUser
	WHERE 
		IsDeleted = 0





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetAllPermissions]    Script Date: 03/10/2014 14:43:27 ******/








CREATE PROCEDURE [dbo].[cbspSRPUser_GetAllPermissions]
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT      dbo.SRPPermissionsMaster.PermissionID, 
						  dbo.SRPPermissionsMaster.PermissionName, 
						  dbo.SRPPermissionsMaster.PermissionDesc
	FROM         dbo.SRPPermissionsMaster INNER JOIN
                    dbo.SRPGroupPermissions ON 
					dbo.SRPPermissionsMaster.PermissionID = dbo.SRPGroupPermissions.PermissionID INNER JOIN
                    dbo.SRPGroups ON dbo.SRPGroupPermissions.GID = dbo.SRPGroups.GID
	WHERE 
		dbo.SRPGroups.GID in (select GID from SRPUserGroups Where UID = @UID)
UNION		
			SELECT     dbo.SRPPermissionsMaster.PermissionID, 
						  dbo.SRPPermissionsMaster.PermissionName, 
						  dbo.SRPPermissionsMaster.PermissionDesc
	FROM         dbo.SRPPermissionsMaster INNER JOIN
                    dbo.SRPUserPermissions ON 
					dbo.SRPPermissionsMaster.PermissionID = dbo.SRPUserPermissions.PermissionID INNER JOIN
                    dbo.SRPUser ON dbo.SRPUserPermissions.UID = dbo.SRPUser.UID
	WHERE 
		dbo.SRPUser.UID = @UID




; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetAllPermissionsAUDIT]    Script Date: 03/10/2014 14:43:27 ******/








CREATE PROCEDURE [dbo].[cbspSRPUser_GetAllPermissionsAUDIT]			
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED


	SELECT  dbo.SRPGroups.GID as ID,   'G' as Type,  dbo.SRPGroups.GroupName as Name, GroupDescription as Description,
		 dbo.SRPPermissionsMaster.PermissionID, 
						  dbo.SRPPermissionsMaster.PermissionName, 
						  dbo.SRPPermissionsMaster.PermissionDesc, 
						  dbo.SRPGroupPermissions.AddedDate, 
						  dbo.SRPGroupPermissions.AddedUser
	FROM         dbo.SRPPermissionsMaster INNER JOIN
                    dbo.SRPGroupPermissions ON 
					dbo.SRPPermissionsMaster.PermissionID = dbo.SRPGroupPermissions.PermissionID INNER JOIN
                    dbo.SRPGroups ON dbo.SRPGroupPermissions.GID = dbo.SRPGroups.GID
	WHERE 
		dbo.SRPGroups.GID in (select GID from SRPUserGroups Where UID = @UID)
union		
	SELECT     dbo.SRPUser.UID as ID, 'U' as type, Firstname + ' ' + LastName as Name,  '' as Description, dbo.SRPPermissionsMaster.PermissionID, 
						  dbo.SRPPermissionsMaster.PermissionName, 
						  dbo.SRPPermissionsMaster.PermissionDesc, 
						  dbo.SRPUserPermissions.AddedDate, 
						  dbo.SRPUserPermissions.AddedUser
	FROM         dbo.SRPPermissionsMaster INNER JOIN
                    dbo.SRPUserPermissions ON 
					dbo.SRPPermissionsMaster.PermissionID = dbo.SRPUserPermissions.PermissionID INNER JOIN
                    dbo.SRPUser ON dbo.SRPUserPermissions.UID = dbo.SRPUser.UID
	WHERE 
		dbo.SRPUser.UID = @UID
order by PermissionID	
		





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetByUsername]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_GetByUsername]
	@Username		varchar(50)
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT *
	FROM dbo.SRPUser
	WHERE 
		Username = @Username





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetGroups]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------



------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_GetGroups]
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT     dbo.SRPUser.UID, dbo.SRPGroups.GID, 
						  dbo.SRPGroups.GroupName, dbo.SRPGroups.GroupDescription, dbo.SRPUserGroups.AddedDate, dbo.SRPUserGroups.AddedUser
	FROM         dbo.SRPGroups INNER JOIN
                      dbo.SRPUserGroups ON dbo.SRPGroups.GID = dbo.SRPUserGroups.GID INNER JOIN
                      dbo.SRPUser ON dbo.SRPUserGroups.UID = dbo.SRPUser.UID
	WHERE 
		dbo.SRPUser.UID = @UID





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetGroupsFlagged]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------

CREATE PROCEDURE [dbo].[cbspSRPUser_GetGroupsFlagged]
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

SELECT     @UID, dbo.SRPGroups.GID, 
			dbo.SRPGroups.GroupName, 
			dbo.SRPGroups.GroupDescription, 
			dbo.SRPUserGroups.AddedDate, 
			dbo.SRPUserGroups.AddedUser, 
                      case  
						when dbo.SRPUserGroups.AddedDate is null then 0 
						else 1 end  AS Checked
						
			
FROM         dbo.SRPGroups LEFT OUTER JOIN
                      dbo.SRPUserGroups ON dbo.SRPGroups.GID = dbo.SRPUserGroups.GID 
						AND dbo.SRPUserGroups.UID = @UID
where UID = @UID or UID is null






; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetGroupsNonMembers]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_GetGroupsNonMembers]
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	SELECT     @UID as UID, dbo.SRPGroups.GID, 
						  dbo.SRPGroups.GroupName, dbo.SRPGroups.GroupDescription, null as AddedDate, 'N/A' as AddedUser
	FROM dbo.SRPGroups
	WHERE 
		dbo.SRPGroups.GID NOT IN 
			(
				SELECT     dbo.SRPGroups.GID
				FROM         dbo.SRPGroups INNER JOIN
                      dbo.SRPUserGroups ON dbo.SRPGroups.GID = dbo.SRPUserGroups.GID INNER JOIN
                      dbo.SRPUser ON dbo.SRPUserGroups.UID = dbo.SRPUser.UID
                WHERE 
					dbo.SRPUserGroups.UID = @UID
			)





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetLoginHistory]    Script Date: 03/10/2014 14:43:27 ******/






---------------------------------------------------------------	

CREATE PROCEDURE [dbo].[cbspSRPUser_GetLoginHistory]
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT 	
		h.*, u.Username, u.FirstName + ' ' + u.LastName as Name
	FROM 
		dbo.SRPUserLoginHistory h, dbo.SRPUser u
	where 
		u.UID = @UID 
		and
		u.UID = h.UID
	order by StartDateTime desc
	



; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetLoginNow]    Script Date: 03/10/2014 14:43:27 ******/








create PROCEDURE [dbo].[cbspSRPUser_GetLoginNow]
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT 	
		h.*, u.Username, u.FirstName + ' ' + u.LastName as Name
	FROM 
		dbo.SRPUserLoginHistory h, dbo.SRPUser u
	where 
		EndDateTime is null
		and
		u.UID = h.UID
	order by StartDateTime desc
	




; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetSpecialUserPermissions]    Script Date: 03/10/2014 14:43:27 ******/









------------------------------------------------------------------
			
			

------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_GetSpecialUserPermissions]
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT     dbo.SRPUser.UID, dbo.SRPPermissionsMaster.PermissionID, 
						  dbo.SRPPermissionsMaster.PermissionName, 
						  dbo.SRPPermissionsMaster.PermissionDesc, 
						  dbo.SRPUserPermissions.AddedDate, 
						  dbo.SRPUserPermissions.AddedUser
	FROM         dbo.SRPPermissionsMaster INNER JOIN
                    dbo.SRPUserPermissions ON 
					dbo.SRPPermissionsMaster.PermissionID = dbo.SRPUserPermissions.PermissionID INNER JOIN
                    dbo.SRPUser ON dbo.SRPUserPermissions.UID = dbo.SRPUser.UID
	WHERE 
		dbo.SRPUser.UID = @UID





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetSpecialUserPermissionsFlagged]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------

CREATE PROCEDURE [dbo].[cbspSRPUser_GetSpecialUserPermissionsFlagged]
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

SELECT     @UID as UID, dbo.SRPPermissionsMaster.PermissionID, 
			dbo.SRPPermissionsMaster.PermissionName, 
			dbo.SRPPermissionsMaster.PermissionDesc, 
			dbo.SRPUserPermissions.AddedDate, 
			dbo.SRPUserPermissions.AddedUser, 
                      case  
						when dbo.SRPUserPermissions.AddedDate is null then 0 
						else 1 end  AS Checked
						
			
FROM         dbo.SRPPermissionsMaster LEFT OUTER JOIN
                      dbo.SRPUserPermissions ON dbo.SRPPermissionsMaster.PermissionID = dbo.SRPUserPermissions.PermissionID 
						AND dbo.SRPUserPermissions.UID = @UID
where UID = @UID or UID is null






; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_GetSpecialUserPermissionsNotGranted]    Script Date: 03/10/2014 14:43:27 ******/









------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[cbspSRPUser_GetSpecialUserPermissionsNotGranted]
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	SELECT     @UID as UID, dbo.SRPPermissionsMaster.PermissionID, 
						  dbo.SRPPermissionsMaster.PermissionName, 
						  dbo.SRPPermissionsMaster.PermissionDesc, 
						  null as AddedDate, 'N/A' as AddedUser
	FROM dbo.SRPPermissionsMaster
	WHERE 
		dbo.SRPPermissionsMaster.PermissionID NOT IN 
			(
				SELECT     dbo.SRPPermissionsMaster.PermissionID
				FROM         dbo.SRPPermissionsMaster INNER JOIN
                      dbo.SRPUserPermissions ON dbo.SRPPermissionsMaster.PermissionID = dbo.SRPUserPermissions.PermissionID INNER JOIN
                      dbo.SRPUser ON dbo.SRPUserPermissions.UID = dbo.SRPUser.UID
                WHERE 
					dbo.SRPUserPermissions.UID = @UID
			)





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_Insert]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_Insert]
  @Username	varchar(50)
  , @Password	varchar(50)
  , @FirstName	varchar(50)
  , @LastName	varchar(50)
  , @EmailAddress	varchar(128)
  , @Division	varchar(50) = null
  , @Department	varchar(50) = null
  , @Title		varchar(50) = null
  , @IsActive	bit = 1
  , @MustResetPassword	bit = 0
  , @IsDeleted	bit = 0
  , @ActionUsername varchar(50)	
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	INSERT INTO
		 dbo.SRPUser
	(
		  Username
		, Password 
		, FirstName 
		, LastName 
		, EmailAddress 
		, Division 
		, Department 
		, Title 
		, IsActive 
		, MustResetPassword 
		, IsDeleted
		, LastPasswordReset 
		, DeletedDate 
		, AddedDate 
		, AddedUser 
		, LastModDate 
		, LastModUser 
	)
	VALUES
	(
		@Username
		, @Password
		, @FirstName
		, @LastName
		, @EmailAddress
		, @Division
		, @Department
		, @Title
		, @IsActive
		, @MustResetPassword
		, @IsDeleted
		, null
		, null
		, getdate()
		, @ActionUsername
		, getdate()
		, @ActionUsername
	)
	SELECT @@IDENTITY
	return @@IDENTITY





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_Login]    Script Date: 03/10/2014 14:43:27 ******/








CREATE PROCEDURE [dbo].[cbspSRPUser_Login]							
	@UserName		varchar(50)
  , @Password		varchar(50)
  , @SessionId		varchar(128)= 'N/A'
  , @IP				varchar(50) = 'N/A'
  , @MachineName	varchar(50) = 'N/A'
  , @Browser		varchar(50) = 'N/A'
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	Declare   @Count int
			, @IsActive bit
			, @IsDeleted bit
			, @MustResetPassword bit
			, @UID int
 
	SELECT 
		  @Count = isnull(Count(*),0)
		, @UID = UID
		, @IsActive = IsActive	
		, @IsDeleted = IsDeleted
	FROM
		dbo.SRPUser
	WHERE
			 Username = @UserName
		 AND Password = @Password
		 AND IsDeleted = 0
		 AND IsActive = 1
	GROUP BY UID, IsActive, IsDeleted
		 
	
	IF @Count = 0 OR @Count is null
	BEGIN
		--SELECT 
		--		*
		--FROM	
		--	dbo.SRPUser
		--WHERE
		--	 Username is null
			 
		select 0
	END
	ELSE
	BEGIN
	
		--SELECT 
		--	*
		--FROM 
		--	dbo.SRPUser
		--WHERE 
		--	UID = @UID
			
		INSERT INTO
			dbo.SRPUserLoginHistory(UID, SessionsID, StartDateTime, IP, MachineName, Browser, EndDateTime)
		VALUES(@UID, @SessionId, getdate(), @IP, @MachineName, @Browser, null)
		
		--exec cbspSRPUser_GetAllPermissions @UID
		
		select 1
	END
	return 0

	
		 






; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_Logout]    Script Date: 03/10/2014 14:43:27 ******/









create PROCEDURE [dbo].[cbspSRPUser_Logout]						
	@UID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	UPDATE dbo.SRPUserLoginHistory
	SET EndDateTime = getdate()
	WHERE UID = @UID  and EndDateTime is null






;  /****** Object:  StoredProcedure [dbo].[cbspSRPUser_ResetPassword]    Script Date: 03/10/2014 14:43:27 ******/








CREATE PROCEDURE [dbo].[cbspSRPUser_ResetPassword]										
	@UID			int
  , @Password		varchar(50)
  , @ActionUsername varchar(50)	= 'N/A'
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	UPDATE
		dbo.SRPUser
	SET
		  Password				= @Password
		, LastPasswordReset		= getdate()
		, LastModDate			= getdate()
		, LastModUser			= @ActionUsername
	WHERE
		 UID = @UID
	
	SELECT 
		*
	FROM 
		dbo.SRPUser
	WHERE 
		UID = @UID
		
	exec cbspSRPUser_GetAllPermissions @UID
		





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_Update]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_Update]
	@UID		int
  , @Username	varchar(50)
  , @Password	varchar(50)
  , @FirstName	varchar(50)
  , @LastName	varchar(50)
  , @EmailAddress	varchar(128)
  , @Division	varchar(50) = null
  , @Department	varchar(50) = null
  , @Title		varchar(50) = null
  , @IsActive	bit = 1
  , @MustResetPassword	bit = 0
  , @IsDeleted	bit = 0
  , @LastPasswordReset datetime = null	
  , @ActionUsername varchar(50)	
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	UPDATE
		 dbo.SRPUser
	SET
		  Username = @Username
		, Password = @Password
		, FirstName = @FirstName
		, LastName = @LastName
		, EmailAddress = @EmailAddress
		, Division = @Division
		, Department = @Department
		, Title = @Title
		, IsActive = @IsActive
		, MustResetPassword = @MustResetPassword
		, IsDeleted = @IsDeleted
		, LastPasswordReset = @LastPasswordReset
		, LastModDate = getdate()
		, LastModUser = @ActionUsername
	WHERE 
		UID = @UID





; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_UpdateGroups]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------


CREATE PROCEDURE [dbo].[cbspSRPUser_UpdateGroups]
	@UID		int
  , @GID_LIST	varchar(4000)
  , @ActionUsername varchar(50)	= 'N/A'
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	DELETE 
		dbo.SRPUserGroups
	WHERE
			 UID = @UID
		 AND GID NOT in (select * from [dbo].[fnSplitBigInt](@GID_LIST))
		 
	INSERT INTO
		dbo.SRPUserGroups
	SELECT 
		  @UID
		, GID
		, getdate()
		, @ActionUsername
	FROM
		dbo.SRPGroups
	WHERE
			GID in (select * from [dbo].[fnSplitBigInt](@GID_LIST))
		AND GID NOT IN
			(
				SELECT 
					GID
				FROM
					dbo.SRPUserGroups
				WHERE
					UID = @UID
			)
			






; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_UpdateSpecialUserPermissions]    Script Date: 03/10/2014 14:43:27 ******/









------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[cbspSRPUser_UpdateSpecialUserPermissions]
	@UID		int
  , @PermissionID_LIST	varchar(4000)
  , @ActionUsername varchar(50)	= 'N/A'
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	DELETE 
		dbo.SRPUserPermissions
	WHERE
			 UID = @UID
		 AND PermissionID NOT in (select * from [dbo].[fnSplitBigInt](@PermissionID_LIST))
		 
	INSERT INTO
		dbo.SRPUserPermissions
	SELECT 
		  @UID
		, PermissionID
		, getdate()
		, @ActionUsername
	FROM
		dbo.SRPPermissionsMaster
	WHERE
			PermissionID in (select * from [dbo].[fnSplitBigInt](@PermissionID_LIST))
		AND PermissionID NOT IN
			(
				SELECT 
					PermissionID
				FROM
					dbo.SRPUserPermissions
				WHERE
					UID = @UID
			)
			






; /****** Object:  StoredProcedure [dbo].[cbspSRPUser_UsernameExists]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[cbspSRPUser_UsernameExists]
	@Username		varchar(50)
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
declare @RowCount int
	SELECT @RowCount =  Count(*)
	FROM dbo.SRPUser
	WHERE 
		Username = @Username
	IF @RowCount > 0
		return 1
	ELSE
		return 0





; /****** Object:  StoredProcedure [dbo].[cbspSRPUserGroups_GetPermissions]    Script Date: 03/10/2014 14:43:27 ******/








CREATE PROCEDURE [dbo].[cbspSRPUserGroups_GetPermissions]
	@GID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT     dbo.SRPGroups.GID, dbo.SRPPermissionsMaster.PermissionID, 
						  dbo.SRPPermissionsMaster.PermissionName, 
						  dbo.SRPPermissionsMaster.PermissionDesc, 
						  dbo.SRPGroupPermissions.AddedDate, 
						  dbo.SRPGroupPermissions.AddedUser
	FROM         dbo.SRPPermissionsMaster INNER JOIN
                    dbo.SRPGroupPermissions ON 
					dbo.SRPPermissionsMaster.PermissionID = dbo.SRPGroupPermissions.PermissionID INNER JOIN
                    dbo.SRPGroups ON dbo.SRPGroupPermissions.GID = dbo.SRPGroups.GID
	WHERE 
		dbo.SRPGroups.GID = @GID





; /****** Object:  StoredProcedure [dbo].[cbspSRPUserGroups_GetPermissionsFlagged]    Script Date: 03/10/2014 14:43:27 ******/








------------------------------------------------------------------

CREATE PROCEDURE [dbo].[cbspSRPUserGroups_GetPermissionsFlagged]
	@GID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

SELECT     @GID as GID, dbo.SRPPermissionsMaster.PermissionID, 
			dbo.SRPPermissionsMaster.PermissionName, 
			dbo.SRPPermissionsMaster.PermissionDesc, 
			dbo.SRPGroupPermissions.AddedDate, 
			dbo.SRPGroupPermissions.AddedUser, 
                      case  
						when dbo.SRPGroupPermissions.AddedDate is null then 0 
						else 1 end  AS Checked
						
			
FROM         dbo.SRPPermissionsMaster LEFT OUTER JOIN
                      dbo.SRPGroupPermissions ON dbo.SRPPermissionsMaster.PermissionID = dbo.SRPGroupPermissions.PermissionID 
						AND dbo.SRPGroupPermissions.GID = @GID
where GID = @GID or GID is null






; /****** Object:  StoredProcedure [dbo].[cbspSRPUserGroups_GetPermissionsNotGranted]    Script Date: 03/10/2014 14:43:28 ******/









------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[cbspSRPUserGroups_GetPermissionsNotGranted]
	@GID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	SELECT     @GID as GID, dbo.SRPPermissionsMaster.PermissionID, 
						  dbo.SRPPermissionsMaster.PermissionName, 
						  dbo.SRPPermissionsMaster.PermissionDesc, 
						  null as AddedDate, 'N/A' as AddedUser
	FROM dbo.SRPPermissionsMaster
	WHERE 
		dbo.SRPPermissionsMaster.PermissionID NOT IN 
			(
				SELECT     dbo.SRPPermissionsMaster.PermissionID
				FROM         dbo.SRPPermissionsMaster INNER JOIN
                      dbo.SRPGroupPermissions ON dbo.SRPPermissionsMaster.PermissionID = dbo.SRPGroupPermissions.PermissionID INNER JOIN
                      dbo.SRPGroups ON dbo.SRPGroupPermissions.GID = dbo.SRPGroups.GID
                WHERE 
					dbo.SRPGroupPermissions.GID = @GID
			)





; /****** Object:  StoredProcedure [dbo].[cbspSRPUserGroups_GetUsers]    Script Date: 03/10/2014 14:43:28 ******/








CREATE PROCEDURE [dbo].[cbspSRPUserGroups_GetUsers]
	@GID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT dbo.SRPGroups.GID, dbo.SRPGroups.GroupName, dbo.SRPUser.UID, dbo.SRPUser.Username,
			dbo.SRPUser.FirstName , dbo.SRPUser.LastName , dbo.SRPUser.EmailAddress ,
			dbo.SRPUserGroups.AddedDate, dbo.SRPUserGroups.AddedUser
	FROM         dbo.SRPGroups INNER JOIN
                      dbo.SRPUserGroups ON dbo.SRPGroups.GID = dbo.SRPUserGroups.GID INNER JOIN
                      dbo.SRPUser ON dbo.SRPUserGroups.UID = dbo.SRPUser.UID
	WHERE 
			dbo.SRPGroups.GID = @GID
		AND dbo.SRPUser.IsDeleted  = 0






; /****** Object:  StoredProcedure [dbo].[cbspSRPUserGroups_GetUsersFlagged]    Script Date: 03/10/2014 14:43:28 ******/








CREATE PROCEDURE [dbo].[cbspSRPUserGroups_GetUsersFlagged]		
	@GID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

SELECT     @GID as GID,  
			dbo.SRPGroups.GroupName, 
			dbo.SRPGroups.GroupDescription, 
			dbo.SRPUser.UID, 
			dbo.SRPUser.Username,
			dbo.SRPUser.FirstName, 
			dbo.SRPUser.LastName, 
			dbo.SRPUser.EmailAddress,
			dbo.SRPUserGroups.AddedDate, 
			dbo.SRPUserGroups.AddedUser, 
                      case  
						when dbo.SRPUserGroups.AddedDate is null then 0--'False' 
						else 1--'True' 
						end  AS isMember
						
			
FROM         dbo.SRPUser LEFT OUTER JOIN
                      dbo.SRPUserGroups ON dbo.SRPUser.UID = dbo.SRPUserGroups.UID 
						AND dbo.SRPUserGroups.GID = @GID LEFT OUTER JOIN
						dbo.SRPGroups ON dbo.SRPGroups.GID = @GID
where (dbo.SRPUserGroups.GID = @GID or dbo.SRPUserGroups.GID is null)
AND dbo.SRPUser.IsDeleted  = 0







; /****** Object:  StoredProcedure [dbo].[cbspSRPUserGroups_GetUsersNonMembers]    Script Date: 03/10/2014 14:43:28 ******/








CREATE PROCEDURE [dbo].[cbspSRPUserGroups_GetUsersNonMembers]		
	@GID		int
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT dbo.SRPGroups.GID, dbo.SRPGroups.GroupName, dbo.SRPUser.UID, dbo.SRPUser.Username,
			dbo.SRPUser.FirstName , dbo.SRPUser.LastName , dbo.SRPUser.EmailAddress ,
			null as AddedDate, 'N/A' as AddedUser
	FROM         dbo.SRPGroups INNER JOIN
                      dbo.SRPUserGroups ON dbo.SRPGroups.GID = dbo.SRPUserGroups.GID INNER JOIN
                      dbo.SRPUser ON dbo.SRPUserGroups.UID = dbo.SRPUser.UID
	WHERE 
			dbo.SRPGroups.GID NOT IN
		( 
			SELECT dbo.SRPGroups.GID
			FROM         dbo.SRPGroups INNER JOIN
							  dbo.SRPUserGroups ON dbo.SRPGroups.GID = dbo.SRPUserGroups.GID INNER JOIN
							  dbo.SRPUser ON dbo.SRPUserGroups.UID = dbo.SRPUser.UID
			WHERE 
					dbo.SRPGroups.GID = @GID
				AND dbo.SRPUser.IsDeleted  = 0			
		)
		AND dbo.SRPUser.IsDeleted  = 0






; /****** Object:  StoredProcedure [dbo].[cbspSRPUserGroups_UpdatePermissions]    Script Date: 03/10/2014 14:43:28 ******/









------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[cbspSRPUserGroups_UpdatePermissions]
	@GID		int
  , @PermissionID_LIST	varchar(4000)
  , @ActionUsername varchar(50)	= 'N/A'
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	DELETE 
		dbo.SRPGroupPermissions
	WHERE
			 GID = @GID
		 AND PermissionID NOT in (select * from [dbo].[fnSplitBigInt](@PermissionID_LIST))
		 
	INSERT INTO
		dbo.SRPGroupPermissions
	SELECT 
		  @GID
		, PermissionID
		, getdate()
		, @ActionUsername
	FROM
		dbo.SRPPermissionsMaster
	WHERE
			PermissionID in (select * from [dbo].[fnSplitBigInt](@PermissionID_LIST))
		AND PermissionID NOT IN
			(
				SELECT 
					PermissionID
				FROM
					dbo.SRPGroupPermissions
				WHERE
					GID = @GID
			)
			






; /****** Object:  StoredProcedure [dbo].[cbspSRPUserGroups_UpdateUsers]    Script Date: 03/10/2014 14:43:28 ******/








CREATE PROCEDURE [dbo].[cbspSRPUserGroups_UpdateUsers]
	@GID		int
  , @UID_LIST	varchar(4000)
  , @ActionUsername varchar(50)	= 'N/A'
AS
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	DELETE 
		dbo.SRPUserGroups
	WHERE
			 GID = @GID
		 AND UID NOT in (select * from [dbo].[fnSplitBigInt](@UID_LIST))
		 
	INSERT INTO
		dbo.SRPUserGroups
	SELECT 
		  UID
		, @GID
		, getdate()
		, @ActionUsername
	FROM
		dbo.SRPUser
	WHERE
			UID in (select * from [dbo].[fnSplitBigInt](@UID_LIST))
		AND UID NOT IN
			(
				SELECT 
					UID
				FROM
					dbo.SRPUserGroups
				WHERE
					GID = @GID
			)
		AND IsDeleted = 0
			






; /****** Object:  StoredProcedure [dbo].[GetPatronsPaged]    Script Date: 03/10/2014 14:43:28 ******/







CREATE PROCEDURE [dbo].[GetPatronsPaged]
(
    @startRowIndex int = 0,
    @maximumRows int = 0,
    @sortString varchar(200) = 'p.PID desc'
,   @searchFirstName varchar(50) = ''    
,   @searchLastName varchar(50) = ''    
,   @searchUsername varchar(50) = ''    
,   @searchEmail varchar(128) = ''    
,   @searchDOB datetime = null    
,   @searchProgram int = 0    
,   @searchGender varchar(2) = ''    
)
AS
declare @SQL1 varchar(8000)
IF LEN(@sortString) = 0
    SET @sortString = 'p.PID'

declare @Filter varchar(8000)
select @Filter = ''
if @searchFirstName <> ''
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' FirstName like ''%' + @searchFirstName + '%'' '

if @searchLastName <> ''
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' LastName like ''%' + @searchLastName + '%'' '
					
if @searchEmail <> ''
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' EmailAddress like ''%' + @searchEmail + '%'' '
		
if @searchUsername <> ''
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' Username like ''%' + @searchUsername + '%'' '		
	
if @searchDOB is not  null
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' DOB = ''' + convert(varchar, @searchDOB, 101) + ''' '							
if @searchProgram <> 0
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' ProgID = ' + CONVERT(varchar, @searchProgram) + ' '
			
if @searchGender <> ''
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' Gender like ''%' + @searchGender + '%'' '
																	
select @SQL1 = 
	'SELECT  PID, FirstName, LastName, DOB, Username, EmailAddress, Gender, Program, ProgId 
	FROM 
	   ( 
					Select p.*, pg.AdminName as Program
					, ROW_NUMBER() OVER (ORDER BY ' + @sortString + ' ) AS RowRank 
					FROM Patron p left outer join Programs pg 
						on p.ProgID = pg.PID
					'  + case len(@Filter) when 0 then '' else ' WHERE ' + @Filter end + ' 
	    ) AS PatronsWithRowNumbers 
	WHERE RowRank > ' + convert(varchar,@startRowIndex) + ' AND RowRank <= (' + convert(varchar,@startRowIndex) + ' + ' + convert(varchar,@maximumRows) + ') '
	+ case len(@Filter) when 0 then '' else ' AND ' + @Filter end
	
--select @Filter	
exec (@SQL1)





; /****** Object:  StoredProcedure [dbo].[GetTotalPatrons]    Script Date: 03/10/2014 14:43:28 ******/







CREATE PROCEDURE [dbo].[GetTotalPatrons]
(
    @startRowIndex int = 0,
    @maximumRows int = 0,
    @sortString varchar(200) = 'p.PID desc'
,   @searchFirstName varchar(50) = ''    
,   @searchLastName varchar(50) = ''    
,   @searchUsername varchar(50) = ''    
,   @searchEmail varchar(128) = ''    
,   @searchDOB datetime = null    
,   @searchProgram int = 0    
,   @searchGender varchar(2) = ''    
)
AS
declare @SQL1 varchar(8000)
IF LEN(@sortString) = 0
    SET @sortString = 'p.PID'

declare @Filter varchar(8000)
select @Filter = ''
if @searchFirstName <> ''
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' FirstName like ''%' + @searchFirstName + '%'' '

if @searchLastName <> ''
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' LastName like ''%' + @searchLastName + '%'' '
					
if @searchUsername <> ''
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' Username like ''%' + @searchUsername + '%'' '		
		
if @searchDOB is not  null
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' DOB = ''' + convert(varchar, @searchDOB, 101) + ''' '
	
if @searchDOB is not  null
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' DOB = ''' + convert(varchar, @searchDOB, 101) + ''' '							
if @searchProgram <> 0
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' ProgID = ' + CONVERT(varchar, @searchProgram) + ' '
			
if @searchGender <> ''
	select @Filter = @Filter  + 
					case len(@Filter) when 0 then '' else ' AND ' end + 
					' Gender like ''%' + @searchGender + '%'' '


select @SQL1 = 
	'SELECT  count(*)
		FROM Patron p '  + case len(@Filter) when 0 then '' else ' WHERE ' + @Filter end 
		
exec (@SQL1)	
select @SQL1



; /****** Object:  StoredProcedure [dbo].[rpt_DashboardStats]    Script Date: 03/10/2014 14:43:28 ******/




create procedure [dbo].[rpt_DashboardStats]
 @ProgId int = null
,@BranchID int = null
,@School varchar(50) = null
,@LibSys varchar(50) = null
,@Level int = null
as
SET ARITHABORT  OFF
SET ANSI_WARNINGS OFF
select AdminName as Program, count(*) as RegistrantCount
from 
	Patron p left join Programs pg
		on p.ProgId = pg.PID
where 
	p.ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)
group by AdminName
---------------------------------------------------------------------------------------------------------------
select AdminName as Program, count(*) as FinisherCount
from 
	Patron p left join Programs pg
		on p.ProgId = pg.PID
where 
	p.ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)
	AND [dbo].[fx_IsFinisher2](p.PID, pg.PID, @Level) = 1
group by AdminName
---------------------------------------------------------------------------------------------------------------
/*
select AdminName as Program, 
		case	
			when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
			else
				case 
					when Age IS NOT NULL then Age
					else 0
				end
		end as Age
		,count(*) as RegistrantCount
from 
	Patron p left join Programs pg
		on p.ProgId = pg.PID
			where p.ProgID <> 0
group by p.ProgId, AdminName, 
case	
		when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
		else
			case 
				when Age IS NOT NULL then Age
				else 0
			end
		end
order by AdminName, Age
*/
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
DECLARE @current INT
DECLARE @ColCounter INT
DECLARE @SQL VARCHAR(7000)
DECLARE @SQL1 VARCHAR(7000)
-----------------------------------------------------------------------------------------
if OBJECT_ID('tempdb..#Temp1') is not null
	drop table #Temp1
select AdminName as Program, 
		case	
			when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
			else
				case 
					when Age IS NOT NULL then Age
					else 0
				end
		end as Age
		,count(*) as RegistrantCount
		,-1 as IndexRank 
into #temp1
from 
	Patron p left join Programs pg
		on p.ProgId = pg.PID
where 
	p.ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)
group by p.ProgId, AdminName, 
case	
		when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
		else
			case 
				when Age IS NOT NULL then Age
				else 0
			end
		end
order by AdminName, Age

update 	#Temp1
set	
	IndexRank = a.IndexRank
from 
	(	
		select top 100 percent Program
			,RANK () over ( order by Program ) as IndexRank
		from #Temp1
		group by Program
		order by Program
	) a
	inner join  #Temp1
		on a.Program = #Temp1.Program 
--select * from #Temp1

select @ColCounter = isnull(max(x.R) ,0)
from (
	select RANK () over ( order by Count(Program)  desc ) as R
	from #temp1
	group by Program
	) as x
--select @ColCounter

if OBJECT_ID('tempdb..#StatsData') is not null
	drop table #StatsData
create table #StatsData(Age int)

if OBJECT_ID('tempdb..#ProgramLabels') is not null
	drop table #ProgramLabels
create table #ProgramLabels(Label varchar(50))
insert into #ProgramLabels (Label)
select Program from #temp1 group by IndexRank, Program order by IndexRank
--select * from #ProgramLabels

IF @ColCounter > 0
BEGIN
		
	SELECT @SQL = 'alter table #StatsData add '
	--SELECT @SQL1 = 'alter table #ProgramLabels add '
	select @current = 1--, @maxcounter = 8
	WHILE @current <= @ColCounter
	BEGIN
		SELECT @SQL = @SQL + 'PgmCount' + CONVERT(varchar, @current) + ' int ' 
		SELECT @SQL1 = @SQL1 + 'PgmName' + CONVERT(varchar, @current) + ' varchar(255)'
		if @current < @ColCounter
		begin
			SELECT @SQL = @SQL + ','
			SELECT @SQL1 = @SQL1 + ','
		end 
		select @current = @current + 1
	END
	print @SQL
	--print @SQL1
	EXEC (@SQL)
	--EXEC (@SQL1)
	
	insert into #StatsData (Age) select distinct Age from #temp1 order by Age
	
	select @current = 1
	WHILE @current <= @ColCounter
	BEGIN
		SELECT @SQL = 'update #StatsData set ' + 
						'PgmCount' + CONVERT(varchar, @current) + ' = a.RegistrantCount ' + 
						'from #Temp1 a inner join  #StatsData on a.Age = #StatsData.Age ' + 
						' and a.IndexRank = ' + CONVERT(varchar, @current)
		SELECT @SQL1 = 'update #StatsData set ' + 
						'PgmCount' + CONVERT(varchar, @current) + ' = 0 ' +
						'where PgmCount' + CONVERT(varchar, @current) + ' is null '

		EXEC (@SQL)
		EXEC (@SQL1)
		print @SQL
		select @current = @current + 1
	END
	


end
select * from #ProgramLabels
select * from #StatsData
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
/*
select AdminName as Program, 
		case	
			when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
			else
				case 
					when Age IS NOT NULL then Age
					else 0
				end
		end as Age
		,count(*) as FinisherCount
from 
	Patron p left join Programs pg
		on p.ProgId = pg.PID
			where p.ProgID <> 0
				AND [dbo].[fx_IsFinisher](p.PID, pg.PID) = 1
group by p.ProgId, AdminName, 
case	
		when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
		else
			case 
				when Age IS NOT NULL then Age
				else 0
			end
		end
order by AdminName, Age
*/
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
if OBJECT_ID('tempdb..#Temp2') is not null
	drop table #Temp2
select AdminName as Program, 
		case	
			when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
			else
				case 
					when Age IS NOT NULL then Age
					else 0
				end
		end as Age
		,count(*) as FinisherCount
		,-1 as IndexRank 
into #Temp2
from 
	Patron p left join Programs pg
		on p.ProgId = pg.PID
where 
	p.ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)
	AND [dbo].[fx_IsFinisher2](p.PID, pg.PID, @Level) = 1
group by p.ProgId, AdminName, 
case	
		when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
		else
			case 
				when Age IS NOT NULL then Age
				else 0
			end
		end
order by AdminName, Age

update 	#Temp2
set	
	IndexRank = a.IndexRank
from 
	(	
		select top 100 percent Program
			,RANK () over ( order by Program ) as IndexRank
		from #Temp2
		group by Program
		order by Program
	) a
	inner join  #Temp2
		on a.Program = #Temp2.Program 
--select * from #Temp2


select @ColCounter = isnull(max(x.R) ,0)
from (
	select RANK () over ( order by Count(Program)  desc ) as R
	from #Temp2
	group by Program
	) as x
--select @ColCounter

if OBJECT_ID('tempdb..#StatsData2') is not null
	drop table #StatsData2
create table #StatsData2(Age int)

if OBJECT_ID('tempdb..#ProgramLabels2') is not null
	drop table #ProgramLabels2
create table #ProgramLabels2(Label varchar(50))
insert into #ProgramLabels2 (Label)
select Program from #Temp2 group by IndexRank, Program order by IndexRank
--select * from #ProgramLabels2

IF @ColCounter > 0
BEGIN
		
	SELECT @SQL = 'alter table #StatsData2 add '
	--SELECT @SQL1 = 'alter table #ProgramLabels2 add '
	select @current = 1--, @maxcounter = 8
	WHILE @current <= @ColCounter
	BEGIN
		SELECT @SQL = @SQL + 'PgmCount' + CONVERT(varchar, @current) + ' int ' 
		SELECT @SQL1 = @SQL1 + 'PgmName' + CONVERT(varchar, @current) + ' varchar(255)'
		if @current < @ColCounter
		begin
			SELECT @SQL = @SQL + ','
			SELECT @SQL1 = @SQL1 + ','
		end 
		select @current = @current + 1
	END
	print @SQL
	--print @SQL1
	EXEC (@SQL)
	--EXEC (@SQL1)
	
	insert into #StatsData2 (Age) select distinct Age from #Temp2 order by Age
	
	select @current = 1
	WHILE @current <= @ColCounter
	BEGIN
		SELECT @SQL = 'update #StatsData2 set ' + 
						'PgmCount' + CONVERT(varchar, @current) + ' = a.FinisherCount ' + 
						'from #Temp2 a inner join  #StatsData2 on a.Age = #StatsData2.Age ' + 
						' and a.IndexRank = ' + CONVERT(varchar, @current)
		SELECT @SQL1 = 'update #StatsData2 set ' + 
						'PgmCount' + CONVERT(varchar, @current) + ' = 0 ' +
						'where PgmCount' + CONVERT(varchar, @current) + ' is null '

		EXEC (@SQL)
		EXEC (@SQL1)
		print @SQL
		select @current = @current + 1
	END
END

select * from #ProgramLabels2
select * from #StatsData2
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
select pg.AdminName 
	, Sum(case isnull(Gender,'') when 'M' then 1 else 0 end) as MaleRegistrant
	, Sum(case isnull(Gender,'') when 'F' then 1 else 0 end) as FemaleRegistrant
	, Sum(case isnull(Gender,'') when 'F' then 0 when 'M' then 0  else 1 end) as NARegistrant
	, Sum(case isnull(Gender,'') when 'M' then 1 else 0 end) + Sum(case isnull(Gender,'') when 'F' then 1 else 0 end) + Sum(case isnull(Gender,'') when 'F' then 0 when 'M' then 0  else 1 end) as TotalRegistrant
	
from Patron left join Programs pg
		on ProgID = pg.PID
where 
	ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)
group by AdminName
order by AdminName


---------------------------------------------------------------------------------------------------------------
select pg.AdminName 
	, Sum(case isnull(Gender,'') when 'M' then 1 else 0 end) as MaleFinisher
	, Sum(case isnull(Gender,'') when 'F' then 1 else 0 end) as FemaleFinisher
	, Sum(case isnull(Gender,'') when 'F' then 0 when 'M' then 0  else 1 end) as NAFinisher
	, Sum(case isnull(Gender,'') when 'M' then 1 else 0 end) + Sum(case isnull(Gender,'') when 'F' then 1 else 0 end) + Sum(case isnull(Gender,'') when 'F' then 0 when 'M' then 0  else 1 end) as TotalFinisher
	
from Patron left join Programs pg
		on ProgID = pg.PID
where 
	ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)
	AND [dbo].[fx_IsFinisher2](Patron.PID, Pg.PID, @Level) = 1
group by AdminName
order by AdminName




; /****** Object:  StoredProcedure [dbo].[rpt_FinisherStats]    Script Date: 03/10/2014 14:43:28 ******/






CREATE procedure [dbo].[rpt_FinisherStats]
 @ProgId int = null
,@BranchID int = null
,@School varchar(50) = null
,@LibSys varchar(50) = null
as
SET ARITHABORT  OFF
SET ANSI_WARNINGS OFF
select ProgID, pg.AdminName 
	, case	
		when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
		else
			case 
				when Age IS NOT NULL then Age
				else 0
			end
		end as Age
	, Sum(case isnull(Gender,'') when 'M' then 1 else 0 end) as Male
	, Sum(case isnull(Gender,'') when 'F' then 1 else 0 end) as Female
	, Sum(case isnull(Gender,'') when 'F' then 0 when 'M' then 0  else 1 end) as NA
	
from Patron left join Programs pg
		on ProgID = pg.PID
where 
	ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)	
	AND [dbo].[fx_IsFinisher](Patron.PID, Pg.PID) = 1
group by ProgID, AdminName,
		case	
		when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
		else
			case 
				when Age IS NOT NULL then Age
				else 0
			end
		end
order by ProgID, Age




; 






CREATE procedure [dbo].[rpt_PrizeRecipients]
 @ProgId int = null
,@BranchID int = null
,@School varchar(50) = null
,@LibSys varchar(50) = null
as
SET ARITHABORT  OFF
SET ANSI_WARNINGS OFF
select 
	AdminName, FirstName, LastName, Username, EmailAddress, PrizeName, 
	case RedeemedFlag
		when 1 then 'Yes' 
		else 'No'
	end PrizeRedeemed
from 
	PatronPrizes r
		left join Patron p 
			on p.PID = r.PID
		left join Programs pg
			on p.ProgID = pg.PID	
where 
	ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)	
	--AND [dbo].[fx_IsFinisher](Patron.PID, Pg.PID) = 1
order by 	AdminName, FirstName, LastName , RedeemedFlag desc	




; /****** Object:  StoredProcedure [dbo].[rpt_RegistrationStats]    Script Date: 03/10/2014 14:43:28 ******/






CREATE procedure [dbo].[rpt_RegistrationStats]
 @ProgId int = null
,@BranchID int = null
,@School varchar(50) = null
,@LibSys varchar(50) = null
as
SET ARITHABORT  OFF
SET ANSI_WARNINGS OFF
select ProgID, pg.AdminName 
	, case	
		when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
		else
			case 
				when Age IS NOT NULL then Age
				else 0
			end
		end as Age
	, Sum(case isnull(Gender,'') when 'M' then 1 else 0 end) as Male
	, Sum(case isnull(Gender,'') when 'F' then 1 else 0 end) as Female
	, Sum(case isnull(Gender,'') when 'F' then 0 when 'M' then 0  else 1 end) as NA
	
from Patron left join Programs pg
		on ProgID = pg.PID
where 
	ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)	
group by ProgID, AdminName,
		case	
		when DOB IS NOT NULL then FLOOR((CAST (GetDate() AS INTEGER) - CAST(DOB AS INTEGER)) / 365.25) 
		else
			case 
				when Age IS NOT NULL then Age
				else 0
			end
		end
order by ProgID, Age
;
CREATE PROCEDURE [dbo].[uspSplitIntegerList]
	@list_integers			text
AS

SET NOCOUNT ON

DECLARE @InputLen			integer			-- input text length
DECLARE @TextPos			integer			-- current position within input text
DECLARE @Chunk				varchar(8000)	-- chunk within input text
DECLARE @ChunkPos			integer			-- current position within chunk
DECLARE @DelimPos			integer			-- position of delimiter
DECLARE @ChunkLen			integer			-- chunk length
DECLARE @DelimLen			integer			-- delimiter length
DECLARE @Delimiter      varchar(3)		-- delimiter
DECLARE @ItemBegPos		integer			-- item starting position in text
DECLARE @ItemOrder		integer			-- item order in list

-- ALTER table to hold list items
-- actually their positions because we may want to scrub this list eliminating bad entries before substring is applied
CREATE TABLE #list_items ( item_order integer, item_begpos integer, item_endpos integer )

-- process list
IF @list_integers IS NOT NULL
   BEGIN

	-- initialize
   -- notice that this loop assumes a delimiter length of 1
   -- if the delimiter is longer we have to deal with stuff like delimiters straddling the chunk boundaries
   SET @InputLen = DATALENGTH(@list_integers)
   SET @TextPos = 1
	SET @Delimiter = ','
	SET @DelimLen = DATALENGTH(@Delimiter)
   SET @ItemBegPos = 1
   SET @ItemOrder = 1
   SET @ChunkLen = 1

   -- cycle through input processing chunks
   WHILE @TextPos <= @InputLen AND @ChunkLen <> 0
      BEGIN

      -- get current chunk
      SET @Chunk = SUBSTRING(@list_integers, @TextPos, 8000)

      -- setup initial variable values
      SET @ChunkPos = 1
      SET @ChunkLen = DATALENGTH(@Chunk)
      SET @DelimPos = CHARINDEX(@Delimiter, @Chunk, @ChunkPos)

      -- loop over the chunk, until the last delimiter
      WHILE @ChunkPos <= @ChunkLen AND @DelimPos <> 0
         BEGIN

			-- insert position
         INSERT INTO #list_items (item_order, item_begpos, item_endpos)
         VALUES (@ItemOrder, @ItemBegPos, (@TextPos + @DelimPos - 1) - 1)
         
         -- adjust positions
         SET @ItemOrder = @ItemOrder + 1
         SET @ItemBegPos = (@TextPos + @DelimPos - 1) + @DelimLen
         SET @ChunkPos = @DelimPos + @DelimLen
      
         -- find next delimiter      
         SET @DelimPos = CHARINDEX(@Delimiter, @Chunk, @ChunkPos)

         END

      -- adjust positions
      SET @TextPos = @TextPos + @ChunkLen

      END

	-- handle last item
   IF @ItemBegPos <= @InputLen
      BEGIN

      -- insert position
      INSERT INTO #list_items (item_order, item_begpos, item_endpos)
      VALUES (@ItemOrder, @ItemBegPos, @InputLen)

      END

	-- delete the bad items
   DELETE FROM #list_items
   WHERE item_endpos < item_begpos

   -- return list items
	SELECT CAST(SUBSTRING(@list_integers, item_begpos, (item_endpos - item_begpos + 1)) AS integer) AS item_integer, item_order, item_begpos, item_endpos
   FROM #list_items
   WHERE ISNUMERIC(SUBSTRING(@list_integers, item_begpos, (item_endpos - item_begpos + 1))) = 1
   ORDER BY item_order

   END

DROP TABLE #list_items

RETURN

;

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

CREATE PROCEDURE [dbo].[cbspSRPUser_LogoutAll]					
AS
SET NOCOUNT ON	
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	UPDATE dbo.SRPUserLoginHistory
	SET EndDateTime = getdate()
	WHERE EndDateTime is NULL


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */



;
INSERT INTO CodeType ([isSystem]
,[CodeTypeName]
,[Description]
) VALUES (
 1 
,'Branch'
,'Library Branches'
);
INSERT INTO CodeType ([isSystem]
,[CodeTypeName]
,[Description]
) VALUES (
 1 
,'School Type'
,'Types of schools'
);
INSERT INTO CustomEventFields ([CID]
,[Use1]
,[Label1]
,[DDValues1]
,[Use2]
,[Use3]
,[Label2]
,[Label3]
,[DDValues2]
,[DDValues3]
,[LastModDate]
,[LastModUser]
,[AddedDate]
,[AddedUser]
) VALUES (
 1 
, 0 
,'Custom 1'
,''
, 0 
, 0 
,'Custom 2'
,'Custom 3'
,''
,''
,'Mar 11 2014 11:29AM'
,'a'
,'Feb  3 2014 12:22PM'
,'N/A'
);

INSERT INTO CustomRegistrationFields ([Use1]
,[Label1]
,[DDValues1]
,[Use2]
,[Use3]
,[Use4]
,[Use5]
,[Label2]
,[Label3]
,[Label4]
,[Label5]
,[DDValues2]
,[DDValues3]
,[DDValues4]
,[DDValues5]
,[LastModDate]
,[LastModUser]
,[AddedDate]
,[AddedUser]
) VALUES (
 1 
,'Custom 1'
,'1'
, 0 
, 0 
, 0 
, 0 
,''
,''
,''
,''
,''
,''
,''
,''
,'Mar 11 2014 11:30AM'
,'N/A'
,'Feb  3 2014 12:56PM'
,'N/A'
);

INSERT INTO RegistrationSettings ([RID]
,[Literacy1Label]
,[Literacy2Label]
,[DOB_Prompt]
,[Age_Prompt]
,[SchoolGrade_Prompt]
,[FirstName_Prompt]
,[MiddleName_Prompt]
,[LastName_Prompt]
,[Gender_Prompt]
,[EmailAddress_Prompt]
,[PhoneNumber_Prompt]
,[StreetAddress1_Prompt]
,[StreetAddress2_Prompt]
,[City_Prompt]
,[State_Prompt]
,[ZipCode_Prompt]
,[Country_Prompt]
,[County_Prompt]
,[ParentGuardianFirstName_Prompt]
,[ParentGuardianLastName_Prompt]
,[ParentGuardianMiddleName_Prompt]
,[PrimaryLibrary_Prompt]
,[LibraryCard_Prompt]
,[SchoolName_Prompt]
,[District_Prompt]
,[Teacher_Prompt]
,[GroupTeamName_Prompt]
,[SchoolType_Prompt]
,[LiteracyLevel1_Prompt]
,[LiteracyLevel2_Prompt]
,[ParentPermFlag_Prompt]
,[Over18Flag_Prompt]
,[ShareFlag_Prompt]
,[TermsOfUseflag_Prompt]
,[Custom1_Prompt]
,[Custom2_Prompt]
,[Custom3_Prompt]
,[Custom4_Prompt]
,[Custom5_Prompt]
,[DOB_Req]
,[Age_Req]
,[SchoolGrade_Req]
,[FirstName_Req]
,[MiddleName_Req]
,[LastName_Req]
,[Gender_Req]
,[EmailAddress_Req]
,[PhoneNumber_Req]
,[StreetAddress1_Req]
,[StreetAddress2_Req]
,[City_Req]
,[State_Req]
,[ZipCode_Req]
,[Country_Req]
,[County_Req]
,[ParentGuardianFirstName_Req]
,[ParentGuardianLastName_Req]
,[ParentGuardianMiddleName_Req]
,[PrimaryLibrary_Req]
,[LibraryCard_Req]
,[SchoolName_Req]
,[District_Req]
,[Teacher_Req]
,[GroupTeamName_Req]
,[SchoolType_Req]
,[LiteracyLevel1_Req]
,[LiteracyLevel2_Req]
,[ParentPermFlag_Req]
,[Over18Flag_Req]
,[ShareFlag_Req]
,[TermsOfUseflag_Req]
,[Custom1_Req]
,[Custom2_Req]
,[Custom3_Req]
,[Custom4_Req]
,[Custom5_Req]
,[DOB_Show]
,[Age_Show]
,[SchoolGrade_Show]
,[FirstName_Show]
,[MiddleName_Show]
,[LastName_Show]
,[Gender_Show]
,[EmailAddress_Show]
,[PhoneNumber_Show]
,[StreetAddress1_Show]
,[StreetAddress2_Show]
,[City_Show]
,[State_Show]
,[ZipCode_Show]
,[Country_Show]
,[County_Show]
,[ParentGuardianFirstName_Show]
,[ParentGuardianLastName_Show]
,[ParentGuardianMiddleName_Show]
,[PrimaryLibrary_Show]
,[LibraryCard_Show]
,[SchoolName_Show]
,[District_Show]
,[Teacher_Show]
,[GroupTeamName_Show]
,[SchoolType_Show]
,[LiteracyLevel1_Show]
,[LiteracyLevel2_Show]
,[ParentPermFlag_Show]
,[Over18Flag_Show]
,[ShareFlag_Show]
,[TermsOfUseflag_Show]
,[Custom1_Show]
,[Custom2_Show]
,[Custom3_Show]
,[Custom4_Show]
,[Custom5_Show]
,[DOB_Edit]
,[Age_Edit]
,[SchoolGrade_Edit]
,[FirstName_Edit]
,[MiddleName_Edit]
,[LastName_Edit]
,[Gender_Edit]
,[EmailAddress_Edit]
,[PhoneNumber_Edit]
,[StreetAddress1_Edit]
,[StreetAddress2_Edit]
,[City_Edit]
,[State_Edit]
,[ZipCode_Edit]
,[Country_Edit]
,[County_Edit]
,[ParentGuardianFirstName_Edit]
,[ParentGuardianLastName_Edit]
,[ParentGuardianMiddleName_Edit]
,[PrimaryLibrary_Edit]
,[LibraryCard_Edit]
,[SchoolName_Edit]
,[District_Edit]
,[Teacher_Edit]
,[GroupTeamName_Edit]
,[SchoolType_Edit]
,[LiteracyLevel1_Edit]
,[LiteracyLevel2_Edit]
,[ParentPermFlag_Edit]
,[Over18Flag_Edit]
,[ShareFlag_Edit]
,[TermsOfUseflag_Edit]
,[Custom1_Edit]
,[Custom2_Edit]
,[Custom3_Edit]
,[Custom4_Edit]
,[Custom5_Edit]
,[LastModDate]
,[LastModUser]
,[AddedDate]
,[AddedUser]
) VALUES (
 0 
,'AR Level'
,'Lexile Level'
, 1 
, 0 
, 0 
, 1 
, 0 
, 1 
, 1 
, 1 
, 1 
, 1 
, 0 
, 1 
, 1 
, 1 
, 0 
, 0 
, 0 
, 0 
, 0 
, 1 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 1 
, 0 
, 1 
, 1 
, 0 
, 1 
, 1 
, 0 
, 0 
, 0 
, 0 
, 1 
, 0 
, 0 
, 0 
, 0 
, 0 
, 1 
, 1 
, 0 
, 1 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 1 
, 0 
, 0 
, 0 
, 0 
, 1 
, 1 
, 0 
, 1 
, 0 
, 1 
, 1 
, 1 
, 1 
, 1 
, 0 
, 1 
, 1 
, 1 
, 0 
, 0 
, 1 
, 1 
, 1 
, 1 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 1 
, 0 
, 0 
, 0 
, 0 
, 0 
, 1 
, 0 
, 0 
, 0 
, 0 
, 1 
, 1 
, 0 
, 1 
, 0 
, 1 
, 1 
, 1 
, 1 
, 1 
, 0 
, 1 
, 1 
, 1 
, 0 
, 0 
, 1 
, 1 
, 1 
, 1 
, 0 
, 0 
, 0 
, 0 
, 0 
, 0 
, 1 
, 0 
, 0 
, 0 
, 0 
, 0 
, 1 
, 0 
, 0 
, 0 
, 0 
,'Feb  3 2014  1:05PM'
,'N/A'
,'Nov 17 2013  4:39PM'
,'N/A'
);

INSERT INTO SRPGroups ([GroupName]
,[GroupDescription]
,[LastModDate]
,[LastModUser]
,[AddedDate]
,[AddedUser]
) VALUES (
'Administrator'
,'Full Access'
,'Nov 25 2013  3:36PM'
,'N/A'
,'Oct 28 2013  8:36AM'
,'N/A'
);
INSERT INTO SRPGroups ([GroupName]
,[GroupDescription]
,[LastModDate]
,[LastModUser]
,[AddedDate]
,[AddedUser]
) VALUES (
'Volunteer'
,'Limited Access'
,'Oct 28 2013 10:59AM'
,'N/A'
,'Oct 28 2013  8:36AM'
,'N/A'
);
INSERT INTO SRPPermissionsMaster ([PermissionID]
,[PermissionName]
,[PermissionDesc]
,[MODID]
) VALUES (
 1000 
,'Modify Security Permission'
,'Allows a user to access any of the screens in the security module'
, NULL 
);
INSERT INTO SRPPermissionsMaster ([PermissionID]
,[PermissionName]
,[PermissionDesc]
,[MODID]
) VALUES (
 2000 
,'Delete Program Permission'
,'Allows a user to trigger the Purge Program functionality'
, NULL 
);
INSERT INTO SRPPermissionsMaster ([PermissionID]
,[PermissionName]
,[PermissionDesc]
,[MODID]
) VALUES (
 2100 
,'Add Program Permission'
,'Allows a user to create a new Program'
, NULL 
);
INSERT INTO SRPPermissionsMaster ([PermissionID]
,[PermissionName]
,[PermissionDesc]
,[MODID]
) VALUES (
 2200 
,'Modify  Program Permission'
,'Allows a user to create a new Program'
, NULL 
);
INSERT INTO SRPPermissionsMaster ([PermissionID]
,[PermissionName]
,[PermissionDesc]
,[MODID]
) VALUES (
 3000 
,'System Setup Permission'
,'Allows a user to access any of the screens used to perform the setup of the system'
, NULL 
);
INSERT INTO SRPSettings ([Name]
,[Value]
,[StorageType]
,[EditType]
,[ModID]
,[Label]
,[Description]
,[ValueList]
,[DefaultValue]
) VALUES (
'SysName'
,'MCLD Summer Reading Program'
,'Text'
,'TextBox'
, 0 
,'System Name'
,'Friendly name given to the application'
,''
,''
);
INSERT INTO SRPSettings ([Name]
,[Value]
,[StorageType]
,[EditType]
,[ModID]
,[Label]
,[Description]
,[ValueList]
,[DefaultValue]
) VALUES (
'ContactEmail'
,'bjonson@stglink.com'
,'Text'
,'TextBox'
, 0 
,'Contact Email Address'
,'The user exposed contact us email address'
,''
,''
);
INSERT INTO SRPSettings ([Name]
,[Value]
,[StorageType]
,[EditType]
,[ModID]
,[Label]
,[Description]
,[ValueList]
,[DefaultValue]
) VALUES (
'ContactName'
,'Bob Jonson'
,'Text'
,'TextBox'
, 0 
,'Contact Name'
,'The name associated with the contact email address.'
,''
,''
);
INSERT INTO SRPSettings ([Name]
,[Value]
,[StorageType]
,[EditType]
,[ModID]
,[Label]
,[Description]
,[ValueList]
,[DefaultValue]
) VALUES (
'FromEmailName'
,'SRP Webmaster'
,'Text'
,'TextBox'
, 0 
,'From Email Name'
,'Name of the person impersonated in system generated messages (e.g. Webmaster)'
,''
,''
);
INSERT INTO SRPSettings ([Name]
,[Value]
,[StorageType]
,[EditType]
,[ModID]
,[Label]
,[Description]
,[ValueList]
,[DefaultValue]
) VALUES (
'FromEmailAddress'
,'bjonson@stglink.com'
,'Text'
,'TextBox'
, 0 
,'From Email Address'
,'System generated messages email address '
,''
,''
);

INSERT INTO SRPSettings ([Name]
,[Value]
,[StorageType]
,[EditType]
,[ModID]
,[Label]
,[Description]
,[ValueList]
,[DefaultValue]
) VALUES (
'PageSize'
,'10'
,'int'
,'TextBox'
, 0 
,'# of Items Per Page'
,'Page Size'
,''
,'5'
);

INSERT INTO SRPUser ([Username]
,[Password]
,[FirstName]
,[LastName]
,[EmailAddress]
,[Division]
,[Department]
,[Title]
,[IsActive]
,[MustResetPassword]
,[IsDeleted]
,[LastPasswordReset]
,[DeletedDate]
,[LastModDate]
,[LastModUser]
,[AddedDate]
,[AddedUser]
) VALUES (
'sysadmin'
,'changeme05!'
,'System'
,'Administrator'
,'bjonson@stglink.com'
,''
,''
,''
, 1 
, 1 
, 0 
,'Oct 28 2013 11:44AM'
,NULL
,'Nov 18 2013  8:12AM'
,'sysadmin'
,'Oct 28 2013  8:36AM'
,'N/A'
);

INSERT INTO SRPUserGroups ([UID]
,[GID]
,[AddedDate]
,[AddedUser]
) VALUES (
 1000 
, 1000 
,'Oct 28 2013  8:40AM'
,'sysadmin'
);
INSERT INTO SRPGroupPermissions ([GID]
,[PermissionID]
,[AddedDate]
,[AddedUser]
) VALUES (
 1000 
, 1000 
,'Oct 28 2013  8:40AM'
,'N/A'
);
INSERT INTO SRPGroupPermissions ([GID]
,[PermissionID]
,[AddedDate]
,[AddedUser]
) VALUES (
 1000 
, 2000 
,'Nov  8 2013  9:56AM'
,'a'
);
INSERT INTO SRPGroupPermissions ([GID]
,[PermissionID]
,[AddedDate]
,[AddedUser]
) VALUES (
 1000 
, 2100 
,'Nov  8 2013  9:56AM'
,'a'
);
INSERT INTO SRPGroupPermissions ([GID]
,[PermissionID]
,[AddedDate]
,[AddedUser]
) VALUES (
 1000 
, 2200 
,'Nov  8 2013  9:56AM'
,'a'
);
INSERT INTO SRPGroupPermissions ([GID]
,[PermissionID]
,[AddedDate]
,[AddedUser]
) VALUES (
 1000 
, 3000 
,'Oct 28 2013 10:59AM'
,'a'
);
INSERT INTO Programs ([AdminName]
,[Title]
,[TabName]
,[POrder]
,[IsActive]
,[IsHidden]
,[StartDate]
,[EndDate]
,[MaxAge]
,[MaxGrade]
,[LoggingStart]
,[LoggingEnd]
,[ParentalConsentFlag]
,[ParentalConsentText]
,[PatronReviewFlag]
,[LogoutURL]
,[ProgramGameID]
,[HTML1]
,[HTML2]
,[HTML3]
,[HTML4]
,[HTML5]
,[HTML6]
,[BannerImage]
,[RegistrationBadgeID]
,[LastModUser]
,[AddedDate]
,[AddedUser]
,[LastModDate]
) VALUES (
'Sample Program 1'
,'Sample 1'
,'Sample 1'
, 1 
, 1 
, 0 
,'Jan  1 2010 12:00AM'
,'Dec 31 2500 12:00AM'
, 99 
, 12 
,'Jan  1 2010 12:00AM'
,'Dec 31 2500 12:00AM'
, 0 
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
, 1 
,''
, 0 
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,''
, 0 
,'a'
,'Nov  1 2013  3:11PM'
,'N/A'
,'Mar 11 2014 11:49AM'
)
;
INSERT INTO Programs ([AdminName]
,[Title]
,[TabName]
,[POrder]
,[IsActive]
,[IsHidden]
,[StartDate]
,[EndDate]
,[MaxAge]
,[MaxGrade]
,[LoggingStart]
,[LoggingEnd]
,[ParentalConsentFlag]
,[ParentalConsentText]
,[PatronReviewFlag]
,[LogoutURL]
,[ProgramGameID]
,[HTML1]
,[HTML2]
,[HTML3]
,[HTML4]
,[HTML5]
,[HTML6]
,[BannerImage]
,[RegistrationBadgeID]
,[LastModUser]
,[AddedDate]
,[AddedUser]
,[LastModDate]
) VALUES (
'Sample Program 2'
,'Sample 2'
,'Sample 2'
, 2 
, 1 
, 0 
,'Jan  1 2010 12:00AM'
,'Dec 31 2500 12:00AM'
, 99 
, 12 
,'Jan  1 2010 12:00AM'
,'Dec 31 2500 12:00AM'
, 0 
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
, 1 
,''
, 0 
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,''
, 0 
,'a'
,'Nov  1 2013  3:11PM'
,'N/A'
,'Mar 11 2014 11:49AM'
)
;
INSERT INTO Programs ([AdminName]
,[Title]
,[TabName]
,[POrder]
,[IsActive]
,[IsHidden]
,[StartDate]
,[EndDate]
,[MaxAge]
,[MaxGrade]
,[LoggingStart]
,[LoggingEnd]
,[ParentalConsentFlag]
,[ParentalConsentText]
,[PatronReviewFlag]
,[LogoutURL]
,[ProgramGameID]
,[HTML1]
,[HTML2]
,[HTML3]
,[HTML4]
,[HTML5]
,[HTML6]
,[BannerImage]
,[RegistrationBadgeID]
,[LastModUser]
,[AddedDate]
,[AddedUser]
,[LastModDate]
) VALUES (
'Sample Program 3'
,'Sample 3'
,'Sample 3'
, 3 
, 1 
, 0 
,'Jan  1 2010 12:00AM'
,'Dec 31 2500 12:00AM'
, 99 
, 12 
,'Jan  1 2010 12:00AM'
,'Dec 31 2500 12:00AM'
, 0 
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
, 1 
,''
, 0 
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sed malesuada augue. Aenean nec aliquam risus. Mauris sit amet eros aliquet, placerat sem non, viverra augue. Phasellus dignissim, erat sed sollicitudin convallis, enim felis elementum justo, eget molestie arcu nisl sit amet urna. Quisque a justo dignissim, tincidunt turpis quis, rhoncus augue. Nunc non porttitor orci. Ut vestibulum gravida enim, ut pharetra enim aliquam quis. Nulla mollis, mauris id interdum elementum, diam orci dapibus turpis, et consectetur turpis diam scelerisque lorem. Ut sit amet odio enim. Nullam varius turpis vel malesuada eleifend. Aliquam at semper ligula. Sed sed interdum dolor, ac condimentum nulla.</p>'
,''
, 0 
,'a'
,'Nov  1 2013  3:11PM'
,'N/A'
,'Mar 11 2014 11:49AM'
)
;
Alter PROCEDURE [dbo].[app_PatronBadges_GetAll]
@PID int = 0
AS
   Select 
	ROW_NUMBER() over (order by DateEarned, PBID) as Rank,
	pb.*, b.UserName as Title
	from [PatronBadges] pb left join Badge b 
		on pb.BadgeID = b.BID
   where PID = @PID 
   order by DateEarned, PBID
;

ALTER PROCEDURE [dbo].[app_RegistrationSettings_Update] (
	 @RID int 
	,@Literacy1Label varchar (50)
	,@Literacy2Label varchar (50)
	,@DOB_Prompt bit 
	,@Age_Prompt bit 
	,@SchoolGrade_Prompt bit 
	,@FirstName_Prompt bit 
	,@MiddleName_Prompt bit 
	,@LastName_Prompt bit 
	,@Gender_Prompt bit 
	,@EmailAddress_Prompt bit 
	,@PhoneNumber_Prompt bit 
	,@StreetAddress1_Prompt bit 
	,@StreetAddress2_Prompt bit 
	,@City_Prompt bit 
	,@State_Prompt bit 
	,@ZipCode_Prompt bit 
	,@Country_Prompt bit 
	,@County_Prompt bit 
	,@ParentGuardianFirstName_Prompt bit 
	,@ParentGuardianLastName_Prompt bit 
	,@ParentGuardianMiddleName_Prompt bit 
	,@PrimaryLibrary_Prompt bit 
	,@LibraryCard_Prompt bit 
	,@SchoolName_Prompt bit 
	,@District_Prompt bit 
	,@Teacher_Prompt bit 
	,@GroupTeamName_Prompt bit 
	,@SchoolType_Prompt bit 
	,@LiteracyLevel1_Prompt bit 
	,@LiteracyLevel2_Prompt bit 
	,@ParentPermFlag_Prompt bit 
	,@Over18Flag_Prompt bit 
	,@ShareFlag_Prompt bit 
	,@TermsOfUseflag_Prompt bit 
	,@Custom1_Prompt bit 
	,@Custom2_Prompt bit 
	,@Custom3_Prompt bit 
	,@Custom4_Prompt bit 
	,@Custom5_Prompt bit 
	,@DOB_Req bit 
	,@Age_Req bit 
	,@SchoolGrade_Req bit 
	,@FirstName_Req bit 
	,@MiddleName_Req bit 
	,@LastName_Req bit 
	,@Gender_Req bit 
	,@EmailAddress_Req bit 
	,@PhoneNumber_Req bit 
	,@StreetAddress1_Req bit 
	,@StreetAddress2_Req bit 
	,@City_Req bit 
	,@State_Req bit 
	,@ZipCode_Req bit 
	,@Country_Req bit 
	,@County_Req bit 
	,@ParentGuardianFirstName_Req bit 
	,@ParentGuardianLastName_Req bit 
	,@ParentGuardianMiddleName_Req bit 
	,@PrimaryLibrary_Req bit 
	,@LibraryCard_Req bit 
	,@SchoolName_Req bit 
	,@District_Req bit 
	,@Teacher_Req bit 
	,@GroupTeamName_Req bit 
	,@SchoolType_Req bit 
	,@LiteracyLevel1_Req bit 
	,@LiteracyLevel2_Req bit 
	,@ParentPermFlag_Req bit 
	,@Over18Flag_Req bit 
	,@ShareFlag_Req bit 
	,@TermsOfUseflag_Req bit 
	,@Custom1_Req bit 
	,@Custom2_Req bit 
	,@Custom3_Req bit 
	,@Custom4_Req bit 
	,@Custom5_Req bit 
	,@DOB_Show bit 
	,@Age_Show bit 
	,@SchoolGrade_Show bit 
	,@FirstName_Show bit 
	,@MiddleName_Show bit 
	,@LastName_Show bit 
	,@Gender_Show bit 
	,@EmailAddress_Show bit 
	,@PhoneNumber_Show bit 
	,@StreetAddress1_Show bit 
	,@StreetAddress2_Show bit 
	,@City_Show bit 
	,@State_Show bit 
	,@ZipCode_Show bit 
	,@Country_Show bit 
	,@County_Show bit 
	,@ParentGuardianFirstName_Show bit 
	,@ParentGuardianLastName_Show bit 
	,@ParentGuardianMiddleName_Show bit 
	,@PrimaryLibrary_Show bit 
	,@LibraryCard_Show bit 
	,@SchoolName_Show bit 
	,@District_Show bit 
	,@Teacher_Show bit 
	,@GroupTeamName_Show bit 
	,@SchoolType_Show bit 
	,@LiteracyLevel1_Show bit 
	,@LiteracyLevel2_Show bit 
	,@ParentPermFlag_Show bit 
	,@Over18Flag_Show bit 
	,@ShareFlag_Show bit 
	,@TermsOfUseflag_Show bit 
	,@Custom1_Show bit 
	,@Custom2_Show bit 
	,@Custom3_Show bit 
	,@Custom4_Show bit 
	,@Custom5_Show bit 
	,@DOB_Edit bit 
	,@Age_Edit bit 
	,@SchoolGrade_Edit bit 
	,@FirstName_Edit bit 
	,@MiddleName_Edit bit 
	,@LastName_Edit bit 
	,@Gender_Edit bit 
	,@EmailAddress_Edit bit 
	,@PhoneNumber_Edit bit 
	,@StreetAddress1_Edit bit 
	,@StreetAddress2_Edit bit 
	,@City_Edit bit 
	,@State_Edit bit 
	,@ZipCode_Edit bit 
	,@Country_Edit bit 
	,@County_Edit bit 
	,@ParentGuardianFirstName_Edit bit 
	,@ParentGuardianLastName_Edit bit 
	,@ParentGuardianMiddleName_Edit bit 
	,@PrimaryLibrary_Edit bit 
	,@LibraryCard_Edit bit 
	,@SchoolName_Edit bit 
	,@District_Edit bit 
	,@Teacher_Edit bit 
	,@GroupTeamName_Edit bit 
	,@SchoolType_Edit bit 
	,@LiteracyLevel1_Edit bit 
	,@LiteracyLevel2_Edit bit 
	,@ParentPermFlag_Edit bit 
	,@Over18Flag_Edit bit 
	,@ShareFlag_Edit bit 
	,@TermsOfUseflag_Edit bit 
	,@Custom1_Edit bit 
	,@Custom2_Edit bit 
	,@Custom3_Edit bit 
	,@Custom4_Edit bit 
	,@Custom5_Edit bit 
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update RegistrationSettings
	Set 
		Literacy1Label =  @Literacy1Label
		,Literacy2Label =  @Literacy2Label
		,DOB_Prompt =  @DOB_Prompt
		,Age_Prompt =  @Age_Prompt
		,SchoolGrade_Prompt =  @SchoolGrade_Prompt
		,FirstName_Prompt =  @FirstName_Prompt
		,MiddleName_Prompt =  @MiddleName_Prompt
		,LastName_Prompt =  @LastName_Prompt
		,Gender_Prompt =  @Gender_Prompt
		,EmailAddress_Prompt =  @EmailAddress_Prompt
		,PhoneNumber_Prompt =  @PhoneNumber_Prompt
		,StreetAddress1_Prompt =  @StreetAddress1_Prompt
		,StreetAddress2_Prompt =  @StreetAddress2_Prompt
		,City_Prompt =  @City_Prompt
		,State_Prompt =  @State_Prompt
		,ZipCode_Prompt =  @ZipCode_Prompt
		,Country_Prompt =  @Country_Prompt
		,County_Prompt =  @County_Prompt
		,ParentGuardianFirstName_Prompt =  @ParentGuardianFirstName_Prompt
		,ParentGuardianLastName_Prompt =  @ParentGuardianLastName_Prompt
		,ParentGuardianMiddleName_Prompt =  @ParentGuardianMiddleName_Prompt
		,PrimaryLibrary_Prompt =  @PrimaryLibrary_Prompt
		,LibraryCard_Prompt =  @LibraryCard_Prompt
		,SchoolName_Prompt =  @SchoolName_Prompt
		,District_Prompt =  @District_Prompt
		,Teacher_Prompt =  @Teacher_Prompt
		,GroupTeamName_Prompt =  @GroupTeamName_Prompt
		,SchoolType_Prompt =  @SchoolType_Prompt
		,LiteracyLevel1_Prompt =  @LiteracyLevel1_Prompt
		,LiteracyLevel2_Prompt =  @LiteracyLevel2_Prompt
		,ParentPermFlag_Prompt =  @ParentPermFlag_Prompt
		,Over18Flag_Prompt =  @Over18Flag_Prompt
		,ShareFlag_Prompt =  @ShareFlag_Prompt
		,TermsOfUseflag_Prompt =  @TermsOfUseflag_Prompt
		,Custom1_Prompt =  @Custom1_Prompt
		,Custom2_Prompt =  @Custom2_Prompt
		,Custom3_Prompt =  @Custom3_Prompt
		,Custom4_Prompt =  @Custom4_Prompt
		,Custom5_Prompt =  @Custom5_Prompt
		,DOB_Req =  @DOB_Req
		,Age_Req =  @Age_Req
		,SchoolGrade_Req =  @SchoolGrade_Req
		,FirstName_Req =  @FirstName_Req
		,MiddleName_Req =  @MiddleName_Req
		,LastName_Req =  @LastName_Req
		,Gender_Req =  @Gender_Req
		,EmailAddress_Req =  @EmailAddress_Req
		,PhoneNumber_Req =  @PhoneNumber_Req
		,StreetAddress1_Req =  @StreetAddress1_Req
		,StreetAddress2_Req =  @StreetAddress2_Req
		,City_Req =  @City_Req
		,State_Req =  @State_Req
		,ZipCode_Req =  @ZipCode_Req
		,Country_Req =  @Country_Req
		,County_Req =  @County_Req
		,ParentGuardianFirstName_Req =  @ParentGuardianFirstName_Req
		,ParentGuardianLastName_Req =  @ParentGuardianLastName_Req
		,ParentGuardianMiddleName_Req =  @ParentGuardianMiddleName_Req
		,PrimaryLibrary_Req =  @PrimaryLibrary_Req
		,LibraryCard_Req =  @LibraryCard_Req
		,SchoolName_Req =  @SchoolName_Req
		,District_Req =  @District_Req
		,Teacher_Req =  @Teacher_Req
		,GroupTeamName_Req =  @GroupTeamName_Req
		,SchoolType_Req =  @SchoolType_Req
		,LiteracyLevel1_Req =  @LiteracyLevel1_Req
		,LiteracyLevel2_Req =  @LiteracyLevel2_Req
		,ParentPermFlag_Req =  @ParentPermFlag_Req
		,Over18Flag_Req =  @Over18Flag_Req
		,ShareFlag_Req =  @ShareFlag_Req
		,TermsOfUseflag_Req =  @TermsOfUseflag_Req
		,Custom1_Req =  @Custom1_Req
		,Custom2_Req =  @Custom2_Req
		,Custom3_Req =  @Custom3_Req
		,Custom4_Req =  @Custom4_Req
		,Custom5_Req =  @Custom5_Req
		
		,DOB_Show =  @DOB_Show
		,Age_Show =  @Age_Show		
				,SchoolGrade_Show =  @SchoolGrade_Show
		,FirstName_Show =  @FirstName_Show
		,MiddleName_Show =  @MiddleName_Show
		,LastName_Show =  @LastName_Show
		,Gender_Show =  @Gender_Show
		,EmailAddress_Show =  @EmailAddress_Show
		,PhoneNumber_Show =  @PhoneNumber_Show
		,StreetAddress1_Show =  @StreetAddress1_Show
		,StreetAddress2_Show =  @StreetAddress2_Show
		,City_Show =  @City_Show
		,State_Show =  @State_Show
		,ZipCode_Show =  @ZipCode_Show
		,Country_Show =  @Country_Show
		,County_Show =  @County_Show
		,ParentGuardianFirstName_Show =  @ParentGuardianFirstName_Show
		,ParentGuardianLastName_Show =  @ParentGuardianLastName_Show
		,ParentGuardianMiddleName_Show =  @ParentGuardianMiddleName_Show
		,PrimaryLibrary_Show =  @PrimaryLibrary_Show
		,LibraryCard_Show =  @LibraryCard_Show
		,SchoolName_Show =  @SchoolName_Show
		,District_Show =  @District_Show
		,Teacher_Show =  @Teacher_Show
		,GroupTeamName_Show =  @GroupTeamName_Show
		,SchoolType_Show =  @SchoolType_Show
		,LiteracyLevel1_Show =  @LiteracyLevel1_Show
		,LiteracyLevel2_Show =  @LiteracyLevel2_Show
		,ParentPermFlag_Show =  @ParentPermFlag_Show
		,Over18Flag_Show =  @Over18Flag_Show
		,ShareFlag_Show =  @ShareFlag_Show
		,TermsOfUseflag_Show =  @TermsOfUseflag_Show
		,Custom1_Show =  @Custom1_Show
		,Custom2_Show =  @Custom2_Show
		,Custom3_Show =  @Custom3_Show
		,Custom4_Show =  @Custom4_Show
		,Custom5_Show =  @Custom5_Show
		
		,DOB_Edit =  @DOB_Edit
		,Age_Edit =  @Age_Edit		
		,SchoolGrade_Edit =  @SchoolGrade_Edit
		,FirstName_Edit =  @FirstName_Edit
		,MiddleName_Edit =  @MiddleName_Edit
		,LastName_Edit =  @LastName_Edit
		,Gender_Edit =  @Gender_Edit
		,EmailAddress_Edit =  @EmailAddress_Edit
		,PhoneNumber_Edit =  @PhoneNumber_Edit
		,StreetAddress1_Edit =  @StreetAddress1_Edit
		,StreetAddress2_Edit =  @StreetAddress2_Edit
		,City_Edit =  @City_Edit
		,State_Edit =  @State_Edit
		,ZipCode_Edit =  @ZipCode_Edit
		,Country_Edit =  @Country_Edit
		,County_Edit =  @County_Edit
		,ParentGuardianFirstName_Edit =  @ParentGuardianFirstName_Edit
		,ParentGuardianLastName_Edit =  @ParentGuardianLastName_Edit
		,ParentGuardianMiddleName_Edit =  @ParentGuardianMiddleName_Edit
		,PrimaryLibrary_Edit =  @PrimaryLibrary_Edit
		,LibraryCard_Edit =  @LibraryCard_Edit
		,SchoolName_Edit =  @SchoolName_Edit
		,District_Edit =  @District_Edit
		,Teacher_Edit =  @Teacher_Edit
		,GroupTeamName_Edit =  @GroupTeamName_Edit
		,SchoolType_Edit =  @SchoolType_Edit
		,LiteracyLevel1_Edit =  @LiteracyLevel1_Edit
		,LiteracyLevel2_Edit =  @LiteracyLevel2_Edit
		,ParentPermFlag_Edit =  @ParentPermFlag_Edit
		,Over18Flag_Edit =  @Over18Flag_Edit
		,ShareFlag_Edit =  @ShareFlag_Edit
		,TermsOfUseflag_Edit =  @TermsOfUseflag_Edit
		,Custom1_Edit =  @Custom1_Edit
		,Custom2_Edit =  @Custom2_Edit
		,Custom3_Edit =  @Custom3_Edit
		,Custom4_Edit =  @Custom4_Edit
		,Custom5_Edit =  @Custom5_Edit
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser
		,LastModDate =  @LastModDate				
	Where RID = @RID
;ALTER PROCEDURE [dbo].[app_Event_GetUpcomingDisplay]
  @startDate datetime = null
, @endDate datetime = null
, @branchID int = 0
 AS
   Select * 
	, (select Code from dbo.Code where CID = BranchID ) as Branch
   from [Event]
   where 
		(BranchID = @branchID or @branchID = 0)
		AND (EventDate >= @startDate or @startDate is null)
		AND (EventDate <= @endDate or @endDate is null)
		AND dateadd(d,1,EventDate) >= GETDATE()
   order by EventDate asc, EventTitle 
;
alter Procedure [dbo].[app_MGOnlineBookPages_Reorder]
@MGID int 
AS
	UPDATE MGOnlineBookPages 
	SET PageNumber = rowNumber 
	FROM MGOnlineBookPages
		INNER JOIN 
		(SELECT OBPGID, PageNumber, row_number() OVER (ORDER BY PageNumber Asc) as rowNumber
			FROM MGOnlineBookPages where MGID = @MGID) drRowNumbers 
			ON drRowNumbers.OBPGID = MGOnlineBookPages.OBPGID and MGID = @MGID
	where MGID = @MGID
;
ALTER PROCEDURE [dbo].[app_Patron_Delete]
@PID int 
AS
delete from dbo.Notifications where PID_To = @PID OR PID_From = @PID
delete from dbo.PatronBadges where PID = @PID
delete from dbo.PatronBookLists where PID = @PID
delete from dbo.PatronPoints where PID = @PID
delete from dbo.PatronPrizes where PID = @PID
delete from dbo.PatronReadingLog where PID = @PID
delete from dbo.PatronReview where PID = @PID
delete from dbo.PatronRewardCodes where PID = @PID
delete from dbo.PrizeDrawingWinners where PatronID = @PID
update Patron set MasterAcctPID = 0 where MasterAcctPID = @PID
   Delete from [Patron] Where PID = @PID
;
ALTER TABLE dbo.ProgramCodes ADD
	ShortCode varchar(20) NULL
;

ALTER PROCEDURE [dbo].[app_ProgramCodes_GetExportList]
@PID int = 1
AS
   
select 
	 CodeNumber as "Code Number"
	,ShortCode as "Code Value"
	,case isUsed when 1 then 'Yes' else 'No' end as "Code Was Assigned"
	,DateUsed as "Date Used"
	,p.FirstName as "Assigned to First Name"
	,p.LastName as "Assigned to Last Name"
	,p.Username as "Assigned to Username"
from ProgramCodes pc
			left outer join Patron p 
				on pc.PatronId = p.PID
where pc.PID = @PID
order by PCID
;
ALTER PROCEDURE [dbo].[app_ProgramCodes_Insert] (
	 @PID int 
	,@CodeNumber int 
	,@CodeValue uniqueidentifier 
	,@ShortCode varchar(20) = ''
	,@isUsed bit 
	,@DateCreated datetime 
	,@DateUsed datetime 
	,@PatronId int 
	,@PCID int output 
) AS
Begin
	Insert into ProgramCodes
		(PID
		,CodeNumber
		,CodeValue
		,ShortCode
		,isUsed
		,DateCreated
		,DateUsed
		,PatronId
)
	VALUES
		(@PID
		,@CodeNumber
		,@CodeValue
		,@ShortCode
		,@isUsed
		,@DateCreated
		,@DateUsed
		,@PatronId
)
	Select @PCID = SCOPE_IDENTITY()
END
;
ALTER PROCEDURE [dbo].[app_ProgramCodes_Stats]
@PID int = 1
AS
   
select isnull((select COUNT(*) from ProgramCodes where PID = @PID),0) as TotalCodes
	,isnull((select COUNT(*) from ProgramCodes where PID = @PID and isUsed=1),0) as UsedCodes
	,isnull((select COUNT(*) from ProgramCodes where PID = @PID and isUsed=0),0) as RemainingCodes
	--,isnull((select Top 1 convert(varchar(64),CodeValue) from ProgramCodes where PID = @PID and isUsed=1 order by PCID desc),'') as LastUsedCode
	,isnull((select Top 1 ShortCode from ProgramCodes where PID = @PID and isUsed=1 order by PCID desc),'') as LastUsedCode
;
ALTER PROCEDURE [dbo].[app_ProgramCodes_Update] (
	 @PCID int 
	,@PID int 
	,@CodeNumber int 
	,@CodeValue uniqueidentifier 
	,@ShortCode varchar(20) = ''	
	,@isUsed bit 
	,@DateCreated datetime 
	,@DateUsed datetime 
	,@PatronId int 

) AS
	Update ProgramCodes
	Set 
		PID =  @PID
		,CodeNumber =  @CodeNumber
		,CodeValue =  @CodeValue
		,ShortCode = @ShortCode
		,isUsed =  @isUsed
		,DateCreated =  @DateCreated
		,DateUsed =  @DateUsed
		,PatronId =  @PatronId

	Where PCID = @PCID

;

Create procedure [dbo].[rpt_GameLevelStats]
 @ProgId int = null
,@BranchID int = null
,@School varchar(50) = null
,@LibSys varchar(50) = null
as
SET ARITHABORT  OFF
SET ANSI_WARNINGS OFF
Declare @Levels TABLE 
(	PGID int,
	GameLevel int,
	PointsNeeded int,
	IsBonus bit
)
insert into @Levels
select 
    f.* 
from 
    ProgramGame pgm
    cross apply dbo.ProgramGameCummulativePoints(pgm.PGID) f
	

select ProgID, pg.AdminName, 
	isnull((Select Top 1 L.GameLevel from @Levels L where L.PointsNeeded <= isNull((select SUM(NumPoints) from PatronPoints pp where pp.PID = p.PID),0) and L.PGID = pgm.PGID order by GameLevel desc),0) as LevelAchieved
into #Temp
from Patron p left join Programs pg
		on ProgID = pg.PID
	        left join ProgramGame pgm
		on pg.ProgramGameID = pgm.PGID
where 
	ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)	
	--AND [dbo].[fx_IsFinisher](p.PID, Pg.PID) = 1

order by p.PID, p.ProgID

select AdminName, LevelAchieved, COUNT(LevelAchieved)as FinisherCount
from #Temp
group by ProgID, AdminName, LevelAchieved
order by AdminName, LevelAchieved 
;
ALTER PROCEDURE [dbo].[app_ProgramCodes_AssignCodeForPatron] (
		@PID int 
	,@PatronId int 

) AS
declare 	 @PCID int 
	
	select 
		top 1
	@PCID = PCID from ProgramCodes where PID =  @PID and isUsed = 0 order by PCID 



	Update ProgramCodes
	Set 
			isUsed =  1
		,DateUsed =  GETDATE()
		,PatronId =  @PatronId

	Where PCID = @PCID
	
	select *, 0 from ProgramCodes where PCID = @PCID
	union 
	select *, 1 from ProgramCodes where PCID = @PCID
;
ALTER PROCEDURE [dbo].[app_ProgramCodes_Generate]
 @start INT = 1
,@end INT = 10000
,@PID int = 1
AS
   

WITH numbers AS (
    SELECT @start AS Number, NEWID() as Code
		where Substring(CONVERT(varchar(36), NEWID()),4,20) not in (select ShortCode from ProgramCodes)
    UNION ALL
    SELECT number + 1, NEWID() 
    FROM  numbers
    WHERE number < @end
)
insert into ProgramCodes(PID, CodeNumber, CodeValue, isUsed, DateCreated, DateUsed, PatronId, ShortCode)
SELECT @PID, Number, Code, 0, GETDATE(),null,0, Substring(CONVERT(varchar(36), Code),4,20)
FROM numbers
OPTION (MAXRECURSION 0)
;


CREATE  PROCEDURE [dbo].[rpt_MiniGameStats]
 @start	datetime = null
,@end	datetime = null
,@MGID  int = null

AS


WITH stats AS 
	(select distinct 
		gps.GPSID, 
		gps.PID ,p.Username, p.FirstName, p.LastName, p.Gender, p.EmailAddress, 
			gps.MGID, g.GameName, g.AdminName, gps.MGType, g.MiniGameTypeName
		,gps.CompletedPlay, Difficulty, Started, Completed
		from GamePlayStats gps
				left outer join Patron p
					on gps.PID = p.PID
				left outer join Minigame g
					on gps.MGID = g.MGID)
select distinct PID as "Patron ID", Username, FirstName as "First Name", 
		LastName as "Last Name", Gender, EmailAddress as Email, MGID as "MiniGame ID", GameName as "Game Name", 
		AdminName as "Administrative Name", MGType as "MiniGame Type ID" , MiniGameTypeName as "MiniGame Type"
	, (select COUNT(*) from stats s1 where s1.PID = s.PID and s1.mgid = s.mgid and s1.Difficulty='Easy' and (@start is null or s1.Started >= @start) and (@end is null or s1.Started <= @end)) as EasyLevelStated
	, (select COUNT(*) from stats s1 where s1.PID = s.PID and s1.mgid = s.mgid and s1.Difficulty='Easy' and s1.CompletedPlay=1 and (@start is null or s1.Started >= @start) and (@end is null or s1.Started <= @end)) as EasyLevelCompleted
	, (select COUNT(*) from stats s1 where s1.PID = s.PID and s1.mgid = s.mgid and s1.Difficulty='Medium' and (@start is null or s1.Started >= @start) and (@end is null or s1.Started <= @end)) as MediumLevelStated
	, (select COUNT(*) from stats s1 where s1.PID = s.PID and s1.mgid = s.mgid and s1.Difficulty='Medium' and s1.CompletedPlay=1 and (@start is null or s1.Started >= @start) and (@end is null or s1.Started <= @end)) as MediumLevelCompleted
	, (select COUNT(*) from stats s1 where s1.PID = s.PID and s1.mgid = s.mgid and s1.Difficulty='Hard' and (@start is null or s1.Started >= @start) and (@end is null or s1.Started <= @end)) as HardLevelStated
	, (select COUNT(*) from stats s1 where s1.PID = s.PID and s1.mgid = s.mgid and s1.Difficulty='Hard' and s1.CompletedPlay=1 and (@start is null or s1.Started >= @start) and (@end is null or s1.Started <= @end)) as HardLevelCompleted
from stats s
where (@start is null or Started >= @start)
		and (@end is null or Started >= @end)
		and (@MGID is null or @MGID=MGID)
order by Username, FirstName, LastName, Gender, EmailAddress, MGID, GameName, AdminName




	;
	CREATE TABLE dbo.Award
	(
	AID int NOT NULL IDENTITY (1, 1),
	AwardName varchar(80) NULL,
	BadgeID int NULL,
	NumPoints int NULL,
	BranchID int NULL,
	ProgramID int NULL,
	District varchar(50) NULL,
	SchoolName varchar(50) NULL,
	BadgeList varchar(500) NULL,
	LastModDate datetime NULL,
	LastModUser varchar(50) NULL,
	AddedDate datetime NULL,
	AddedUser varchar(50) NULL
	)  ON [PRIMARY]
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_BadgeID DEFAULT 0 FOR BadgeID
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_NumPoints DEFAULT 0 FOR NumPoints
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_BranchID DEFAULT 0 FOR BranchID
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_ProgramID DEFAULT 0 FOR ProgramID
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_District DEFAULT '' FOR District
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_SchoolName DEFAULT '' FOR SchoolName
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_BadgeList DEFAULT '' FOR BadgeList
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_LastModDate DEFAULT (getdate()) FOR LastModDate
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_LastModUser DEFAULT ('N/A') FOR LastModUser
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_AddedDate DEFAULT (getdate()) FOR AddedDate
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	DF_Award_AddedUser DEFAULT ('N/A') FOR AddedUser
;
ALTER TABLE dbo.Award ADD CONSTRAINT
	PK_Award PRIMARY KEY CLUSTERED 
	(
	AID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

;
CREATE PROCEDURE [dbo].[app_Award_GetAll]
AS
Select * 
	, isnull((select AdminName from Badge where BID = BadgeId), '') as BadgeName 
	, isnull((select Code from Code where CID = BranchID), '') as Branch
	, isnull((select AdminName from Programs where PID = ProgramId), '') as Program 
from [Award]
;
CREATE PROCEDURE [dbo].[app_Award_GetByID]
@AID int 
AS
   Select * from [Award] Where AID = @AID
;
CREATE PROCEDURE [dbo].[app_Award_Delete]
@AID int 
AS
   Delete from [Award] Where AID = @AID
;
CREATE PROCEDURE [dbo].[app_Award_Insert] (
	 @AwardName varchar (80)
	,@BadgeID int 
	,@NumPoints int 
	,@BranchID int 
	,@ProgramID int 
	,@District varchar (50)
	,@SchoolName varchar (50)
	,@BadgeList varchar (500)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)
	,@AID int output 
) AS
Begin
	Insert into Award
		(AwardName
		,BadgeID
		,NumPoints
		,BranchID
		,ProgramID
		,District
		,SchoolName
		,BadgeList
		,LastModDate
		,LastModUser
		,AddedDate
		,AddedUser
)
	VALUES
		(@AwardName
		,@BadgeID
		,@NumPoints
		,@BranchID
		,@ProgramID
		,@District
		,@SchoolName
		,@BadgeList
		,@LastModDate
		,@LastModUser
		,@AddedDate
		,@AddedUser
)
	Select @AID = SCOPE_IDENTITY()
END
;
CREATE PROCEDURE [dbo].[app_Award_Update] (
	 @AID int 
	,@AwardName varchar (80)
	,@BadgeID int 
	,@NumPoints int 
	,@BranchID int 
	,@ProgramID int 
	,@District varchar (50)
	,@SchoolName varchar (50)
	,@BadgeList varchar (500)
	,@LastModDate datetime 
	,@LastModUser varchar (50)
	,@AddedDate datetime 
	,@AddedUser varchar (50)

) AS
	Update Award
	Set 
		AwardName =  @AwardName
		,BadgeID =  @BadgeID
		,NumPoints =  @NumPoints
		,BranchID =  @BranchID
		,ProgramID =  @ProgramID
		,District =  @District
		,SchoolName =  @SchoolName
		,BadgeList =  @BadgeList
		,LastModDate =  @LastModDate
		,LastModUser =  @LastModUser
		,AddedDate =  @AddedDate
		,AddedUser =  @AddedUser

	Where AID = @AID
;
CREATE PROCEDURE [dbo].app_Award_GetBadgeListMembership
@BadgeList varchar(500) = '' 
AS
Select BID	, AdminName
			, Case when CHARINDEX(CONVERT(varchar(10), BID) + ',', ','+@BadgeList+',') > 0 then 1 else 0 end as isMember
from Badge
order by AdminName, BID
;
Create function [dbo].fx_PatronHasAllBadgesInList(@PID int, @BadgeList varchar(500))
returns bit
as
Begin
	 
	Declare @ret bit
	set @ret = 0
	if (select COUNT(DISTINCT BID) from Badge where BID in (select * from fnSplitBigInt(@BadgeList))) = (select COUNT(DISTINCT BadgeID) from PatronBadges where PID = @PID and 

BadgeID in (select * from fnSplitBigInt(@BadgeList)))
	begin
		set @ret = 1
	end
	return @ret	
End
;
CREATE PROCEDURE [dbo].app_Award_GetPatronQualifyingAwards
@PID int = 0
AS
select a.*, p.PID, ProgID, PrimaryLibrary, p.District, p.SchoolName, Points
from Award a
		 inner join	(
			select PID, ProgID, PrimaryLibrary, District, SchoolName, 
				isnull((select isnull(SUM(isnull(NumPoints,0)),0) from PatronPoints pp where pp.PID = pt.PID),0) as Points 
			from Patron pt
			where pt.PID = @PID
					) as p
			on 
				(a.ProgramID = p.ProgID or a.ProgramID=0 )
				AND
				(a.BranchID = p.PrimaryLibrary or a.BranchID=0 )
				AND
				(a.District = p.District or a.District = '' )
				AND
				(a.SchoolName = p.SchoolName or a.SchoolName = '' )	
				AND 
				(a.NumPoints <= p.Points)	
				AND 
				(BadgeList = '' or dbo.fx_PatronHasAllBadgesInList(p.PID, BadgeList) = 1)

;
create procedure dbo.rpt_PatronFilter
 @ProgId int = null
,@BranchID int = null
,@School varchar(50) = null
,@LibSys varchar(50) = null
as
SET ARITHABORT  OFF
SET ANSI_WARNINGS OFF

select distinct Patron.PID
from Patron 
where 
	ProgID > 0 
	AND	(ProgID = @ProgId or @ProgId is null)
	AND (PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(District,''))) = @LibSys or @LibSys is null)	
;
Create function [dbo].[fx_ConvertPoints](@ProgID int, @Points int, @OutReadingType int )
returns decimal(16,4)
as
Begin
	 
	Declare @ret decimal(16,4)
	Declare @OutActivityTypePoints int 
	Declare @OutActivityTypeCount int 	
	select @OutActivityTypePoints = -1, @OutActivityTypeCount = -1
	
	select @OutActivityTypePoints = PointCount, @OutActivityTypeCount = ActivityCount from ProgramGamePointConversion where PGID = @ProgID and ActivityTypeId = @OutReadingType
	
	if (@OutActivityTypePoints is null or @OutActivityTypeCount is null )
	begin
		set @ret = null 
	end
	else
	begin
		if (@OutActivityTypePoints = 0 )
		begin
			set @ret = null 
		end
		else
		begin
			set @ret = convert(decimal(16,4), convert(decimal(16,4),@Points) * convert(decimal(16,4),@OutActivityTypeCount)) / convert(decimal(16,4),@OutActivityTypePoints)
		end 
	end 
	
	return @ret	
End
;
Create  procedure [dbo].[rpt_ReadingActivityReport]
 @ProgId int = null
,@BranchID int = null
,@School varchar(50) = null
,@LibSys varchar(50) = null
,@ActivityType int = 1
as

declare @ActivityLabel varchar(50)
select @ActivityLabel = case @ActivityType when 0 then 'Books' when 1 then 'Pages' when 2 then 'Paragraphs' when 3 then 'Minutes' else 'Unknown' end 

select isnull(pg.AdminName, 'N/A') as Program, p.Username, isnull(p.FirstName,'') FirstName, isnull(p.LastName,'') LastName,  
	isnull(convert(varchar, Sum(dbo.fx_ConvertPoints(p.ProgID, isnull(l.ReadingPoints,0), @ActivityType))),'N/A') as PatronActivityCount
	,@ActivityLabel as Activity,  p.PID as PatronID
from Patron p left outer join PatronReadingLog l
				on p.PID = l.PID
			left outer join Programs pg 
				on p.ProgID = pg.PID
where 
	p.ProgID > 0 
	AND	(p.ProgID = @ProgId or @ProgId is null)
	AND (p.PrimaryLibrary = @BranchID or @BranchID is null)
	AND (rtrim(ltrim(isnull(p.SchoolName,''))) = @School or @School is null)
	AND (rtrim(ltrim(isnull(p.District,''))) = @LibSys or @LibSys is null)	

group by p.PID, p.Username, p.FirstName, p.LastName, pg.AdminName, p.ProgID
order by pg.AdminName, p.FirstName, p.LastName
